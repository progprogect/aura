const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkSMS() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é SMS –∫–æ–¥—ã –¥–ª—è –Ω–æ–º–µ—Ä–∞ +79999999996...');
    
    const codes = await prisma.sMSVerification.findMany({
      where: {
        phone: '+79999999996'
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 5
    });
    
    console.log('üì± –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–¥—ã:');
    codes.forEach((code, i) => {
      console.log(`${i+1}. –ö–æ–¥: ${code.code}, –¶–µ–ª—å: ${code.purpose}, –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: ${code.isUsed}, –ü–æ–ø—ã—Ç–∫–∏: ${code.attempts}, –°–æ–∑–¥–∞–Ω: ${code.createdAt.toISOString()}, –ò—Å—Ç–µ–∫–∞–µ—Ç: ${code.expiresAt.toISOString()}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { phone: '+79999999996' },
      include: { specialistProfile: true }
    });
    
    console.log('\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:');
    if (user) {
      console.log(`ID: ${user.id}, –ò–º—è: ${user.firstName} ${user.lastName}, –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${!!user.specialistProfile}`);
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkSMS();
