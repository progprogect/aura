'use client'

import { useState } from 'react'
import Image from 'next/image'
import { motion } from 'framer-motion'
import { cn } from '@/lib/utils'
import { getLeadMagnetPreviewData, getLeadMagnetBadgeColor } from '@/lib/lead-magnets/preview'
import { generateLinkPreview, generateFilePreview, getAspectRatio } from '@/lib/lead-magnets/preview-generator'
import { ServicePreview } from './ServicePreview'
import type { LeadMagnet } from '@/types/lead-magnet'

interface SmartPreviewProps {
  leadMagnet: Pick<LeadMagnet, 'type' | 'fileUrl' | 'linkUrl' | 'ogImage' | 'fileSize' | 'emoji' | 'title' | 'description' | 'highlights'>
  className?: string
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ (YouTube, Vimeo, etc.)
function VideoEmbed({ url, platform }: { url: string; platform?: string }) {
  const [isLoaded, setIsLoaded] = useState(false)

  return (
    <div className="w-full h-full relative bg-gray-100 rounded-lg overflow-hidden">
      {!isLoaded && (
        <div className="absolute inset-0 bg-gray-100 flex items-center justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500" />
        </div>
      )}
      <iframe
        src={url}
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowFullScreen
        onLoad={() => setIsLoaded(true)}
        className="w-full h-full"
      />
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è PDF preview
function PDFPreview({ url, title }: { url: string; title: string }) {
  const [isLoaded, setIsLoaded] = useState(false)
  const [hasError, setHasError] = useState(false)

  return (
    <div className="w-full h-full relative bg-gray-100 rounded-lg overflow-hidden">
      {!isLoaded && !hasError && (
        <div className="absolute inset-0 bg-gray-100 flex items-center justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        </div>
      )}
      
      {hasError ? (
        <div className="w-full h-full flex items-center justify-center bg-gray-50">
          <div className="text-center p-6">
            <div className="text-4xl mb-2">üìÑ</div>
            <p className="text-sm text-gray-600 mb-2">PDF –¥–æ–∫—É–º–µ–Ω—Ç</p>
            <p className="text-xs text-gray-500">
              –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É &quot;–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª&quot; –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            </p>
          </div>
        </div>
      ) : (
        <iframe
          src={`${url}#toolbar=0&navpanes=0&scrollbar=0&view=FitH`}
          className="w-full h-full"
          title={`Preview: ${title}`}
          onLoad={() => setIsLoaded(true)}
          onError={() => {
            setIsLoaded(true)
            setHasError(true)
          }}
        />
      )}
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
function DocumentEmbed({ url, platform }: { url: string; platform?: string }) {
  const [isLoaded, setIsLoaded] = useState(false)
  const [hasError, setHasError] = useState(false)

  return (
    <div className="w-full h-full relative bg-gray-100 rounded-lg overflow-hidden">
      {!isLoaded && !hasError && (
        <div className="absolute inset-0 bg-gray-100 flex items-center justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500" />
        </div>
      )}
      
      {hasError ? (
        <div className="w-full h-full flex items-center justify-center bg-gray-50">
          <div className="text-center p-6">
            <div className="text-4xl mb-2">üìÑ</div>
            <p className="text-sm text-gray-600 mb-2">–î–æ–∫—É–º–µ–Ω—Ç</p>
            <p className="text-xs text-gray-500">
              –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É &quot;–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ&quot; –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            </p>
          </div>
        </div>
      ) : (
        <iframe
          src={url}
          className="w-full h-full"
          title={`Preview: ${platform || 'Document'}`}
          onLoad={() => setIsLoaded(true)}
          onError={() => {
            setIsLoaded(true)
            setHasError(true)
          }}
        />
      )}
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
function AudioEmbed({ url, platform }: { url: string; platform?: string }) {
  const [isLoaded, setIsLoaded] = useState(false)
  const [hasError, setHasError] = useState(false)

  return (
    <div className="w-full h-full relative bg-gray-100 rounded-lg overflow-hidden">
      {!isLoaded && !hasError && (
        <div className="absolute inset-0 bg-gray-100 flex items-center justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500" />
        </div>
      )}
      
      {hasError ? (
        <div className="w-full h-full flex items-center justify-center bg-gray-50">
          <div className="text-center p-6">
            <div className="text-4xl mb-2">üéµ</div>
            <p className="text-sm text-gray-600 mb-2">–ê—É–¥–∏–æ</p>
            <p className="text-xs text-gray-500">
              –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É &quot;–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ&quot; –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
            </p>
          </div>
        </div>
      ) : (
        <iframe
          src={url}
          className="w-full h-full"
          title={`Preview: ${platform || 'Audio'}`}
          onLoad={() => setIsLoaded(true)}
          onError={() => {
            setIsLoaded(true)
            setHasError(true)
          }}
        />
      )}
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
function SocialEmbed({ url, platform }: { url: string; platform?: string }) {
  const [isLoaded, setIsLoaded] = useState(false)
  const [hasError, setHasError] = useState(false)

  return (
    <div className="w-full h-full relative bg-gray-100 rounded-lg overflow-hidden">
      {!isLoaded && !hasError && (
        <div className="absolute inset-0 bg-gray-100 flex items-center justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-pink-500" />
        </div>
      )}
      
      {hasError ? (
        <div className="w-full h-full flex items-center justify-center bg-gray-50">
          <div className="text-center p-6">
            <div className="text-4xl mb-2">üì±</div>
            <p className="text-sm text-gray-600 mb-2">–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç</p>
            <p className="text-xs text-gray-500">
              –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É &quot;–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ&quot; –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            </p>
          </div>
        </div>
      ) : (
        <iframe
          src={url}
          className="w-full h-full"
          title={`Preview: ${platform || 'Social Post'}`}
          onLoad={() => setIsLoaded(true)}
          onError={() => {
            setIsLoaded(true)
            setHasError(true)
          }}
        />
      )}
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
function VideoFilePreview({ url, title }: { url: string; title: string }) {
  const [isLoaded, setIsLoaded] = useState(false)
  const [hasError, setHasError] = useState(false)

  return (
    <div className="w-full h-full relative bg-gray-100 rounded-lg overflow-hidden">
      {!isLoaded && !hasError && (
        <div className="absolute inset-0 bg-gray-100 flex items-center justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-red-500" />
        </div>
      )}
      
      {hasError ? (
        <div className="w-full h-full flex items-center justify-center bg-gray-50">
          <div className="text-center p-6">
            <div className="text-4xl mb-2">üé¨</div>
            <p className="text-sm text-gray-600 mb-2">–í–∏–¥–µ–æ —Ñ–∞–π–ª</p>
            <p className="text-xs text-gray-500">
              –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É &quot;–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª&quot; –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            </p>
          </div>
        </div>
      ) : (
        <video
          src={url}
          className="w-full h-full object-cover"
          controls={false}
          preload="metadata"
          onLoadedMetadata={() => setIsLoaded(true)}
          onError={() => {
            setIsLoaded(true)
            setHasError(true)
          }}
        />
      )}
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
function AudioFilePreview({ url, title }: { url: string; title: string }) {
  const [isLoaded, setIsLoaded] = useState(false)
  const [hasError, setHasError] = useState(false)

  return (
    <div className="w-full h-full relative bg-gradient-to-br from-purple-500 to-purple-600 rounded-lg overflow-hidden flex items-center justify-center">
      {!isLoaded && !hasError && (
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white" />
      )}
      
      {hasError ? (
        <div className="text-center text-white p-6">
          <div className="text-4xl mb-2">üéµ</div>
          <p className="text-sm mb-2">–ê—É–¥–∏–æ —Ñ–∞–π–ª</p>
          <p className="text-xs opacity-75">
            –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É &quot;–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª&quot; –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
          </p>
        </div>
      ) : (
        <div className="text-center text-white">
          <div className="text-5xl mb-3">üéµ</div>
          <p className="text-lg font-medium mb-2">–ê—É–¥–∏–æ</p>
          <audio
            src={url}
            controls
            className="w-full max-w-xs"
            onLoadedMetadata={() => setIsLoaded(true)}
            onError={() => {
              setIsLoaded(true)
              setHasError(true)
            }}
          />
        </div>
      )}
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
function DocumentPreview({ url, title, type }: { url: string; title: string; type: string }) {
  const [isLoaded, setIsLoaded] = useState(false)
  const [hasError, setHasError] = useState(false)

  return (
    <div className="w-full h-full relative bg-gray-100 rounded-lg overflow-hidden">
      {!isLoaded && !hasError && (
        <div className="absolute inset-0 bg-gray-100 flex items-center justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500" />
        </div>
      )}
      
      {hasError ? (
        <div className="w-full h-full flex items-center justify-center bg-gray-50">
          <div className="text-center p-6">
            <div className="text-4xl mb-2">üìÑ</div>
            <p className="text-sm text-gray-600 mb-2">{type === 'presentation' ? '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è' : type === 'spreadsheet' ? '–¢–∞–±–ª–∏—Ü–∞' : '–î–æ–∫—É–º–µ–Ω—Ç'}</p>
            <p className="text-xs text-gray-500">
              –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É &quot;–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª&quot; –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            </p>
          </div>
        </div>
      ) : (
        <iframe
          src={`${url}#toolbar=0&navpanes=0&scrollbar=0&view=FitH`}
          className="w-full h-full"
          title={`Preview: ${title}`}
          onLoad={() => setIsLoaded(true)}
          onError={() => {
            setIsLoaded(true)
            setHasError(true)
          }}
        />
      )}
    </div>
  )
}

export function SmartPreview({ leadMagnet, className }: SmartPreviewProps) {
  const previewData = getLeadMagnetPreviewData(leadMagnet)

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π aspect-ratio –¥–ª—è –ø—Ä–µ–≤—å—é
  const getPreviewAspectRatio = () => {
    // –î–ª—è —Å—Å—ã–ª–æ–∫
    if (leadMagnet.type === 'link' && leadMagnet.linkUrl) {
      const linkPreview = generateLinkPreview(leadMagnet.linkUrl, leadMagnet.ogImage || undefined)
      return getAspectRatio(linkPreview.type, linkPreview.platform)
    }

    // –î–ª—è —Ñ–∞–π–ª–æ–≤
    if (leadMagnet.type === 'file' && leadMagnet.fileUrl) {
      const filePreview = generateFilePreview(leadMagnet.fileUrl, leadMagnet.fileUrl.split('/').pop())
      return getAspectRatio(filePreview.type, filePreview.platform)
    }

    // –î–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    return 'aspect-[4/3]'
  }

  // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–µ–≤—å—é
  const getPreviewContent = () => {
    // –î–ª—è —Å—Å—ã–ª–æ–∫ - —É–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (leadMagnet.type === 'link' && leadMagnet.linkUrl) {
      const linkPreview = generateLinkPreview(leadMagnet.linkUrl, leadMagnet.ogImage || undefined)
      
      // –í–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç
      if (linkPreview.type === 'video' && linkPreview.embedUrl) {
        return <VideoEmbed url={linkPreview.embedUrl} platform={linkPreview.platform} />
      }
      
      // –î–æ–∫—É–º–µ–Ω—Ç—ã (Google Docs, Office, etc.)
      if (linkPreview.type === 'document' && linkPreview.embedUrl) {
        return <DocumentEmbed url={linkPreview.embedUrl} platform={linkPreview.platform} />
      }
      
      // –ê—É–¥–∏–æ –∫–æ–Ω—Ç–µ–Ω—Ç
      if (linkPreview.type === 'audio' && linkPreview.embedUrl) {
        return <AudioEmbed url={linkPreview.embedUrl} platform={linkPreview.platform} />
      }
      
      // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      if (linkPreview.type === 'social' && linkPreview.embedUrl) {
        return <SocialEmbed url={linkPreview.embedUrl} platform={linkPreview.platform} />
      }
      
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (linkPreview.type === 'image' && linkPreview.thumbnailUrl) {
        return (
          <div className="w-full h-full relative">
            <Image
              src={linkPreview.thumbnailUrl}
              alt={leadMagnet.title}
              fill
              className="object-cover rounded-lg"
            />
          </div>
        )
      }
      
      // –û–±—ã—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Å OG image
      if (linkPreview.thumbnailUrl) {
        return (
          <div className="w-full h-full relative">
            <Image
              src={linkPreview.thumbnailUrl}
              alt={leadMagnet.title}
              fill
              className="object-cover rounded-lg"
            />
          </div>
        )
      }
    }

    // –î–ª—è —Ñ–∞–π–ª–æ–≤ - —É–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
    if (leadMagnet.type === 'file' && leadMagnet.fileUrl) {
      const filePreview = generateFilePreview(leadMagnet.fileUrl, leadMagnet.fileUrl.split('/').pop())
      
      // PDF —Ñ–∞–π–ª—ã
      if (filePreview.type === 'document' && leadMagnet.fileUrl.toLowerCase().includes('.pdf')) {
        return <PDFPreview url={leadMagnet.fileUrl} title={leadMagnet.title} />
      }
      
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (filePreview.type === 'image') {
        return (
          <div className="w-full h-full relative">
            <Image
              src={leadMagnet.fileUrl}
              alt={leadMagnet.title}
              fill
              className="object-cover rounded-lg"
            />
          </div>
        )
      }
      
      // –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã
      if (filePreview.type === 'video') {
        return <VideoFilePreview url={leadMagnet.fileUrl} title={leadMagnet.title} />
      }
      
      // –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã
      if (filePreview.type === 'audio') {
        return <AudioFilePreview url={leadMagnet.fileUrl} title={leadMagnet.title} />
      }
      
      // –î—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
      if (filePreview.isEmbeddable) {
        return <DocumentPreview url={leadMagnet.fileUrl} title={leadMagnet.title} type={filePreview.type} />
      }
    }

    // –î–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é
    if (leadMagnet.type === 'service') {
      return <ServicePreview leadMagnet={leadMagnet} />
    }

    // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å –∏–∫–æ–Ω–∫–æ–π
    return (
      <div className="w-full h-full relative overflow-hidden rounded-lg">
        <div className={cn("absolute inset-0", previewData.gradient)} />
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="text-center text-white">
            <div className="text-6xl mb-4">{previewData.icon}</div>
            <div className="text-lg font-medium">{previewData.typeLabel}</div>
          </div>
        </div>
      </div>
    )
  }

  const aspectRatio = getPreviewAspectRatio()

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.5, delay: 0.1 }}
      className={cn(
        "w-full",
        aspectRatio,
        className
      )}
    >
      {getPreviewContent()}
    </motion.div>
  )
}
