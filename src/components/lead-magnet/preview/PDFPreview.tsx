/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è PDF preview —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π (—Å–µ—Ä–≤–µ—Ä–Ω–æ–µ)
 */

'use client'

import React, { useState } from 'react'
import Image from 'next/image'
import { cn } from '@/lib/utils'

interface PDFPreviewProps {
  url: string
  title: string
  previewImage?: string | null
  className?: string
}

export function PDFPreview({ url, title, previewImage, className }: PDFPreviewProps) {
  const [isLoaded, setIsLoaded] = useState(false)
  const [hasError, setHasError] = useState(false)

  // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (previewImage) {
    return (
      <div className={cn("w-full h-full relative bg-gray-100 rounded-lg overflow-hidden", className)}>
        <Image
          src={previewImage}
          alt={`Preview: ${title}`}
          fill
          className="object-contain"
          onLoad={() => setIsLoaded(true)}
          onError={() => {
            setHasError(true)
            setIsLoaded(true)
          }}
        />
      </div>
    )
  }

  // Fallback —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –∏ –∏–∫–æ–Ω–∫–æ–π
  return (
    <div className={cn("w-full h-full relative bg-gray-100 rounded-lg overflow-hidden", className)}>
      {!isLoaded && !hasError && (
        <div className="absolute inset-0 bg-gray-100 flex items-center justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        </div>
      )}
      
      {hasError ? (
        <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-red-600 to-orange-600">
          <div className="text-center text-white p-6">
            <div className="text-6xl mb-4">üìÑ</div>
            <div className="text-lg font-medium">PDF –¥–æ–∫—É–º–µ–Ω—Ç</div>
            <p className="text-sm opacity-90 mt-2">
              –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É &quot;–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª&quot; –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            </p>
          </div>
        </div>
      ) : (
        <iframe
          src={`${url}#page=1&toolbar=0&navpanes=0&scrollbar=0&view=FitH&zoom=FitH`}
          className="w-full h-full"
          title={`Preview: ${title}`}
          onLoad={() => setIsLoaded(true)}
          onError={() => {
            setIsLoaded(true)
            setHasError(true)
          }}
        />
      )}
    </div>
  )
}

