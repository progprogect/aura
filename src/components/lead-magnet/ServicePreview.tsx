'use client'

import { useState } from 'react'
import { motion } from 'framer-motion'
import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import { Loader2 } from 'lucide-react'
import type { LeadMagnet } from '@/types/lead-magnet'

interface ServicePreviewProps {
  leadMagnet: Pick<LeadMagnet, 'id' | 'title' | 'description' | 'emoji' | 'highlights'>
  specialistId?: string
  specialistName?: string
  className?: string
}

export function ServicePreview({ leadMagnet, specialistId, specialistName, className }: ServicePreviewProps) {
  const [name, setName] = useState('')
  const [contact, setContact] = useState('')
  const [message, setMessage] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isSuccess, setIsSuccess] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!name.trim() || !contact.trim()) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç')
      return
    }

    if (!specialistId) {
      alert('–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç')
      return
    }

    setIsSubmitting(true)

    try {
      const response = await fetch('/api/consultation-request', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          specialistId,
          leadMagnetId: leadMagnet.id,
          name: name.trim(),
          contact: contact.trim(),
          message: message.trim() || `–ó–∞—è–≤–∫–∞ –Ω–∞: ${leadMagnet.title}`,
        }),
      })

      if (response.ok) {
        setIsSuccess(true)
        setTimeout(() => {
          setIsSuccess(false)
          setName('')
          setContact('')
          setMessage('')
        }, 3000)
      } else {
        alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error)
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏')
    } finally {
      setIsSubmitting(false)
    }
  }

  if (isSuccess) {
    return (
      <div className={cn(
        "w-full bg-white rounded-lg border border-gray-200 p-6",
        className
      )}>
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          className="bg-green-100 border border-green-300 rounded-lg p-4 text-center"
        >
          <div className="text-3xl mb-2">‚úÖ</div>
          <p className="text-green-800 font-medium">–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</p>
          <p className="text-sm text-green-700 mt-1">
            {specialistName} —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
          </p>
        </motion.div>
      </div>
    )
  }

  return (
    <div className={cn(
      "w-full bg-white rounded-lg border border-gray-200 p-6",
      className
    )}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π */}
      <div className="text-center mb-6">
        <div className="w-16 h-16 bg-green-500 rounded-2xl flex items-center justify-center mx-auto mb-3">
          <span className="text-3xl text-white">{leadMagnet.emoji || 'üíº'}</span>
        </div>
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          {leadMagnet.title}
        </h3>
        {leadMagnet.description && (
          <p className="text-sm text-gray-600 leading-relaxed">
            {leadMagnet.description}
          </p>
        )}
      </div>

      {/* Highlights –µ—Å–ª–∏ –µ—Å—Ç—å */}
      {leadMagnet.highlights && leadMagnet.highlights.length > 0 && (
        <div className="mb-6">
          <h4 className="text-sm font-medium text-gray-900 mb-3">
            –ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç:
          </h4>
          <ul className="space-y-2">
            {leadMagnet.highlights.map((highlight, index) => (
              <motion.li
                key={index}
                initial={{ opacity: 0, x: -10 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.3, delay: index * 0.1 }}
                className="flex items-start space-x-2 text-sm text-gray-700"
              >
                <div className="flex-shrink-0 w-4 h-4 bg-green-500 rounded-full flex items-center justify-center mt-0.5">
                  <div className="w-1.5 h-1.5 bg-white rounded-full" />
                </div>
                <span>{highlight}</span>
              </motion.li>
            ))}
          </ul>
        </div>
      )}

      {/* –§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ */}
      <form onSubmit={handleSubmit} className="space-y-4">
        {/* –ò–º—è */}
        <div>
          <label
            htmlFor="service-name"
            className="mb-1.5 block text-sm font-medium text-gray-700"
          >
            –í–∞—à–µ –∏–º—è *
          </label>
          <input
            type="text"
            id="service-name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            className={cn(
              'w-full rounded-lg border border-gray-300 px-4 py-2.5',
              'text-gray-900 placeholder-gray-400',
              'transition-colors',
              'focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-500/20'
            )}
            placeholder="–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
          />
        </div>

        {/* –ö–æ–Ω—Ç–∞–∫—Ç */}
        <div>
          <label
            htmlFor="service-contact"
            className="mb-1.5 block text-sm font-medium text-gray-700"
          >
            –¢–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram *
          </label>
          <input
            type="text"
            id="service-contact"
            value={contact}
            onChange={(e) => setContact(e.target.value)}
            required
            className={cn(
              'w-full rounded-lg border border-gray-300 px-4 py-2.5',
              'text-gray-900 placeholder-gray-400',
              'transition-colors',
              'focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-500/20'
            )}
            placeholder="+7 (999) 123-45-67 –∏–ª–∏ @username"
          />
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ */}
        <div>
          <label
            htmlFor="service-message"
            className="mb-1.5 block text-sm font-medium text-gray-700"
          >
            –°–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
          </label>
          <textarea
            id="service-message"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            rows={3}
            className={cn(
              'w-full rounded-lg border border-gray-300 px-4 py-2.5',
              'text-gray-900 placeholder-gray-400',
              'transition-colors',
              'focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-500/20',
              'resize-none'
            )}
            placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ..."
          />
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
        <Button
          type="submit"
          size="lg"
          disabled={isSubmitting}
          className="w-full gap-2"
        >
          {isSubmitting ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin" />
              –û—Ç–ø—Ä–∞–≤–∫–∞...
            </>
          ) : (
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'
          )}
        </Button>
      </form>
    </div>
  )
}
