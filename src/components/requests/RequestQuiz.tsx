/**
 * Quiz-—Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ü–æ—à–∞–≥–æ–≤–∞—è —Ñ–æ—Ä–º–∞ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π SMS-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 */

'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { motion, AnimatePresence } from 'framer-motion'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { PhoneInput } from '@/components/auth/PhoneInput'
import { SMSCodeInput } from '@/components/auth/SMSCodeInput'
import { SMSCodeModal } from '@/components/auth/SMSCodeModal'
import { useAuth } from '@/hooks/useAuth'
import { ChevronLeft, ChevronRight, Loader2, AlertCircle } from 'lucide-react'

interface Category {
  key: string
  name: string
  emoji: string
  isActive: boolean
}

interface RequestQuizProps {
  defaultCategory?: string
  defaultTitle?: string
  onClose?: () => void
}

type QuizStep = 'title' | 'category' | 'description' | 'budget' | 'auth' | 'loading'

export function RequestQuiz({ defaultCategory, defaultTitle, onClose }: RequestQuizProps) {
  const router = useRouter()
  const { isAuthenticated, loading: authLoading } = useAuth()
  
  // –ï—Å–ª–∏ defaultTitle –∑–∞–¥–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å category (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º title)
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ auth
  const initialStep: QuizStep = defaultTitle ? 'category' : (defaultCategory ? 'category' : 'title')
  const [step, setStep] = useState<QuizStep>(initialStep)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  
  // –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    title: defaultTitle || '',
    category: defaultCategory || '',
    description: '',
    budget: null as number | null
  })

  // SMS-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  const [phone, setPhone] = useState('')
  const [smsCode, setSmsCode] = useState('')
  const [codeSent, setCodeSent] = useState(false)
  const [codeExpiry, setCodeExpiry] = useState<Date | null>(null)
  const [timeLeft, setTimeLeft] = useState(0)
  const [showCodeModal, setShowCodeModal] = useState(false)
  const [smsCodeToShow, setSmsCodeToShow] = useState('')

  const [categories, setCategories] = useState<Category[]>([])
  const [loadingCategories, setLoadingCategories] = useState(true)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  useEffect(() => {
    fetch('/api/categories')
      .then(res => res.json())
      .then(data => {
        if (data.categories) {
          setCategories(data.categories.filter((c: Category) => c.isActive))
          setLoadingCategories(false)
        }
      })
      .catch(() => setLoadingCategories(false))
  }, [])

  // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞ –¥–ª—è SMS
  useEffect(() => {
    if (!codeExpiry) return

    const timer = setInterval(() => {
      const now = new Date()
      const diff = codeExpiry.getTime() - now.getTime()
      
      if (diff <= 0) {
        setTimeLeft(0)
        clearInterval(timer)
      } else {
        setTimeLeft(Math.floor(diff / 1000))
      }
    }, 1000)

    return () => clearInterval(timer)
  }, [codeExpiry])

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  const handleNext = () => {
    setError('')
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    if (step === 'title' && formData.title.trim().length < 5) {
      setError('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤')
      return
    }

    if (step === 'category' && !formData.category) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
      return
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ auth
    if (step === 'budget' && isAuthenticated) {
      // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
      handleCreateRequest()
      return
    }

    if (step === 'description' && formData.description.trim().length < 50) {
      setError('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤')
      return
    }

    if (step === 'budget' && formData.budget !== null) {
      if (formData.budget < 50 || formData.budget > 2000) {
        setError('–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 2000 –±–∞–ª–ª–æ–≤')
        return
      }
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    const steps: QuizStep[] = ['title', 'category', 'description', 'budget', 'auth']
    const currentIndex = steps.indexOf(step)
    
    if (currentIndex < steps.length - 1) {
      const nextStep = steps[currentIndex + 1]
      // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ auth –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
      if (nextStep === 'auth' && isAuthenticated) {
        // –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É —Å—Ä–∞–∑—É
        handleCreateRequest()
        return
      }
      setStep(nextStep)
    }
  }

  // –ï—Å–ª–∏ defaultTitle –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  useEffect(() => {
    if (defaultTitle && !formData.title) {
      setFormData(prev => ({ ...prev, title: defaultTitle }))
      // –ï—Å–ª–∏ –º—ã –Ω–∞ —à–∞–≥–µ title –∏ defaultTitle –∑–∞–¥–∞–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ category
      if (step === 'title') {
        const timer = setTimeout(() => {
          setStep('category')
        }, 300)
        return () => clearTimeout(timer)
      }
    }
  }, [defaultTitle])

  const handleBack = () => {
    setError('')
    const steps: QuizStep[] = ['title', 'category', 'description', 'budget', 'auth']
    const currentIndex = steps.indexOf(step)
    if (currentIndex > 0) {
      setStep(steps[currentIndex - 1])
    }
  }

  const handleSendSMSCode = async () => {
    if (!phone.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
      return
    }

    setLoading(true)
    setError('')

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∏–º –∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const response = await fetch('/api/auth/send-sms', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone, purpose: 'login' }),
      })

      const data = await response.json()

      if (data.success) {
        setCodeSent(true)
        setCodeExpiry(new Date(Date.now() + 5 * 60 * 1000))
        setTimeLeft(300)
        
        if (data.code) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
          setSmsCodeToShow(data.code)
          setShowCodeModal(true)
          console.log(`üîê SMS –ö–û–î –¥–ª—è ${phone}: ${data.code}`)
        }
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞')
      }
    } catch (error) {
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    } finally {
      setLoading(false)
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
  const handleCreateRequest = async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!isAuthenticated) {
      setError('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏')
      setStep('auth')
      setLoading(false)
      return
    }

    setLoading(true)
    setError('')
    setStep('loading')

    try {
      const requestResponse = await fetch('/api/requests', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include', // –í–∞–∂–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º cookies —Å session_token
        body: JSON.stringify({
          title: formData.title,
          category: formData.category,
          description: formData.description,
          budget: formData.budget
        }),
      })

      const requestData = await requestResponse.json()

      if (requestResponse.status === 401) {
        // –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        setError('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.')
        setStep('auth')
        setLoading(false)
        return
      }

      if (requestData.success) {
        // –í—Å–µ–≥–¥–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
        router.push(`/requests/${requestData.request.id}`)
      } else {
        setError(requestData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏')
        setStep('budget')
        setLoading(false)
      }
    } catch (error) {
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
      setStep('budget')
      setLoading(false)
    }
  }

  const handleVerifyCodeAndSubmit = async () => {
    if (!smsCode || smsCode.length !== 4) {
      setError('–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥')
      return
    }

    setLoading(true)
    setError('')

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      let authData: any = null
      let sessionToken: string | null = null

      const loginResponse = await fetch('/api/auth/unified-login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone, code: smsCode }),
      })

      const loginData = await loginResponse.json()

      if (loginData.success) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
        authData = loginData
        sessionToken = loginData.sessionToken
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
        const authResponse = await fetch('/api/auth/user/register', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            phone,
            code: smsCode,
            firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
          }),
        })

        authData = await authResponse.json()

        if (!authData.success) {
          setError(authData.error || loginData.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
          setLoading(false)
          return
        }

        sessionToken = authData.sessionToken
      }

      if (!sessionToken) {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é')
        setLoading(false)
        return
      }

      // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
      setStep('loading')
      
      const requestResponse = await fetch('/api/requests', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include', // –í–∞–∂–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º cookies —Å session_token
        body: JSON.stringify({
          title: formData.title,
          category: formData.category,
          description: formData.description,
          budget: formData.budget
        }),
      })

      const requestData = await requestResponse.json()

      if (requestData.success) {
        // –í—Å–µ–≥–¥–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
        router.push(`/requests/${requestData.request.id}`)
      } else {
        setError(requestData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏')
        setStep('auth')
        setLoading(false)
      }
    } catch (error) {
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
      setStep('auth')
      setLoading(false)
    }
  }

  const currentStepIndex = ['title', 'category', 'description', 'budget', 'auth'].indexOf(step)
  const totalSteps = 5

  return (
    <>
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ SMS –∫–æ–¥–∞ */}
      <SMSCodeModal
        isOpen={showCodeModal}
        onClose={() => setShowCodeModal(false)}
        code={smsCodeToShow}
        phone={phone}
        purpose="registration"
      />

      <div className="w-full max-w-5xl lg:max-w-6xl xl:max-w-7xl mx-auto">
        <div className="bg-white rounded-xl shadow-lg p-4 sm:p-6 md:p-8 lg:p-10 xl:p-12 mx-0 sm:mx-auto">
        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
        {step !== 'loading' && (
          <div className="mb-6">
            <div className="flex items-center justify-between mb-2.5">
              <span className="text-sm font-medium text-foreground">
                –®–∞–≥ {currentStepIndex + 1} –∏–∑ {totalSteps}
              </span>
              <span className="text-xs text-muted-foreground">
                {Math.round(((currentStepIndex + 1) / totalSteps) * 100)}%
              </span>
            </div>
            <div className="w-full bg-muted rounded-full h-2.5 overflow-hidden">
              <motion.div
                className="bg-primary h-full rounded-full"
                initial={{ width: 0 }}
                animate={{ width: `${((currentStepIndex + 1) / totalSteps) * 100}%` }}
                transition={{ duration: 0.3, ease: 'easeOut' }}
              />
            </div>
          </div>
        )}

        {/* –û—à–∏–±–∫–∏ */}
        {error && (
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
        <AnimatePresence mode="wait">
          {step === 'title' && (
            <motion.div
              key="title"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              className="space-y-4"
            >
              <div>
                <Label htmlFor="title">–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞—è–≤–∫–∏</Label>
                <Input
                  id="title"
                  value={formData.title}
                  onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù—É–∂–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π"
                  maxLength={100}
                  className="mt-2 h-11 text-base touch-manipulation"
                  style={{ fontSize: '16px' }}
                  autoFocus
                />
                <p className="text-xs text-muted-foreground mt-1.5">
                  {formData.title.length}/100 —Å–∏–º–≤–æ–ª–æ–≤
                </p>
              </div>
            </motion.div>
          )}

          {step === 'category' && (
            <motion.div
              key="category"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              className="space-y-4"
            >
              <div>
                <Label>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</Label>
                {loadingCategories ? (
                  <div className="flex items-center justify-center py-8">
                    <Loader2 className="h-6 w-6 animate-spin text-muted-foreground" />
                  </div>
                ) : (
                  <div className="grid grid-cols-2 sm:grid-cols-3 gap-3 mt-2">
                    {categories.map((cat) => (
                      <button
                        key={cat.key}
                        type="button"
                        onClick={() => setFormData(prev => ({ ...prev, category: cat.key }))}
                        className={`p-4 rounded-lg border-2 transition-all text-left touch-manipulation min-h-[88px] active:scale-95 ${
                          formData.category === cat.key
                            ? 'border-primary bg-primary/5'
                            : 'border-muted hover:border-primary/50'
                        }`}
                      >
                        <div className="text-2xl mb-1.5">{cat.emoji}</div>
                        <div className="text-sm font-medium">{cat.name}</div>
                      </button>
                    ))}
                  </div>
                )}
              </div>
            </motion.div>
          )}

          {step === 'description' && (
            <motion.div
              key="description"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              className="space-y-4"
            >
              <div>
                <Label htmlFor="description">–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É</Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–º, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ..."
                  rows={6}
                  maxLength={2000}
                  className="mt-2 resize-none"
                  autoFocus
                />
                <p className="text-xs text-muted-foreground mt-1.5">
                  {formData.description.length}/2000 —Å–∏–º–≤–æ–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 50)
                </p>
              </div>
            </motion.div>
          )}

          {step === 'budget' && (
            <motion.div
              key="budget"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              className="space-y-4"
            >
              <div>
                <Label htmlFor="budget">–ë—é–¥–∂–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
                <Input
                  id="budget"
                  type="number"
                  value={formData.budget || ''}
                  onChange={(e) => {
                    const value = e.target.value
                    setFormData(prev => ({ 
                      ...prev, 
                      budget: value === '' ? null : parseInt(value) 
                    }))
                  }}
                  placeholder="–û—Ç 50 –¥–æ 2000 –±–∞–ª–ª–æ–≤"
                  min={50}
                  max={2000}
                  className="mt-2 h-11 text-base touch-manipulation"
                  style={{ fontSize: '16px' }}
                  autoFocus
                />
                <p className="text-xs text-muted-foreground mt-1.5">
                  –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø—Ä–µ–¥–ª–æ–∂–∞—Ç —Å–≤–æ—é —Ü–µ–Ω—É
                </p>
              </div>
            </motion.div>
          )}

          {step === 'auth' && (
            <motion.div
              key="auth"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              className="space-y-4"
            >
              {!codeSent ? (
                <div>
                  <Label htmlFor="phone">–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω</Label>
                  <div className="mt-2">
                    <PhoneInput
                      value={phone}
                      onChange={setPhone}
                      placeholder="+7 (999) 123-45-67"
                    />
                  </div>
                  <p className="text-xs text-muted-foreground mt-1">
                    –ù–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –ø—Ä–∏–¥—ë—Ç –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                  </p>
                </div>
              ) : (
                <div>
                  <Label htmlFor="smsCode">–ö–æ–¥ –∏–∑ SMS</Label>
                  <SMSCodeInput
                    value={smsCode}
                    onChange={setSmsCode}
                    onComplete={handleVerifyCodeAndSubmit}
                    className="mt-2"
                  />
                  {timeLeft > 0 && (
                    <p className="text-xs text-muted-foreground mt-2">
                      –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {formatTime(timeLeft)}
                    </p>
                  )}
                </div>
              )}
            </motion.div>
          )}

          {step === 'loading' && (
            <motion.div
              key="loading"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="flex flex-col items-center justify-center py-8 space-y-4"
            >
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <p className="text-muted-foreground">–°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É...</p>
            </motion.div>
          )}
        </AnimatePresence>

        {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
        {step !== 'loading' && (
          <div className="flex items-center justify-between mt-6 pt-6 border-t gap-4">
            <div className="flex-shrink-0">
              {currentStepIndex > 0 && (
                <Button
                  variant="outline"
                  onClick={handleBack}
                  disabled={loading}
                  size="lg"
                >
                  <ChevronLeft className="w-4 h-4 mr-1" />
                  –ù–∞–∑–∞–¥
                </Button>
              )}
            </div>

            <div className="flex-1 flex justify-end">
              {step === 'auth' && !codeSent ? (
                <Button
                  onClick={handleSendSMSCode}
                  disabled={loading || !phone.trim()}
                  size="lg"
                  className="w-full sm:w-auto"
                >
                  {loading ? (
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  ) : null}
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥
                </Button>
              ) : step === 'auth' && codeSent ? (
                <Button
                  onClick={handleVerifyCodeAndSubmit}
                  disabled={loading || smsCode.length !== 4}
                  size="lg"
                  className="w-full sm:w-auto"
                >
                  {loading ? (
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  ) : (
                    <ChevronRight className="w-4 h-4 mr-1" />
                  )}
                  –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É
                </Button>
              ) : (
                <Button
                  onClick={handleNext}
                  disabled={loading}
                  size="lg"
                  className="w-full sm:w-auto"
                >
                  –î–∞–ª–µ–µ
                  <ChevronRight className="w-4 h-4 ml-1" />
                </Button>
              )}
            </div>
          </div>
        )}
      </div>
      </div>
    </>
  )
}

