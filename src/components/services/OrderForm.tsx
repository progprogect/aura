/**
 * –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥–∏ –∫–ª–∏–µ–Ω—Ç–æ–º
 */

'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { useUser } from '@/hooks/useUser'

interface OrderFormProps {
  serviceId: string
  serviceName: string
  specialistName: string
  servicePrice: number
  serviceCurrency: string
}

export function OrderForm({ serviceId, serviceName, specialistName, servicePrice, serviceCurrency }: OrderFormProps) {
  const { user } = useUser()
  
  const [formData, setFormData] = useState({
    clientName: '',
    clientContact: '',
    clientMessage: '',
  })

  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState(false)
  const [userBalance, setUserBalance] = useState<{ total: number; balance: number; bonusBalance: number } | null>(null)
  const [orderMode, setOrderMode] = useState<'free' | 'paid'>('free')

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const fetchBalance = async () => {
      try {
        const response = await fetch('/api/user/balance')
        if (response.ok) {
          const data = await response.json()
          setUserBalance(data)
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error)
      }
    }

    if (user) {
      fetchBalance()
    }
  }, [user])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError('')

    if (!formData.clientName.trim()) {
      setError('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
      return
    }

    if (!formData.clientContact.trim()) {
      setError('–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏')
      return
    }

    setIsSubmitting(true)

    try {
      const endpoint = orderMode === 'paid' ? '/api/orders/create-with-points' : '/api/orders/create'
      const body = orderMode === 'paid' 
        ? {
            serviceId,
            clientName: formData.clientName,
            clientContact: formData.clientContact,
            clientMessage: formData.clientMessage || null,
            pointsUsed: servicePrice
          }
        : {
            serviceId,
            clientName: formData.clientName,
            clientContact: formData.clientContact,
            clientMessage: formData.clientMessage || null,
          }

      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body)
      })

      const data = await response.json()

      if (response.ok) {
        setSuccess(true)
        setFormData({
          clientName: '',
          clientContact: '',
          clientMessage: '',
        })
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ –∑–∞ –±–∞–ª–ª—ã
        if (orderMode === 'paid') {
          const fetchBalance = async () => {
            try {
              const balanceResponse = await fetch('/api/user/balance')
              if (balanceResponse.ok) {
                const balanceData = await balanceResponse.json()
                setUserBalance(balanceData)
              }
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error)
            }
          }
          fetchBalance()
        }
      } else {
        if (data.code === 'INSUFFICIENT_POINTS') {
          setError(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤. –ù—É–∂–Ω–æ: ${data.required}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${data.available}`)
        } else {
          setError(data.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞')
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error)
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
    } finally {
      setIsSubmitting(false)
    }
  }

  if (success) {
    return (
      <div className="bg-white rounded-lg shadow-sm p-6">
        <div className="text-center">
          <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span className="text-3xl">‚úÖ</span>
          </div>
          <h3 className="text-xl font-bold text-gray-900 mb-2">
            {orderMode === 'paid' ? '–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω!' : '–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'}
          </h3>
          <p className="text-gray-600 mb-6">
            {orderMode === 'paid' 
              ? `–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω –∑–∞ ${servicePrice} –±–∞–ª–ª–æ–≤! –ë–∞–ª–ª—ã –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –Ω–∞ 7 –¥–Ω–µ–π.`
              : `${specialistName} –ø–æ–ª—É—á–∏—Ç –≤–∞—à –∑–∞–∫–∞–∑ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.`
            }
          </p>
          <Button
            onClick={() => setSuccess(false)}
            variant="outline"
            className="w-full"
          >
            –û—Ñ–æ—Ä–º–∏—Ç—å –µ—â—ë –∑–∞–∫–∞–∑
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-white rounded-lg shadow-sm p-6">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">
        üìã –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
      </h3>

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ */}
      {user && userBalance && (
        <div className="mb-6">
          <div className="flex gap-2 mb-3">
            <button
              type="button"
              onClick={() => setOrderMode('free')}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                orderMode === 'free'
                  ? 'bg-blue-100 text-blue-700 border-2 border-blue-200'
                  : 'bg-gray-100 text-gray-600 border-2 border-gray-200'
              }`}
            >
              –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            </button>
            <button
              type="button"
              onClick={() => setOrderMode('paid')}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                orderMode === 'paid'
                  ? 'bg-green-100 text-green-700 border-2 border-green-200'
                  : 'bg-gray-100 text-gray-600 border-2 border-gray-200'
              }`}
            >
              –û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–ª–∞–º–∏
            </button>
          </div>

          {orderMode === 'paid' && (
            <div className="p-3 bg-green-50 rounded-lg">
              <div className="flex items-center justify-between text-sm">
                <span className="text-green-700">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                <span className="font-semibold text-green-800">{servicePrice} –±–∞–ª–ª–æ–≤</span>
              </div>
              <div className="flex items-center justify-between text-sm mt-1">
                <span className="text-green-700">–í–∞—à –±–∞–ª–∞–Ω—Å:</span>
                <span className="font-semibold text-green-800">{userBalance.total} –±–∞–ª–ª–æ–≤</span>
              </div>
              {userBalance.total < servicePrice && (
                <p className="text-xs text-red-600 mt-2">
                  ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤. <a href="/points" className="underline">–ö—É–ø–∏—Ç—å –±–∞–ª–ª—ã</a>
                </p>
              )}
            </div>
          )}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-4">
        {/* Error message */}
        {error && (
          <div className="p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm">
            {error}
          </div>
        )}

        {/* Name */}
        <div>
          <Label htmlFor="clientName">–í–∞—à–µ –∏–º—è *</Label>
          <Input
            id="clientName"
            value={formData.clientName}
            onChange={(e) => setFormData(prev => ({ ...prev, clientName: e.target.value }))}
            placeholder="–ò–≤–∞–Ω"
            required
            maxLength={100}
          />
        </div>

        {/* Contact */}
        <div>
          <Label htmlFor="clientContact">–¢–µ–ª–µ—Ñ–æ–Ω *</Label>
          <Input
            id="clientContact"
            value={formData.clientContact}
            onChange={(e) => setFormData(prev => ({ ...prev, clientContact: e.target.value }))}
            placeholder="+375 29 123 45 67"
            required
            maxLength={100}
          />
          <p className="text-xs text-gray-500 mt-1">
            –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É
          </p>
        </div>

        {/* Message */}
        <div>
          <Label htmlFor="clientMessage">–°–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
          <textarea
            id="clientMessage"
            value={formData.clientMessage}
            onChange={(e) => setFormData(prev => ({ ...prev, clientMessage: e.target.value }))}
            placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ, —É–¥–æ–±–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–≤—è–∑–∏..."
            className="w-full min-h-[100px] px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
            maxLength={500}
          />
          <p className="text-xs text-gray-500 mt-1">
            {formData.clientMessage.length}/500
          </p>
        </div>

        {/* Info */}
        <div className={`p-3 rounded-lg text-sm ${
          orderMode === 'paid' ? 'bg-green-50 text-green-800' : 'bg-blue-50 text-blue-800'
        }`}>
          <p className="font-medium mb-1">
            {orderMode === 'paid' ? 'üí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑' : '‚ÑπÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å'}
          </p>
          <p className="text-xs">
            {orderMode === 'paid' 
              ? '–ë–∞–ª–ª—ã –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –Ω–∞ 7 –¥–Ω–µ–π. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª—É–≥–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–ª—É—á–∏—Ç –æ–ø–ª–∞—Ç—É.'
              : '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
            }
          </p>
        </div>

        {/* Submit */}
        <Button
          type="submit"
          className={`w-full ${
            orderMode === 'paid' 
              ? 'bg-green-600 hover:bg-green-700' 
              : 'bg-blue-600 hover:bg-blue-700'
          }`}
          disabled={isSubmitting || (orderMode === 'paid' && userBalance && userBalance.total < servicePrice)}
        >
          {isSubmitting 
            ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' 
            : orderMode === 'paid' 
              ? `–û–ø–ª–∞—Ç–∏—Ç—å ${servicePrice} –±–∞–ª–ª–æ–≤`
              : '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑'
          }
        </Button>
      </form>
    </div>
  )
}

