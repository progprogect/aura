/**
 * –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Button } from '@/components/ui/button'
import { Label } from '@/components/ui/label'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { PhoneInput } from '@/components/auth/PhoneInput'
import { SMSCodeInput } from '@/components/auth/SMSCodeInput'
import { Clock, AlertCircle, CheckCircle2 } from 'lucide-react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'

type LoginStep = 'phone' | 'code' | 'success'

export function AuthUserLoginForm() {
  const [step, setStep] = useState<LoginStep>('phone')
  const [phone, setPhone] = useState('')
  const [code, setCode] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [codeExpiry, setCodeExpiry] = useState<Date | null>(null)
  const [timeLeft, setTimeLeft] = useState(0)
  const router = useRouter()

  // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞
  useState(() => {
    if (!codeExpiry) return

    const timer = setInterval(() => {
      const now = new Date()
      const diff = codeExpiry.getTime() - now.getTime()
      
      if (diff <= 0) {
        setTimeLeft(0)
        clearInterval(timer)
      } else {
        setTimeLeft(Math.floor(diff / 1000))
      }
    }, 1000)

    return () => clearInterval(timer)
  })

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  const handleSendSMS = async () => {
    if (!phone.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
      return
    }

    setLoading(true)
    setError('')

    try {
      const response = await fetch('/api/auth/send-sms', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone, purpose: 'login' }),
      })

      const data = await response.json()

      if (data.success) {
        setStep('code')
        setCodeExpiry(new Date(Date.now() + 5 * 60 * 1000)) // 5 –º–∏–Ω—É—Ç
        setTimeLeft(300)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ alert (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
        if (data.code) {
          alert(`üîê –í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: ${data.code}\n\n(–ö–æ–¥ —Ç–∞–∫–∂–µ –≤—ã–≤–µ–¥–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞)`)
          console.log(`üîê SMS –ö–û–î: ${data.code}`)
        }
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞')
      }
    } catch (error) {
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    } finally {
      setLoading(false)
    }
  }

  const handleLogin = async () => {
    if (!code || code.length !== 4) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ 4 —Ü–∏—Ñ—Ä')
      return
    }

    setLoading(true)
    setError('')

    try {
      const response = await fetch('/api/auth/user/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone, code }),
      })

      const data = await response.json()

      if (data.success) {
        setStep('success')
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º, —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ –∫–∞–±–∏–Ω–µ—Ç
        // –ò–Ω–∞—á–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        setTimeout(() => {
          if (data.user?.hasSpecialistProfile) {
            router.push('/specialist/dashboard')
          } else {
            router.push('/')
          }
          router.refresh()
        }, 1500)
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ')
        if (data.error?.includes('–∫–æ–¥')) {
          setCode('')
        }
      }
    } catch (error) {
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    } finally {
      setLoading(false)
    }
  }

  const handleResendCode = async () => {
    setCode('')
    await handleSendSMS()
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <h1 className="text-3xl font-bold text-foreground mb-2">
          –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!
        </h1>
        <p className="text-muted-foreground">
          –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç
        </p>
      </div>

      {/* –§–æ—Ä–º–∞ */}
      <div className="bg-card rounded-xl shadow-lg border p-6 space-y-6">
        <AnimatePresence mode="wait">
        {/* –®–∞–≥ 1: –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */}
        {step === 'phone' && (
          <motion.div
            key="phone"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            className="space-y-4"
          >
            <div className="space-y-2">
              <Label htmlFor="phone">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</Label>
              <PhoneInput
                value={phone}
                onChange={setPhone}
                onEnter={handleSendSMS}
                disabled={loading}
                placeholder="+7 (999) 123-45-67"
              />
            </div>

            {error && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <Button
              onClick={handleSendSMS}
              disabled={loading || !phone}
              className="w-full"
              size="lg"
            >
              {loading ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥'}
            </Button>

            <div className="text-center text-sm text-muted-foreground">
              –ï—â—ë –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
              <Link href="/auth/user/register" className="text-primary hover:underline font-medium">
                –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
              </Link>
            </div>
          </motion.div>
        )}

        {/* –®–∞–≥ 2: –í–≤–æ–¥ –∫–æ–¥–∞ */}
        {step === 'code' && (
          <motion.div
            key="code"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            className="space-y-6"
          >
            <div className="space-y-2 text-center">
              <h2 className="text-2xl font-bold">–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥</h2>
              <p className="text-muted-foreground">
                –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}
              </p>
            </div>

            {error && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <div className="space-y-4">
              <div className="space-y-2">
                <Label>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</Label>
                <SMSCodeInput
                  value={code}
                  onChange={setCode}
                  onComplete={handleLogin}
                  disabled={loading}
                />
              </div>

              {timeLeft > 0 && (
                <div className="flex items-center justify-center gap-2 text-sm text-muted-foreground">
                  <Clock className="h-4 w-4" />
                  <span>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {formatTime(timeLeft)}</span>
                </div>
              )}

              <div className="flex flex-col gap-3">
                <Button
                  onClick={handleLogin}
                  disabled={loading || code.length !== 4}
                  className="w-full"
                  size="lg"
                >
                  {loading ? '–í—Ö–æ–¥–∏–º...' : '–í–æ–π—Ç–∏'}
                </Button>

                <Button
                  onClick={handleResendCode}
                  disabled={loading || timeLeft > 240}
                  variant="outline"
                  className="w-full"
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
                </Button>

                <Button
                  onClick={() => {
                    setStep('phone')
                    setCode('')
                    setError('')
                  }}
                  variant="ghost"
                  className="w-full"
                >
                  –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä
                </Button>
              </div>
            </div>
          </motion.div>
        )}

        {/* –®–∞–≥ 3: –£—Å–ø–µ—Ö */}
        {step === 'success' && (
          <motion.div
            key="success"
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            className="space-y-6 text-center py-8"
          >
            <div className="flex justify-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center">
                <CheckCircle2 className="h-8 w-8 text-green-600" />
              </div>
            </div>

            <div className="space-y-2">
              <h2 className="text-2xl font-bold">–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!</h2>
              <p className="text-muted-foreground">
                –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º...
              </p>
            </div>
          </motion.div>
        )}
        </AnimatePresence>
      </div>
    </div>
  )
}

