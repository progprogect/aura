/**
 * –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
 */

'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { PhoneInput } from '@/components/auth/PhoneInput'
import { SMSCodeInput } from '@/components/auth/SMSCodeInput'
import { AuthProviderButtons } from '@/components/auth/AuthProviderButtons'
import { Clock, AlertCircle, CheckCircle2, ArrowRight, ArrowLeft } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/hooks/useAuth'

type RegisterStep = 'phone' | 'code' | 'profile' | 'success'

export function AuthRegisterForm() {
  const [step, setStep] = useState<RegisterStep>('phone')
  const [phone, setPhone] = useState('')
  const [code, setCode] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [codeExpiry, setCodeExpiry] = useState<Date | null>(null)
  const [timeLeft, setTimeLeft] = useState(0)
  const router = useRouter()
  const { login } = useAuth()

  // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞
  useState(() => {
    if (!codeExpiry) return

    const timer = setInterval(() => {
      const now = new Date()
      const diff = codeExpiry.getTime() - now.getTime()
      
      if (diff <= 0) {
        setTimeLeft(0)
        clearInterval(timer)
      } else {
        setTimeLeft(Math.floor(diff / 1000))
      }
    }, 1000)

    return () => clearInterval(timer)
  })

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  const handleSendCode = async () => {
    if (!phone.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
      return
    }

    setLoading(true)
    setError('')

    try {
      const response = await fetch('/api/auth/send-sms', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone, purpose: 'registration' }),
      })

      const data = await response.json()

      if (data.success) {
        setStep('code')
        setCodeExpiry(new Date(Date.now() + 5 * 60 * 1000)) // 5 –º–∏–Ω—É—Ç
        setTimeLeft(300)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ alert (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞)
        if (data.code) {
          alert(`üîê –í–∞—à –∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${data.code}\n\n(–ö–æ–¥ —Ç–∞–∫–∂–µ –≤—ã–≤–µ–¥–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞)`)
          console.log(`üîê SMS –ö–û–î: ${data.code}`)
        }
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞')
      }
    } catch (error) {
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    } finally {
      setLoading(false)
    }
  }

  const handleVerifyCode = async () => {
    if (!code.trim() || code.length !== 4) {
      setError('–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥')
      return
    }

    setLoading(true)
    setError('')

    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ provider: 'phone', phone, code }),
      })

      const data = await response.json()

      if (data.success) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        login(data.sessionToken, data.specialist)
        setStep('success')
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          router.push('/specialist/profile/edit')
        }, 2000)
      } else {
        setError(data.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥')
      }
    } catch (error) {
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    } finally {
      setLoading(false)
    }
  }

  const handleResendCode = async () => {
    await handleSendCode()
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <h1 className="text-3xl font-bold text-foreground mb-2">
          –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ê—É—Ä–µ
        </h1>
        <p className="text-muted-foreground">
          –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º
        </p>
      </div>

      {/* –§–æ—Ä–º–∞ */}
      <div className="bg-card rounded-xl shadow-lg border p-6 space-y-6">
        <AnimatePresence mode="wait">
        {step === 'phone' && (
          <motion.div
            key="phone"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 20 }}
            className="space-y-6"
          >
            <div className="space-y-2 text-center">
              <h2 className="text-2xl font-bold">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
              <p className="text-muted-foreground">
                –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
              </p>
            </div>

            {error && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="phone">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</Label>
                <PhoneInput
                  id="phone"
                  value={phone}
                  onChange={setPhone}
                  placeholder="+7 (999) 999-99-99"
                  disabled={loading}
                />
              </div>

              <Button 
                className="w-full" 
                onClick={handleSendCode}
                disabled={loading}
              >
                {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥'}
                <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </div>

            <AuthProviderButtons />
          </motion.div>
        )}

        {step === 'code' && (
          <motion.div
            key="code"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 20 }}
            className="space-y-6"
          >
            <div className="space-y-2 text-center">
              <h2 className="text-2xl font-bold">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</h2>
              <p className="text-muted-foreground">
                –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –Ω–æ–º–µ—Ä
              </p>
              <p className="text-sm font-medium">{phone}</p>
            </div>

            {error && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="code">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</Label>
                <SMSCodeInput
                  id="code"
                  value={code}
                  onChange={setCode}
                  disabled={loading}
                />
                {timeLeft > 0 && (
                  <div className="flex items-center justify-center text-sm text-muted-foreground">
                    <Clock className="mr-1 h-3 w-3" />
                    –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {formatTime(timeLeft)}
                  </div>
                )}
              </div>

              <Button 
                className="w-full" 
                onClick={handleVerifyCode}
                disabled={loading || code.length !== 4}
              >
                {loading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
                <ArrowRight className="ml-2 h-4 w-4" />
              </Button>

              <Button 
                variant="ghost" 
                className="w-full"
                onClick={handleResendCode}
                disabled={loading || timeLeft > 240}
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
              </Button>

              <Button 
                variant="ghost" 
                className="w-full"
                onClick={() => setStep('phone')}
                disabled={loading}
              >
                <ArrowLeft className="mr-2 h-4 w-4" />
                –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä
              </Button>
            </div>
          </motion.div>
        )}

        {step === 'success' && (
          <motion.div
            key="success"
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            className="space-y-6 text-center"
          >
            <div className="flex justify-center">
              <div className="rounded-full bg-green-100 p-3">
                <CheckCircle2 className="h-12 w-12 text-green-600" />
              </div>
            </div>

            <div className="space-y-2">
              <h2 className="text-2xl font-bold">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h2>
              <p className="text-muted-foreground">
                –°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
              </p>
            </div>

            <div className="flex items-center justify-center space-x-2">
              <div className="h-2 w-2 animate-bounce rounded-full bg-primary" />
              <div className="h-2 w-2 animate-bounce rounded-full bg-primary delay-100" />
              <div className="h-2 w-2 animate-bounce rounded-full bg-primary delay-200" />
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>

    {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Ö–æ–¥ */}
    <div className="text-center">
      <p className="text-sm text-muted-foreground">
        –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
        <a 
          href="/auth/login" 
          className="text-primary hover:text-primary/80 font-medium transition-colors"
        >
          –í–æ–π—Ç–∏
        </a>
      </p>
    </div>
  </div>
  )
}
