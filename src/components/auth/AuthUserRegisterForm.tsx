/**
 * –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç–æ–ª—å–∫–æ –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, —Ç–µ–ª–µ—Ñ–æ–Ω
 */

'use client'

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { PhoneInput } from '@/components/auth/PhoneInput'
import { SMSCodeInput } from '@/components/auth/SMSCodeInput'
import { Clock, AlertCircle, CheckCircle2, ArrowRight } from 'lucide-react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'

type RegisterStep = 'phone' | 'code' | 'profile' | 'success'

export function AuthUserRegisterForm() {
  const [step, setStep] = useState<RegisterStep>('phone')
  const [phone, setPhone] = useState('')
  const [code, setCode] = useState('')
  const [firstName, setFirstName] = useState('')
  const [lastName, setLastName] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [codeExpiry, setCodeExpiry] = useState<Date | null>(null)
  const [timeLeft, setTimeLeft] = useState(0)
  const router = useRouter()

  // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞
  useEffect(() => {
    if (!codeExpiry) return

    const timer = setInterval(() => {
      const now = new Date()
      const diff = codeExpiry.getTime() - now.getTime()
      
      if (diff <= 0) {
        setTimeLeft(0)
        clearInterval(timer)
      } else {
        setTimeLeft(Math.floor(diff / 1000))
      }
    }, 1000)

    return () => clearInterval(timer)
  }, [codeExpiry])

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  const handleSendCode = async () => {
    if (!phone.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
      return
    }

    setLoading(true)
    setError('')

    try {
      const response = await fetch('/api/auth/send-sms', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone, purpose: 'registration' }),
      })

      const data = await response.json()

      if (data.success) {
        setStep('code')
        setCodeExpiry(new Date(Date.now() + 5 * 60 * 1000)) // 5 –º–∏–Ω—É—Ç
        setTimeLeft(300)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ alert (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
        if (data.code) {
          alert(`üîê –í–∞—à –∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${data.code}\n\n(–ö–æ–¥ —Ç–∞–∫–∂–µ –≤—ã–≤–µ–¥–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞)`)
          console.log(`üîê SMS –ö–û–î: ${data.code}`)
        }
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞')
      }
    } catch (error) {
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    } finally {
      setLoading(false)
    }
  }

  const handleVerifyCode = async () => {
    if (!code || code.length !== 4) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ 4 —Ü–∏—Ñ—Ä')
      return
    }

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
    setStep('profile')
    setError('')
  }

  const handleRegister = async () => {
    if (!firstName.trim() || !lastName.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é')
      return
    }

    setLoading(true)
    setError('')

    try {
      const response = await fetch('/api/auth/user/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          phone, 
          code,
          firstName: firstName.trim(),
          lastName: lastName.trim()
        }),
      })

      const data = await response.json()

      if (data.success) {
        setStep('success')
        
        // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          router.push('/')
          router.refresh()
        }, 2000)
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –∫–æ–¥–∞
        if (data.error?.includes('–∫–æ–¥')) {
          setStep('code')
          setCode('')
        }
      }
    } catch (error) {
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    } finally {
      setLoading(false)
    }
  }

  const handleResendCode = async () => {
    setCode('')
    await handleSendCode()
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <h1 className="text-3xl font-bold text-foreground mb-2">
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Aura
        </h1>
        <p className="text-muted-foreground">
          –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        </p>
      </div>

      {/* –§–æ—Ä–º–∞ */}
      <div className="bg-card rounded-xl shadow-lg border p-6 space-y-6">
        <AnimatePresence mode="wait">
        {/* –®–∞–≥ 1: –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */}
        {step === 'phone' && (
          <motion.div
            key="phone"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 20 }}
            className="space-y-6"
          >
            <div className="space-y-2 text-center">
              <h2 className="text-2xl font-bold">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
              <p className="text-muted-foreground">
                –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
              </p>
            </div>

            {error && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="phone">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</Label>
                <PhoneInput
                  value={phone}
                  onChange={setPhone}
                  onEnter={handleSendCode}
                  disabled={loading}
                  placeholder="+7 (999) 123-45-67"
                />
              </div>

              <Button
                onClick={handleSendCode}
                disabled={loading || !phone}
                className="w-full"
                size="lg"
              >
                {loading ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥'}
              </Button>
            </div>
          </motion.div>
        )}

        {/* –®–∞–≥ 2: –í–≤–æ–¥ –∫–æ–¥–∞ */}
        {step === 'code' && (
          <motion.div
            key="code"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 20 }}
            className="space-y-6"
          >
            <div className="space-y-2 text-center">
              <h2 className="text-2xl font-bold">–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥</h2>
              <p className="text-muted-foreground">
                –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}
              </p>
            </div>

            {error && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <div className="space-y-4">
              <div className="space-y-2">
                <Label>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</Label>
                <SMSCodeInput
                  value={code}
                  onChange={setCode}
                  onComplete={handleVerifyCode}
                  disabled={loading}
                />
              </div>

              {timeLeft > 0 && (
                <div className="flex items-center justify-center gap-2 text-sm text-muted-foreground">
                  <Clock className="h-4 w-4" />
                  <span>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {formatTime(timeLeft)}</span>
                </div>
              )}

              <div className="flex flex-col gap-3">
                <Button
                  onClick={handleVerifyCode}
                  disabled={loading || code.length !== 4}
                  className="w-full"
                  size="lg"
                >
                  {loading ? '–ü—Ä–æ–≤–µ—Ä—è–µ–º...' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'}
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>

                <Button
                  onClick={handleResendCode}
                  disabled={loading || timeLeft > 240}
                  variant="outline"
                  className="w-full"
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
                </Button>

                <Button
                  onClick={() => {
                    setStep('phone')
                    setCode('')
                    setError('')
                  }}
                  variant="ghost"
                  className="w-full"
                >
                  –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä
                </Button>
              </div>
            </div>
          </motion.div>
        )}

        {/* –®–∞–≥ 3: –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ */}
        {step === 'profile' && (
          <motion.div
            key="profile"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 20 }}
            className="space-y-6"
          >
            <div className="space-y-2 text-center">
              <h2 className="text-2xl font-bold">–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è</h2>
              <p className="text-muted-foreground">
                –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?
              </p>
            </div>

            {error && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="firstName">–ò–º—è</Label>
                <Input
                  id="firstName"
                  value={firstName}
                  onChange={(e) => setFirstName(e.target.value)}
                  placeholder="–ò–≤–∞–Ω"
                  disabled={loading}
                  autoFocus
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="lastName">–§–∞–º–∏–ª–∏—è</Label>
                <Input
                  id="lastName"
                  value={lastName}
                  onChange={(e) => setLastName(e.target.value)}
                  placeholder="–ü–µ—Ç—Ä–æ–≤"
                  disabled={loading}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' && firstName && lastName) {
                      handleRegister()
                    }
                  }}
                />
              </div>

              <Button
                onClick={handleRegister}
                disabled={loading || !firstName || !lastName}
                className="w-full"
                size="lg"
              >
                {loading ? '–°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å...' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'}
                <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </div>
          </motion.div>
        )}

        {/* –®–∞–≥ 4: –£—Å–ø–µ—Ö */}
        {step === 'success' && (
          <motion.div
            key="success"
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            className="space-y-6 text-center py-8"
          >
            <div className="flex justify-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center">
                <CheckCircle2 className="h-8 w-8 text-green-600" />
              </div>
            </div>

            <div className="space-y-2">
              <h2 className="text-2xl font-bold">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2>
              <p className="text-muted-foreground">
                –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
              </p>
            </div>

            <div className="text-sm text-muted-foreground">
              –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...
            </div>
          </motion.div>
        )}
        </AnimatePresence>
      </div>

      {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Ö–æ–¥ */}
      <div className="text-center">
        <p className="text-sm text-muted-foreground">
          –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
          <Link 
            href="/auth/login" 
            className="text-primary hover:text-primary/80 font-medium transition-colors"
          >
            –í–æ–π—Ç–∏
          </Link>
        </p>
      </div>
    </div>
  )
}

