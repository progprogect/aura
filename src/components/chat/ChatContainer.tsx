/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–∞
 */

'use client'

import { useRef, useEffect } from 'react'
import { useChat } from '@/hooks/useChat'
import { ChatMessage } from './ChatMessage'
import { ChatInput } from './ChatInput'
import { ChatHistory } from './ChatHistory'
import { Button } from '@/components/ui/button'
import Link from 'next/link'
import { ArrowLeft, RotateCcw, Sparkles, Undo2 } from 'lucide-react'
import { motion, AnimatePresence } from 'framer-motion'

export function ChatContainer() {
  const { messages, sendMessage, isLoading, reset, undoLastMessage, loadSession, sessionId } = useChat()
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const containerRef = useRef<HTMLDivElement>(null)

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages, isLoading])

  return (
    <div className="flex flex-col h-screen max-w-4xl mx-auto bg-background">
      {/* Header - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π */}
      <div className="flex-shrink-0 bg-background border-b px-4 py-3 flex items-center justify-between">
        <div className="flex items-center gap-3">
          <Button variant="ghost" size="sm" asChild>
            <Link href="/" className="flex items-center">
              <ArrowLeft className="w-4 h-4" />
              <span className="ml-2 md:hidden">–ù–∞–∑–∞–¥</span>
            </Link>
          </Button>
          <div className="border-l border-border pl-3">
            <h1 className="font-semibold text-base md:text-lg flex items-center gap-2">
              <Sparkles className="w-5 h-5 text-primary" />
              AI-–ü–æ–º–æ—â–Ω–∏–∫
            </h1>
            <p className="text-xs md:text-sm text-muted-foreground">
              –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            </p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <ChatHistory 
            currentSessionId={sessionId} 
            onLoadSession={loadSession}
          />
          {messages.length > 0 && (
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                if (confirm('–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫? –¢–µ–∫—É—â–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞.')) {
                  reset()
                }
              }}
            >
              <RotateCcw className="w-4 h-4 mr-2" />
              <span className="hidden md:inline">–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</span>
            </Button>
          )}
        </div>
      </div>

      {/* Messages - —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å */}
      <div
        ref={containerRef}
        className="flex-1 overflow-y-auto px-4 py-6 space-y-4 min-h-0"
      >
        {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π */}
        {messages.length === 0 && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center py-12 space-y-6"
          >
            <div className="w-20 h-20 bg-primary/10 rounded-full flex items-center justify-center mx-auto">
              <Sparkles className="w-10 h-10 text-primary" />
            </div>
            <div>
              <h2 className="text-xl md:text-2xl font-semibold mb-2">
                –ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ –ê—É—Ä—ã üëã
              </h2>
              <p className="text-muted-foreground mb-4">
                –ü–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
              </p>
            </div>
            <div className="max-w-md mx-auto space-y-2">
              <p className="text-sm text-muted-foreground mb-3">
                –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
              </p>
              <div className="grid gap-2">
                {[
                  '–•–æ—á—É –Ω–∞–π—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π',
                  '–ù—É–∂–µ–Ω —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è',
                  '–ò—â—É –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã',
                  '–ü–æ–º–æ–≥–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–∞—Å—Å–∞–∂–∏—Å—Ç–∞ –≤ –ú–æ—Å–∫–≤–µ',
                ].map((example, index) => (
                  <button
                    key={index}
                    onClick={() => sendMessage(example)}
                    className="text-sm text-left px-4 py-2 rounded-lg border border-border hover:border-primary hover:bg-primary/5 transition-colors"
                  >
                    {example}
                  </button>
                ))}
              </div>
            </div>
          </motion.div>
        )}

        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        <AnimatePresence>
          {messages.map((message) => (
            <ChatMessage
              key={message.id}
              message={message}
              onQuickReply={sendMessage}
            />
          ))}
        </AnimatePresence>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ */}
        {isLoading && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="flex justify-start"
          >
            <div className="bg-muted rounded-2xl px-4 py-3">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-muted-foreground/60 rounded-full animate-bounce" />
                <div
                  className="w-2 h-2 bg-muted-foreground/60 rounded-full animate-bounce"
                  style={{ animationDelay: '0.1s' }}
                />
                <div
                  className="w-2 h-2 bg-muted-foreground/60 rounded-full animate-bounce"
                  style={{ animationDelay: '0.2s' }}
                />
              </div>
            </div>
          </motion.div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Input - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π */}
      <div className="flex-shrink-0 bg-background border-t px-4 py-4">
        {/* –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ */}
        {messages.length >= 2 && !isLoading && (
          <div className="mb-3">
            <Button
              variant="ghost"
              size="sm"
              onClick={undoLastMessage}
              className="gap-2 text-muted-foreground hover:text-foreground"
            >
              <Undo2 className="w-4 h-4" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
            </Button>
          </div>
        )}
        
        <ChatInput
          onSend={sendMessage}
          disabled={isLoading}
          placeholder={
            messages.length === 0
              ? '–ù–∞–ø–∏—à–∏—Ç–µ, —Å —á–µ–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å...'
              : '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...'
          }
        />
        <p className="text-xs text-muted-foreground text-center mt-2">
          AI –º–æ–∂–µ—Ç –æ—à–∏–±–∞—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        </p>
      </div>
    </div>
  )
}

