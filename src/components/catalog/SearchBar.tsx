/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
 * –í–µ—Ä—Å–∏—è 3.0 - Airbnb style:
 * - –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ Enter –∏–ª–∏ –∫–Ω–æ–ø–∫–µ
 * - –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞
 * - –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ (–ª—É–ø–∞)
 * - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ X
 */

'use client'

import { useState, useEffect } from 'react'
import { Icon } from '@/components/ui/icons/Icon'
import { Search, X } from '@/components/ui/icons/catalog-icons'

interface SearchBarProps {
  value: string
  onChange: (value: string) => void
}

export function SearchBar({ value, onChange }: SearchBarProps) {
  const [isFocused, setIsFocused] = useState(false)
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ (–Ω–µ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω–æ–µ)
  const [localValue, setLocalValue] = useState(value)

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º value (–∫–æ–≥–¥–∞ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è)
  useEffect(() => {
    setLocalValue(value)
  }, [value])

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫
  const handleSearch = () => {
    if (localValue.trim() !== value) {
      onChange(localValue.trim())
    }
  }

  // Enter –¥–ª—è –ø–æ–∏—Å–∫–∞
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault()
      handleSearch()
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫
  const handleClear = () => {
    setLocalValue('')
    onChange('')
  }

  return (
    <div className="relative mb-6">
      <div className="relative">
        {/* –ò–∫–æ–Ω–∫–∞ –ø–æ–∏—Å–∫–∞ - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è! */}
        <button
          onClick={handleSearch}
          type="button"
          className="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-400 hover:text-gray-600 transition-colors z-10"
          aria-label="–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫"
        >
          <Icon
            icon={Search}
            size={20}
            aria-hidden
          />
        </button>

        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
        <input
          type="text"
          id="specialist-search"
          placeholder="–ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤..."
          value={localValue}
          onChange={(e) => setLocalValue(e.target.value)}
          onKeyDown={handleKeyDown}
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          className={`
            w-full pl-10 pr-10 py-3 
            border rounded-xl text-gray-900 placeholder-gray-500
            focus:outline-none focus-visible:ring-2 focus-visible:ring-gray-900 focus-visible:ring-offset-2
            transition-all duration-200 ease-out
            ${isFocused ? 'shadow-md border-gray-400' : 'shadow-sm border-gray-300'}
          `}
          aria-label="–ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—é"
          aria-describedby="search-hint"
        />

        {/* –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ */}
        {localValue && (
          <button
            onClick={handleClear}
            type="button"
            className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 transition-colors z-10"
            aria-label="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
          >
            <Icon
              icon={X}
              size={20}
              aria-hidden
            />
          </button>
        )}
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      <div
        id="search-hint"
        className="mt-2 text-xs text-gray-500"
        role="status"
        aria-live="polite"
      >
        {localValue && localValue !== value ? (
          <span>–ù–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ üîç –¥–ª—è –ø–æ–∏—Å–∫–∞</span>
        ) : value ? (
          <span>–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—é</span>
        ) : (
          <span>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ Enter</span>
        )}
      </div>
    </div>
  )
}
