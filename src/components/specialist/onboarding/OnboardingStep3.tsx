/**
 * –®–∞–≥ 3 –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ª–æ–∫–∞—Ü–∏—è
 */

'use client'

import { motion } from 'framer-motion'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { PhoneInput } from '@/components/auth/PhoneInput'

interface OnboardingStep3Props {
  data: {
    phone: string
    email: string
    city: string
    country: string
    workFormats: string[]
  }
  onChange: (field: string, value: string | string[]) => void
  errors?: Record<string, string>
}

const WORK_FORMATS = [
  { id: 'online', name: '–û–Ω–ª–∞–π–Ω', emoji: 'üíª', description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–∏–¥–µ–æ—Å–≤—è–∑—å' },
  { id: 'offline', name: '–û—Ñ–ª–∞–π–Ω', emoji: 'üè¢', description: '–õ–∏—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ –æ—Ñ–∏—Å–µ' },
  { id: 'hybrid', name: '–ì–∏–±—Ä–∏–¥', emoji: 'üîÑ', description: '–û–Ω–ª–∞–π–Ω –∏ –æ—Ñ–ª–∞–π–Ω' },
]

export function OnboardingStep3({ data, onChange, errors }: OnboardingStep3Props) {
  const toggleWorkFormat = (formatId: string) => {
    const currentFormats = data.workFormats
    if (currentFormats.includes(formatId)) {
      // –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç (–Ω–æ –º–∏–Ω–∏–º—É–º 1 –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è)
      if (currentFormats.length > 1) {
        onChange('workFormats', currentFormats.filter(f => f !== formatId))
      }
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
      onChange('workFormats', [...currentFormats, formatId])
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
      exit={{ opacity: 0, x: -20 }}
      transition={{ duration: 0.3 }}
      className="space-y-6"
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center mb-8">
        <h2 className="text-2xl md:text-3xl font-bold text-gray-900 mb-2">
          –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã
        </h2>
        <p className="text-sm md:text-base text-gray-600">
          –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –≥–¥–µ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
        </p>
      </div>

      {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
      <div className="space-y-2">
        <Label htmlFor="phone">
          –¢–µ–ª–µ—Ñ–æ–Ω <span className="text-red-500">*</span>
        </Label>
        <PhoneInput
          id="phone"
          value={data.phone}
          onChange={(value) => onChange('phone', value)}
          disabled
          className="h-12 text-base bg-gray-50"
        />
        <p className="text-xs text-gray-500">
          ‚úì –ù–æ–º–µ—Ä —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        </p>
      </div>

      {/* Email */}
      <div className="space-y-2">
        <Label htmlFor="email">
          Email 
          <span className="text-gray-500 text-xs ml-2">(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</span>
        </Label>
        <Input
          id="email"
          type="email"
          placeholder="example@email.com"
          value={data.email}
          onChange={(e) => onChange('email', e.target.value)}
          className={`h-12 text-base ${errors?.email ? 'border-red-500' : ''}`}
        />
        {errors?.email && (
          <p className="text-sm text-red-500">{errors.email}</p>
        )}
        <p className="text-xs text-gray-500">
          –î–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        </p>
      </div>

      {/* –ì–æ—Ä–æ–¥ */}
      <div className="space-y-2">
        <Label htmlFor="city">
          –ì–æ—Ä–æ–¥
          <span className="text-gray-500 text-xs ml-2">(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</span>
        </Label>
        <Input
          id="city"
          type="text"
          placeholder="–ú–æ—Å–∫–≤–∞"
          value={data.city}
          onChange={(e) => onChange('city', e.target.value)}
          className="h-12 text-base"
        />
        <p className="text-xs text-gray-500">
          –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –µ—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –æ—Ñ–ª–∞–π–Ω
        </p>
      </div>

      {/* –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã */}
      <div className="space-y-3">
        <Label>
          –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã <span className="text-red-500">*</span>
        </Label>
        
        {/* –î–µ—Å–∫—Ç–æ–ø: Grid */}
        <div className="hidden md:grid md:grid-cols-3 gap-3">
          {WORK_FORMATS.map((format) => {
            const isSelected = data.workFormats.includes(format.id)
            
            return (
              <div
                key={format.id}
                onClick={() => toggleWorkFormat(format.id)}
                className={`
                  cursor-pointer rounded-lg border-2 p-4 text-center
                  transition-all duration-200 hover:shadow-md
                  ${isSelected 
                    ? 'border-blue-600 bg-blue-50' 
                    : 'border-gray-200 hover:border-gray-400'
                  }
                `}
              >
                <div className="text-3xl mb-2">{format.emoji}</div>
                <div className="font-medium text-sm text-gray-900 mb-1">
                  {format.name}
                </div>
                <div className="text-xs text-gray-500">
                  {format.description}
                </div>
                {isSelected && (
                  <div className="mt-2 text-blue-600 text-sm font-medium">‚úì –í—ã–±—Ä–∞–Ω–æ</div>
                )}
              </div>
            )
          })}
        </div>

        {/* –ú–æ–±–∏–ª—å–Ω—ã–π: –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ */}
        <div className="md:hidden space-y-2">
          {WORK_FORMATS.map((format) => {
            const isSelected = data.workFormats.includes(format.id)
            
            return (
              <div
                key={format.id}
                onClick={() => toggleWorkFormat(format.id)}
                className={`
                  cursor-pointer rounded-lg border-2 p-4 flex items-center gap-4
                  transition-all duration-200 active:bg-gray-50
                  ${isSelected 
                    ? 'border-blue-600 bg-blue-50' 
                    : 'border-gray-200'
                  }
                `}
              >
                <div className="text-3xl">{format.emoji}</div>
                <div className="flex-1">
                  <div className="font-medium text-sm text-gray-900">
                    {format.name}
                  </div>
                  <div className="text-xs text-gray-500">
                    {format.description}
                  </div>
                </div>
                {isSelected && (
                  <div className="text-blue-600 text-lg">‚úì</div>
                )}
              </div>
            )
          })}
        </div>

        <p className="text-xs text-gray-500">
          –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã
        </p>
      </div>
    </motion.div>
  )
}

