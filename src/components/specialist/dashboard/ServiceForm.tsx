/**
 * –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
 */

'use client'

import { useState } from 'react'
import { ArrowLeft, Plus, X } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { formatServicePrice } from '@/lib/services/utils'
import type { Service } from '@/types/service'

interface ServiceFormProps {
  service?: Service | null
  onClose: () => void
  onSuccess: () => void
}

export function ServiceForm({ service, onClose, onSuccess }: ServiceFormProps) {
  const isEditing = !!service

  const [formData, setFormData] = useState({
    title: service?.title || '',
    description: service?.description || '',
    highlights: service?.highlights || [''],
    price: service?.price || 0,
    deliveryDays: service?.deliveryDays || null as number | null,
    emoji: service?.emoji || 'üíº',
  })

  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState('')

  const handleAddHighlight = () => {
    if (formData.highlights.length < 5) {
      setFormData(prev => ({
        ...prev,
        highlights: [...prev.highlights, '']
      }))
    }
  }

  const handleRemoveHighlight = (index: number) => {
    setFormData(prev => ({
      ...prev,
      highlights: prev.highlights.filter((_, i) => i !== index)
    }))
  }

  const handleHighlightChange = (index: number, value: string) => {
    setFormData(prev => ({
      ...prev,
      highlights: prev.highlights.map((h, i) => i === index ? value : h)
    }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError('')

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (formData.title.length < 5) {
      setError('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤')
      return
    }

    if (formData.description.length < 20) {
      setError('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤')
      return
    }

    const cleanHighlights = formData.highlights.filter(h => h.trim().length > 0)
    if (cleanHighlights.length === 0) {
      setError('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É–Ω–∫—Ç "–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç"')
      return
    }

    if (formData.price < 1) {
      setError('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É')
      return
    }

    setIsSubmitting(true)

    try {
      const url = isEditing 
        ? `/api/specialist/services/${service.id}`
        : '/api/specialist/services'
      
      const method = isEditing ? 'PATCH' : 'POST'

      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...formData,
          highlights: cleanHighlights,
          deliveryDays: formData.deliveryDays || null,
        })
      })

      const data = await response.json()

      if (response.ok) {
        onSuccess()
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error)
      setError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ª—É–≥–∏')
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button
          onClick={onClose}
          variant="outline"
          size="sm"
          className="gap-2"
        >
          <ArrowLeft className="w-4 h-4" />
          –ù–∞–∑–∞–¥
        </Button>
        <div>
          <h3 className="text-lg font-semibold text-gray-900">
            {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É' : '–ù–æ–≤–∞—è —É—Å–ª—É–≥–∞'}
          </h3>
          <p className="text-sm text-gray-600">
            –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —É—Å–ª—É–≥—É –∏ —É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å
          </p>
        </div>
      </div>

      {/* Form */}
      <form onSubmit={handleSubmit} className="space-y-6 bg-white p-6 rounded-lg border">
        {/* Error message */}
        {error && (
          <div className="p-4 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm">
            {error}
          </div>
        )}

        {/* Emoji & Title */}
        <div className="grid grid-cols-[80px_1fr] gap-4">
          <div>
            <Label htmlFor="emoji">–≠–º–æ–¥–∑–∏</Label>
            <Input
              id="emoji"
              value={formData.emoji}
              onChange={(e) => setFormData(prev => ({ ...prev, emoji: e.target.value }))}
              maxLength={2}
              className="text-2xl text-center"
            />
          </div>
          <div>
            <Label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ *</Label>
            <Input
              id="title"
              value={formData.title}
              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
              placeholder="–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
              maxLength={100}
              required
            />
            <p className="text-xs text-gray-500 mt-1">
              {formData.title.length}/100
            </p>
          </div>
        </div>

        {/* Description */}
        <div>
          <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ *</Label>
          <textarea
            id="description"
            value={formData.description}
            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
            placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —É—Å–ª—É–≥—É, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –æ–Ω–∞ —Ä–µ—à–∞–µ—Ç, –¥–ª—è –∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç..."
            className="w-full min-h-[120px] px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            maxLength={1000}
            required
          />
          <p className="text-xs text-gray-500 mt-1">
            {formData.description.length}/1000
          </p>
        </div>

        {/* Highlights - –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç */}
        <div>
          <Label>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —É—Å–ª—É–≥—É *</Label>
          <p className="text-sm text-gray-600 mb-3">
            –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã (–º–∞–∫—Å–∏–º—É–º 5)
          </p>
          
          <div className="space-y-2">
            {formData.highlights.map((highlight, index) => (
              <div key={index} className="flex items-center gap-2">
                <span className="text-green-600 font-bold">‚úì</span>
                <Input
                  value={highlight}
                  onChange={(e) => handleHighlightChange(index, e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 60 –º–∏–Ω—É—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"
                  maxLength={100}
                />
                {formData.highlights.length > 1 && (
                  <Button
                    type="button"
                    onClick={() => handleRemoveHighlight(index)}
                    variant="outline"
                    size="sm"
                    className="shrink-0"
                  >
                    <X className="w-4 h-4" />
                  </Button>
                )}
              </div>
            ))}
          </div>

          {formData.highlights.length < 5 && (
            <Button
              type="button"
              onClick={handleAddHighlight}
              variant="outline"
              size="sm"
              className="mt-3 gap-2"
            >
              <Plus className="w-4 h-4" />
              –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç
            </Button>
          )}
        </div>

        {/* Price & Delivery */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label htmlFor="price">–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ –±–∞–ª–ª–∞—Ö) *</Label>
            <Input
              id="price"
              type="number"
              value={formData.price || ''}
              onChange={(e) => setFormData(prev => ({ ...prev, price: parseInt(e.target.value) || 0 }))}
              placeholder="100"
              min={1}
              max={999999}
              required
            />
            <p className="text-xs text-gray-500 mt-1">
              {formData.price > 0 && `‚âà ${formatServicePrice(formData.price, 'BYN')}`}
            </p>
          </div>
          <div>
            <Label htmlFor="deliveryDays">–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–Ω–µ–π)</Label>
            <Input
              id="deliveryDays"
              type="number"
              value={formData.deliveryDays || ''}
              onChange={(e) => setFormData(prev => ({ 
                ...prev, 
                deliveryDays: e.target.value ? parseInt(e.target.value) : null 
              }))}
              placeholder="7"
              min={1}
              max={90}
            />
            <p className="text-xs text-gray-500 mt-1">
              –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            </p>
          </div>
        </div>

        {/* Preview */}
        <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <p className="text-sm font-medium text-blue-900 mb-2">–ü—Ä–µ–≤—å—é –∫–∞—Ä—Ç–æ—á–∫–∏:</p>
          <div className="bg-white p-4 rounded-lg border">
            <div className="flex items-center gap-2 mb-2">
              <span className="text-2xl">{formData.emoji}</span>
              <h4 className="font-semibold text-gray-900">{formData.title || '–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏'}</h4>
            </div>
            <p className="text-sm text-gray-600 mb-2 line-clamp-2">
              {formData.description || '–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏...'}
            </p>
            <div className="p-2 bg-green-50 rounded">
              <p className="text-lg font-bold text-green-700">
                {formData.price > 0 ? formatServicePrice(formData.price, 'BYN') : '0 BYN'}
              </p>
            </div>
          </div>
        </div>

        {/* Actions */}
        <div className="flex gap-3 pt-4 border-t">
          <Button
            type="button"
            onClick={onClose}
            variant="outline"
            className="flex-1"
            disabled={isSubmitting}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            type="submit"
            className="flex-1"
            disabled={isSubmitting}
          >
            {isSubmitting ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É'}
          </Button>
        </div>
      </form>
    </div>
  )
}

