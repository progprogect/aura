/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç drag & drop –∏ –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞
 */

'use client'

import { useState, useRef, useEffect } from 'react'
import { Upload, Loader2, Check, X, Link as LinkIcon } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import Image from 'next/image'

interface AvatarUploaderProps {
  currentAvatar?: string | null
  onUploadSuccess: () => void
}

export function AvatarUploader({ currentAvatar, onUploadSuccess }: AvatarUploaderProps) {
  const [isUploading, setIsUploading] = useState(false)
  const [error, setError] = useState('')
  const [preview, setPreview] = useState<string | null>(null)
  const [showUrlInput, setShowUrlInput] = useState(false)
  const [imageUrl, setImageUrl] = useState('')
  const [cloudinaryConfigured, setCloudinaryConfigured] = useState(true)
  const fileInputRef = useRef<HTMLInputElement>(null)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Cloudinary –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  useEffect(() => {
    fetch('/api/specialist/avatar', {
      method: 'OPTIONS'
    }).catch(() => {
      setCloudinaryConfigured(false)
    })
  }, [])

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ base64
  const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader()
      reader.onload = () => resolve(reader.result as string)
      reader.onerror = reject
      reader.readAsDataURL(file)
    })
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const handleFileSelect = async (file: File) => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞
    if (!file.type.startsWith('image/')) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
      return
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ (–º–∞–∫—Å 5MB)
    if (file.size > 5 * 1024 * 1024) {
      setError('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 5 –ú–ë)')
      return
    }

    setError('')
    setIsUploading(true)

    try {
      const base64 = await fileToBase64(file)
      setPreview(base64)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Cloudinary
      const response = await fetch('/api/specialist/avatar', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ image: base64 })
      })

      const result = await response.json()

      if (result.success) {
        onUploadSuccess()
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')
        setPreview(null)
      }
    } catch (err) {
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ')
      setPreview(null)
    } finally {
      setIsUploading(false)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ drag & drop
  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault()
    const file = e.dataTransfer.files[0]
    if (file) {
      handleFileSelect(file)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      handleFileSelect(file)
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ URL
  const handleUrlUpload = async () => {
    if (!imageUrl.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
      return
    }

    setError('')
    setIsUploading(true)

    try {
      const response = await fetch('/api/specialist/avatar', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ imageUrl })
      })

      const result = await response.json()

      if (result.success) {
        setShowUrlInput(false)
        setImageUrl('')
        onUploadSuccess()
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')
      }
    } catch (err) {
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ')
    } finally {
      setIsUploading(false)
    }
  }

  const displayAvatar = preview || currentAvatar

  return (
    <div className="space-y-4">
      {/* –ü—Ä–µ–≤—å—é */}
      <div className="flex flex-col md:flex-row items-center gap-6">
        {/* –¢–µ–∫—É—â–∏–π –∞–≤–∞—Ç–∞—Ä */}
        <div className="relative w-32 h-32 rounded-full overflow-hidden bg-gray-100 flex-shrink-0">
          {displayAvatar ? (
            <Image
              src={displayAvatar}
              alt="–ê–≤–∞—Ç–∞—Ä"
              fill
              className="object-cover"
            />
          ) : (
            <div className="w-full h-full flex items-center justify-center text-gray-400">
              <Upload size={40} />
            </div>
          )}
          {isUploading && (
            <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
              <Loader2 className="w-8 h-8 text-white animate-spin" />
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ */}
        <div className="flex-1 space-y-3">
          {!showUrlInput ? (
            <>
              {/* Drag & Drop –∑–æ–Ω–∞ */}
              <div
                onDrop={handleDrop}
                onDragOver={(e) => e.preventDefault()}
                onClick={() => fileInputRef.current?.click()}
                className="
                  border-2 border-dashed border-gray-300 rounded-lg p-6
                  hover:border-blue-400 hover:bg-blue-50/50
                  cursor-pointer transition-colors
                  text-center
                "
              >
                <Upload className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                <p className="text-sm text-gray-600">
                  –ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                </p>
                <p className="text-xs text-gray-400 mt-1">
                  JPG, PNG, GIF (–º–∞–∫—Å 5 –ú–ë)
                </p>
              </div>

              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handleFileChange}
                className="hidden"
              />

              {/* –ò–ª–∏ –ø–æ URL */}
              <Button
                variant="outline"
                onClick={() => setShowUrlInput(true)}
                className="w-full"
                type="button"
              >
                <LinkIcon size={16} className="mr-2" />
                –í—Å—Ç–∞–≤–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              </Button>
            </>
          ) : (
            <>
              {/* URL Input */}
              <div className="flex gap-2">
                <Input
                  type="url"
                  placeholder="https://example.com/image.jpg"
                  value={imageUrl}
                  onChange={(e) => setImageUrl(e.target.value)}
                  className="flex-1"
                />
                <Button
                  onClick={handleUrlUpload}
                  disabled={isUploading || !imageUrl.trim()}
                >
                  {isUploading ? (
                    <Loader2 size={16} className="animate-spin" />
                  ) : (
                    <Check size={16} />
                  )}
                </Button>
                <Button
                  variant="outline"
                  onClick={() => {
                    setShowUrlInput(false)
                    setImageUrl('')
                  }}
                >
                  <X size={16} />
                </Button>
              </div>
              <p className="text-xs text-gray-500">
                üí° –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
              </p>
            </>
          )}
        </div>
      </div>

      {/* –û—à–∏–±–∫–∞ */}
      {error && (
        <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
          <p className="text-sm text-red-600">{error}</p>
        </div>
      )}

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ Cloudinary */}
      {!cloudinaryConfigured && !showUrlInput && (
        <div className="p-3 bg-amber-50 border border-amber-200 rounded-lg">
          <p className="text-sm text-amber-700">
            ‚ö†Ô∏è Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
          </p>
        </div>
      )}
    </div>
  )
}

