/**
 * API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Redis -> –ë–î
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */

import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { getProfileViews, getContactViews } from '@/lib/redis'

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–µ —É—Å–ª–æ–≤–∏–µ)
    const authHeader = request.headers.get('authorization')
    if (authHeader !== `Bearer ${process.env.ADMIN_SECRET}`) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...')

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
    const specialists = await prisma.specialistProfile.findMany({
      select: { id: true, profileViews: true, contactViews: true }
    })

    let syncedCount = 0
    let errorCount = 0

    for (const specialist of specialists) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
        const [redisProfileViews, redisContactViews] = await Promise.all([
          getProfileViews(specialist.id),
          getContactViews(specialist.id)
        ])

        // –û–±–Ω–æ–≤–ª—è–µ–º –ë–î, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        if (redisProfileViews > specialist.profileViews || redisContactViews > specialist.contactViews) {
          await prisma.specialistProfile.update({
            where: { id: specialist.id },
            data: {
              profileViews: Math.max(redisProfileViews, specialist.profileViews),
              contactViews: Math.max(redisContactViews, specialist.contactViews)
            }
          })
          
          syncedCount++
          console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω ${specialist.id}: ${redisProfileViews} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è, ${redisContactViews} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`)
        }
      } catch (error) {
        errorCount++
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${specialist.id}:`, error)
      }
    }

    console.log(`üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${syncedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`)

    return NextResponse.json({
      success: true,
      synced: syncedCount,
      errors: errorCount,
      total: specialists.length
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏' }, 
      { status: 500 }
    )
  }
}
