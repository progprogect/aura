/**
 * API –¥–ª—è AI-—á–∞—Ç–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç streaming responses
 */

import { NextRequest, NextResponse } from 'next/server'
import { openai, MODELS, CHAT_CONFIG } from '@/lib/ai/openai'
import { getSystemPrompt, getExtractionPrompt } from '@/lib/ai/prompts'
import { searchSpecialistsBySemantic, searchSpecialistsByKeyword } from '@/lib/ai/semantic-search'
import { prisma } from '@/lib/db'
import { trackChatEvent, ChatEvent } from '@/lib/analytics/chat-analytics'

export const runtime = 'nodejs' // –ù—É–∂–µ–Ω –¥–ª—è streaming

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { messages, sessionId } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      return NextResponse.json({ error: 'Messages are required' }, { status: 400 })
    }

    if (messages.length > 100) {
      return NextResponse.json({ error: 'Too many messages' }, { status: 400 })
    }

    for (const msg of messages) {
      if (!msg.role || !msg.content) {
        return NextResponse.json({ error: 'Invalid message format' }, { status: 400 })
      }
      if (msg.content.length > 10000) {
        return NextResponse.json({ error: 'Message too long' }, { status: 400 })
      }
    }

    if (!sessionId || typeof sessionId !== 'string' || sessionId.length > 100) {
      return NextResponse.json({ error: 'Invalid session ID' }, { status: 400 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
    let session = await prisma.chatSession.findUnique({
      where: { id: sessionId },
    })

    if (!session) {
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      session = await prisma.chatSession.create({
        data: {
          id: sessionId,
          messages: [],
          recommendedIds: [],
          status: 'active',
          source: 'chat_page',
          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 –¥–Ω–µ–π
        },
      })

      await trackChatEvent(ChatEvent.SESSION_STARTED, sessionId)
    }

    // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastUserMessage = messages[messages.length - 1]

    if (lastUserMessage.role === 'user') {
      await trackChatEvent(ChatEvent.MESSAGE_SENT, sessionId)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const showPreviousKeywords = ['—Ä–∞–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö', '–ø—Ä–µ–¥—ã–¥—É—â–∏—Ö', '–ø—Ä–æ—à–ª—ã—Ö', '—Ç–µ—Ö –∂–µ']
    const isShowPreviousRequest = messages.length >= 4 && 
      showPreviousKeywords.some(kw => lastUserMessage.content?.toLowerCase().includes(kw))
    
    const expandCriteriaKeywords = ['—Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏', '—Ä–∞—Å—à–∏—Ä–∏—Ç—å', '—É–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä', '–º–µ–Ω—å—à–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤', '–±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤']
    const isExpandCriteriaRequest = messages.length >= 4 &&
      expandCriteriaKeywords.some(kw => lastUserMessage.content?.toLowerCase().includes(kw))
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    const searchParams = await extractSearchParams(messages, lastUserMessage.content, isShowPreviousRequest, isExpandCriteriaRequest)

    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê')
    console.log('[Chat API] üì• Incoming messages:', messages.length)
    console.log('[Chat API] üí¨ Last user message:', lastUserMessage.content)
    console.log('[Chat API] üîç Extracted params:', JSON.stringify(searchParams, null, 2))
    console.log('[Chat API] üîÅ Show previous request:', isShowPreviousRequest)
    console.log('[Chat API] üîÑ Expand criteria request:', isExpandCriteriaRequest)
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê')

    // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–∏—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
    let specialists: any[] = []
    let noNewSpecialists = false
    let isLowQualityMatch = false
    let avgSimilarityScore = 0
    
    if (searchParams.shouldSearch) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ - –∏—â–µ–º —Å —É—Ä–µ–∑–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
      if (isExpandCriteriaRequest) {
        console.log('[Chat API] üîÑ Expanding search criteria (removing strict filters)...')
        
        // –£–±–∏—Ä–∞–µ–º —Å–∞–º—ã–µ —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã: –æ–ø—ã—Ç –∏ —Ü–µ–Ω—É
        // –û—Å—Ç–∞–≤–ª—è–µ–º: –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Ñ–æ—Ä–º–∞—Ç, –≥–æ—Ä–æ–¥
        try {
          specialists = await searchSpecialistsBySemantic({
            query: searchParams.query,
            filters: {
              category: searchParams.category,
              workFormats: searchParams.workFormats,
              city: searchParams.city,
              // –ù–ï –ø–µ—Ä–µ–¥–∞—ë–º maxPrice –∏ minExperience
            },
            limit: 10,
            excludeIds: session.recommendedIds,
          })
          
          console.log('[Chat API] ‚úÖ Found with expanded criteria:', specialists.length)
        } catch (error) {
          console.error('[Chat API] Expanded search failed:', error)
        }
      }
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–≤–∏–¥–µ—Ç—å —Ä–∞–Ω–µ–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –∏–∑ –ë–î
      else if (isShowPreviousRequest && session.recommendedIds.length > 0) {
        console.log('[Chat API] üîÑ Loading previously shown specialists:', session.recommendedIds.length)
        
        specialists = await prisma.specialist.findMany({
          where: {
            id: { in: session.recommendedIds },
            acceptingClients: true,
          },
          take: 10,
          select: {
            id: true,
            firstName: true,
            lastName: true,
            avatar: true,
            slug: true,
            category: true,
            specializations: true,
            tagline: true,
            about: true,
            city: true,
            country: true,
            workFormats: true,
            yearsOfPractice: true,
            priceFrom: true,
            priceTo: true,
            currency: true,
            priceDescription: true,
            verified: true,
            customFields: true,
          },
        })
        
        console.log('[Chat API] ‚úÖ Loaded previous specialists:', specialists.length)
      } else {
        // –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        console.log('[Chat API] üîé Starting search with query:', searchParams.query)
        console.log('[Chat API] üö´ Excluding already shown IDs:', session.recommendedIds.length, 'specialists')
        
        try {
          specialists = await searchSpecialistsBySemantic({
            query: searchParams.query,
            filters: {
              category: searchParams.category,
              workFormats: searchParams.workFormats,
              city: searchParams.city,
              maxPrice: searchParams.maxPrice,
              minExperience: searchParams.minExperience,
            },
            limit: 10,
            excludeIds: session.recommendedIds,
          })
        } catch (embeddingError) {
          console.warn('[Chat API] Embedding search failed, using keyword fallback:', embeddingError)
          // Fallback –Ω–∞ keyword search
          specialists = await searchSpecialistsByKeyword({
            query: searchParams.query,
            filters: {
              category: searchParams.category,
              workFormats: searchParams.workFormats,
              city: searchParams.city,
              maxPrice: searchParams.maxPrice,
              minExperience: searchParams.minExperience,
            },
            limit: 10,
            excludeIds: session.recommendedIds,
          })
        }

        console.log('[Chat API] ‚úÖ Found specialists:', specialists.length)
        
        // –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö –Ω–µ –Ω–∞—à–ª–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è GPT
        noNewSpecialists = specialists.length === 0 && session.recommendedIds.length > 0
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π similarity –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–¥–±–æ—Ä–∞
        if (specialists.length > 0) {
          const similarities = specialists
            .slice(0, 5)
            .map(s => s.distance !== undefined ? (1 - s.distance) * 100 : 50)
          
          const avgSimilarity = similarities.reduce((a, b) => a + b, 0) / similarities.length
          avgSimilarityScore = Math.round(avgSimilarity)
          
          console.log('[Chat API] üìä Similarity stats:', {
            avg: avgSimilarityScore,
            min: Math.round(Math.min(...similarities)),
            max: Math.round(Math.max(...similarities)),
            count: specialists.length,
          })
          
          // –§–ª–∞–≥ –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–¥–±–æ—Ä–∞ (< 70%)
          if (avgSimilarity < 70) {
            isLowQualityMatch = true
            console.log('[Chat API] ‚ö†Ô∏è Low quality match detected:', avgSimilarityScore, '% avg similarity')
          }
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –ø–æ–∫–∞–∑ —Ä–∞–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö)
      if (specialists.length > 0 && !isShowPreviousRequest) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ (–∫–æ—Ç–æ—Ä—ã—Ö –µ—â—ë –Ω–µ—Ç –≤ recommendedIds)
        const newIds = specialists
          .slice(0, 5)
          .map((s) => s.id)
          .filter((id) => !session.recommendedIds.includes(id))
        
        console.log('[Chat API] üíæ Updating session:', {
          totalShown: specialists.slice(0, 5).length,
          newIds: newIds.length,
          alreadyShown: specialists.slice(0, 5).length - newIds.length,
        })
        
        if (newIds.length > 0) {
          await prisma.chatSession.update({
            where: { id: sessionId },
            data: {
              recommendedIds: {
                push: newIds,
              },
              specialistsShown: {
                increment: newIds.length,
              },
              extractedFilters: searchParams as any,
            },
          })
        }
      }
      
      // –¢—Ä–µ–∫–∞–µ–º –ø–æ–∫–∞–∑ (–¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤)
      if (specialists.length > 0) {
        await trackChatEvent(ChatEvent.RECOMMENDATIONS_SHOWN, sessionId, {
          count: specialists.length,
        })
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
    const systemMessage = getSystemPrompt()
    let contextMessage = ''
    
    if (specialists.length > 0) {
      if (isExpandCriteriaRequest) {
        // –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —É–±—Ä–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã
        contextMessage = `\n\n‚úÖ –í–ê–ñ–ù–û: –°–∏—Å—Ç–µ–º–∞ –†–ê–°–®–ò–†–ò–õ–ê –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞—à–ª–∞ ${specialists.length} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.

–£–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–¥–±–æ—Ä–∞:
${searchParams.maxPrice ? `- –ë—é–¥–∂–µ—Ç (–±—ã–ª–æ: –¥–æ ${searchParams.maxPrice}‚ÇΩ)` : ''}
${searchParams.minExperience ? `- –û–ø—ã—Ç (–±—ã–ª–æ: –æ—Ç ${searchParams.minExperience} –ª–µ—Ç)` : ''}

–í–æ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:
${JSON.stringify(
          specialists.slice(0, 5).map((s) => ({
            name: `${s.firstName} ${s.lastName}`,
            specializations: s.specializations,
            experience: s.yearsOfPractice,
            price: s.priceFrom ? `–æ—Ç ${Math.floor(s.priceFrom / 100)}‚ÇΩ` : '–ø–æ –∑–∞–ø—Ä–æ—Å—É',
          })),
          null,
          2
        )}

–°–ö–ê–ñ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ:
"–†–∞—Å—à–∏—Ä–∏–ª –∫—Ä–∏—Ç–µ—Ä–∏–∏ - —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º –æ–ø—ã—Ç–æ–º –∏ —Ü–µ–Ω–æ–π.
 –°—Ä–µ–¥–∏ –Ω–∏—Ö –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã—à–µ."

–î–æ–±–∞–≤—å –∫–Ω–æ–ø–∫–∏:
__BUTTONS__["–ü–æ–¥—Ö–æ–¥—è—Ç", "–í–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏", "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"]

–ö–∞—Ä—Ç–æ—á–∫–∏ –£–ñ–ï –ü–û–ö–ê–ó–ê–ù–´ (–Ω–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –∏—Ö).`
      } else if (isLowQualityMatch) {
        // –ù–ò–ó–ö–û–ï –ö–ê–ß–ï–°–¢–í–û –ü–û–î–ë–û–†–ê - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏
        contextMessage = `\n\n‚ö†Ô∏è –í–ê–ñ–ù–û: –°–∏—Å—Ç–µ–º–∞ –Ω–∞—à–ª–∞ ${specialists.length} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –Ω–æ –°–û–í–ü–ê–î–ï–ù–ò–ï –ù–ò–ó–ö–û–ï (—Å—Ä–µ–¥–Ω–∏–π ${avgSimilarityScore}%).

–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:
- –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${searchParams.category || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
- –§–æ—Ä–º–∞—Ç: ${searchParams.workFormats?.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
- –ë—é–¥–∂–µ—Ç: ${searchParams.maxPrice ? `–¥–æ ${searchParams.maxPrice}‚ÇΩ` : '–Ω–µ —É–∫–∞–∑–∞–Ω'}
- –û–ø—ã—Ç: ${searchParams.minExperience ? `–æ—Ç ${searchParams.minExperience} –ª–µ—Ç` : '–Ω–µ —É–∫–∞–∑–∞–Ω'}
- –ú–µ—Ç–æ–¥—ã: ${searchParams.preferences?.methods?.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}

–í–æ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:
${JSON.stringify(
          specialists.slice(0, 5).map((s) => ({
            name: `${s.firstName} ${s.lastName}`,
            specializations: s.specializations,
          })),
          null,
          2
        )}

–ü–†–ï–î–õ–û–ñ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ:
"–ù–∞—à—ë–ª ${specialists.length} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, –Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ (${avgSimilarityScore}%).
 –ú–æ–≥—É —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ - —É–±—Ä–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–æ–ø—ã—Ç, —Ü–µ–Ω—É) –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–¥–±–æ—Ä–∞?"

–î–æ–±–∞–≤—å –∫–Ω–æ–ø–∫–∏:
__BUTTONS__["–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö", "–†–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏", "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"]

–ö–∞—Ä—Ç–æ—á–∫–∏ –£–ñ–ï –ü–û–ö–ê–ó–ê–ù–´ (–Ω–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –∏—Ö —Ç–µ–∫—Å—Ç–æ–º).`
      } else {
        // –ù–û–†–ú–ê–õ–¨–ù–û–ï –ö–ê–ß–ï–°–¢–í–û - –æ–±—ã—á–Ω—ã–π —Ñ–ª–æ—É
        contextMessage = `\n\nüéØ –í–ê–ñ–ù–û: –°–∏—Å—Ç–µ–º–∞ –Ω–∞—à–ª–∞ –∏ –ü–û–ö–ê–ó–ê–õ–ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${specialists.length} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫.
–í–æ—Ç –∏—Ö –¥–∞–Ω–Ω—ã–µ:\n${JSON.stringify(
          specialists.slice(0, 5).map((s) => ({
            id: s.id,
            name: `${s.firstName} ${s.lastName}`,
            category: s.category,
            specializations: s.specializations,
            tagline: s.tagline,
            experience: s.yearsOfPractice,
            formats: s.workFormats,
            city: s.city,
          })),
          null,
          2
        )}

–ù–ï –ü–ï–†–ï–ß–ò–°–õ–Ø–ô –∏—Ö —Ç–µ–∫—Å—Ç–æ–º - –æ–Ω–∏ –£–ñ–ï –ü–û–ö–ê–ó–ê–ù–´! –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.`
      }
    } else if (noNewSpecialists) {
      // –ù–æ–≤—ã—Ö –Ω–µ –Ω–∞—à–ª–∏, –Ω–æ —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã —Ä–∞–Ω–µ–µ
      contextMessage = `\n\n‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ —Ç–µ–∫—É—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ù–ï –ù–ê–ô–î–ï–ù–û.
–†–∞–Ω–µ–µ —É–∂–µ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ ${session.recommendedIds.length} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.

–ü–†–ï–î–õ–û–ñ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ –í–ê–†–ò–ê–ù–¢–´:
1. "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –µ—â—ë —Ä–∞–∑?"
2. "–ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞?" (–æ–ø—ã—Ç, —Ü–µ–Ω–∞, –≥–æ—Ä–æ–¥, –º–µ—Ç–æ–¥—ã)
3. "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π?" (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∏—Å–∫–∞–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ - –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ—É—á–∏–Ω–≥–∞)
4. "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞?" (–¥–∞–π —Å—Å—ã–ª–∫—É: /catalog)

–î–æ–±–∞–≤—å –∫–Ω–æ–ø–∫–∏:
__BUTTONS__["–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö", "–ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏", "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥"]`
    }

    console.log('[Chat API] üìù System message length:', systemMessage.length)
    console.log('[Chat API] üìù Context message:', contextMessage ? `Added (${contextMessage.length} chars)` : 'None')
    console.log('[Chat API] üí¨ Total messages to GPT:', messages.length + 1)

    // –°–æ–∑–¥–∞—ë–º streaming response
    const stream = await openai.chat.completions.create({
      model: MODELS.CHAT,
      messages: [
        { role: 'system', content: systemMessage + contextMessage },
        ...messages,
      ],
      temperature: CHAT_CONFIG.temperature,
      max_tokens: CHAT_CONFIG.maxTokens,
      stream: true,
    })

    // –°–æ–∑–¥–∞—ë–º ReadableStream –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const encoder = new TextEncoder()
    const readableStream = new ReadableStream({
      async start(controller) {
        try {
          let fullResponse = ''

          for await (const chunk of stream) {
            const content = chunk.choices[0]?.delta?.content || ''
            fullResponse += content

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º chunk –∫–ª–∏–µ–Ω—Ç—É
            controller.enqueue(encoder.encode(content))
          }

          console.log('[Chat API] ‚úÖ GPT response complete:', fullResponse.substring(0, 100) + '...')
          console.log('[Chat API] üìä Response length:', fullResponse.length, 'chars')

          // –í –∫–æ–Ω—Ü–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
          if (specialists.length > 0) {
            const specialistsData = specialists.slice(0, 5).map((s) => {
              // –í—ã—á–∏—Å–ª—è–µ–º similarity (0-100%)
              const similarity = s.distance !== undefined ? Math.round((1 - s.distance) * 100) : null
              
              // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É –ø–æ–¥–æ–±—Ä–∞–ª–∏
              const matchReasons: string[] = []
              if (searchParams.category) {
                matchReasons.push(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${getCategoryName(searchParams.category)}`)
              }
              if (s.specializations && s.specializations.length > 0) {
                matchReasons.push(`–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${s.specializations.slice(0, 3).join(', ')}`)
              }
              if (searchParams.workFormats && searchParams.workFormats.length > 0) {
                const formats = searchParams.workFormats.map(f => f === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω').join(', ')
                matchReasons.push(`–§–æ—Ä–º–∞—Ç: ${formats}`)
              }
              if (s.city && searchParams.city) {
                matchReasons.push(`–ì–æ—Ä–æ–¥: ${s.city}`)
              }
              if (s.yearsOfPractice && searchParams.minExperience) {
                matchReasons.push(`–û–ø—ã—Ç: ${s.yearsOfPractice} –ª–µ—Ç`)
              }
              
              return {
                id: s.id,
                firstName: s.firstName,
                lastName: s.lastName,
                avatar: s.avatar,
                slug: s.slug,
                category: s.category,
                specializations: s.specializations,
                tagline: s.tagline,
                yearsOfPractice: s.yearsOfPractice,
                workFormats: s.workFormats,
                city: s.city,
                priceFrom: s.priceFrom,
                priceTo: s.priceTo,
                verified: s.verified,
                similarity,
                matchReasons,
              }
            })

            const specialistsPayload = `\n\n__SPECIALISTS__${JSON.stringify(specialistsData)}`
            console.log('[Chat API] üì§ Sending specialists:', specialistsData.length, 'items')
            console.log('[Chat API] üì¶ Payload length:', specialistsPayload.length, 'chars')
            console.log('[Chat API] üì¶ First specialist:', specialistsData[0]?.firstName, specialistsData[0]?.lastName)
            console.log('[Chat API] üì¶ Payload preview:', specialistsPayload.substring(0, 300))
            
            controller.enqueue(encoder.encode(specialistsPayload))
            console.log('[Chat API] ‚úÖ Specialists payload enqueued')
          }

          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT
          const buttonsMatch = fullResponse.match(/__BUTTONS__\[(.*?)\]/)
          let hasButtons = false
          
          if (buttonsMatch) {
            try {
              const buttons = JSON.parse(`[${buttonsMatch[1]}]`)
              controller.enqueue(encoder.encode(`\n\n__BUTTONS__${JSON.stringify(buttons)}`))
              hasButtons = true
            } catch (e) {
              console.error('[Chat API] Failed to parse buttons:', e)
            }
          }
          
          // FALLBACK: –ï—Å–ª–∏ GPT –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –Ω–æ –ù–ï –¥–æ–±–∞–≤–∏–ª –∫–Ω–æ–ø–∫–∏ ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
          if (!hasButtons && specialists.length === 0) {
            const searchSuggestionKeywords = [
              '–Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫',
              '–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
              '—Ö–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å',
              '–Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫',
              '–≥–æ—Ç–æ–≤ –∏—Å–∫–∞—Ç—å',
              '–≥–æ—Ç–æ–≤ –ø–æ–¥–æ–±—Ä–∞—Ç—å'
            ]
            
            const gptSuggestsSearch = searchSuggestionKeywords.some(kw => 
              fullResponse.toLowerCase().includes(kw)
            )
            
            if (gptSuggestsSearch && messages.length >= 5) {
              console.log('[Chat API] üîß Auto-injecting search buttons (GPT forgot them)')
              const autoButtons = ["üîç –ù–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤", "–£—Ç–æ—á–Ω–∏—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", "–£—Ç–æ—á–Ω–∏—Ç—å –µ—â—ë"]
              controller.enqueue(encoder.encode(`\n\n__BUTTONS__${JSON.stringify(autoButtons)}`))
            }
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏
          await prisma.chatSession.update({
            where: { id: sessionId },
            data: {
              messageCount: { increment: 1 },
              updatedAt: new Date(),
            },
          })

          controller.close()
        } catch (error) {
          console.error('[Chat API] Streaming error:', error)
          controller.error(error)
        }
      },
    })

    return new Response(readableStream, {
      headers: {
        'Content-Type': 'text/plain; charset=utf-8',
        'Cache-Control': 'no-cache',
        'X-Content-Type-Options': 'nosniff',
      },
    })
  } catch (error) {
    console.error('[Chat API] Error:', error)
    return NextResponse.json(
      {
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    )
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
 */
async function extractSearchParams(
  messages: any[], 
  lastUserMessageContent: string,
  isShowPreviousRequest: boolean = false,
  isExpandCriteriaRequest: boolean = false
): Promise<{
  shouldSearch: boolean
  query: string
  category?: string
  workFormats?: string[]
  city?: string
  minExperience?: number
  maxPrice?: number
  preferences?: {
    methods?: string[]
    gender?: string
    age?: string
  }
}> {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
    const dialogContext = messages
      .map((m) => `${m.role === 'user' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'}: ${m.content}`)
      .join('\n')

    const response = await openai.chat.completions.create({
      model: MODELS.CHAT,
      messages: [
        { role: 'system', content: getExtractionPrompt() },
        { role: 'user', content: dialogContext },
      ],
      response_format: { type: 'json_object' },
      temperature: 0.1,
    })

    const extracted = JSON.parse(response.choices[0].message.content || '{}')

    console.log('[Chat API] ü§ñ GPT extraction result:', JSON.stringify(extracted, null, 2))

    // ========================================
    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê shouldSearch
    // ========================================
    
    // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è –ª—é–±–æ–≥–æ –ø–æ–∏—Å–∫–∞)
    const hasCategory = !!extracted.category
    const hasFormat = extracted.workFormats && extracted.workFormats.length > 0
    const hasProblem = extracted.problem && extracted.problem.length > 3
    const hasBasics = hasCategory && hasFormat && hasProblem
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞)
    const hasPrice = !!extracted.maxPrice
    const hasExperience = !!extracted.minExperience
    const hasMethods = extracted.preferences?.methods && extracted.preferences.methods.length > 0
    const hasGender = !!extracted.preferences?.gender
    
    const additionalParams = [hasPrice, hasExperience, hasMethods, hasGender].filter(Boolean).length
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ø–í–ù–û –ø–æ–ø—Ä–æ—Å–∏–ª –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
    const searchKeywords = [
      '–Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤',
      '–Ω–∞–π–¥–∏',
      '–Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫',
      '–Ω–∞—á–Ω–∏ –ø–æ–∏—Å–∫',
      '—Ö–≤–∞—Ç–∏—Ç',
      '–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ',
      '–∏—Å–∫–∞—Ç—å',
      '–ø–æ–¥–±–µ—Ä–∏',
      '–ø–æ–¥–æ–±—Ä–∞—Ç—å',
      'üîç'
    ]
    const userRequestedSearch = searchKeywords.some(kw => 
      lastUserMessageContent?.toLowerCase().includes(kw.toLowerCase())
    )
    
    // Follow-up –∑–∞–ø—Ä–æ—Å—ã (–ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë)
    const followUpKeywords = ['–µ—â—ë', '–¥—Ä—É–≥–∏–µ', '–¥—Ä—É–≥–∏—Ö', '–ø–æ–∫–∞–∑–∞—Ç—å', '–±–æ–ª—å—à–µ', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ', '–µ—â–µ']
    const isFollowUpRequest = messages.length >= 4 && 
      followUpKeywords.some(kw => lastUserMessageContent?.toLowerCase().includes(kw))
    
    console.log('[Chat API] üß© Search criteria:', {
      messageCount: messages.length,
      hasBasics: hasBasics,
      hasCategory,
      hasFormat,
      hasProblem,
      additionalParams,
      hasPrice,
      hasExperience,
      hasMethods,
      userRequestedSearch,
      isFollowUp: isFollowUpRequest,
      isShowPrevious: isShowPreviousRequest,
      isExpandCriteria: isExpandCriteriaRequest,
    })
    
    // –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ò—â–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ø–í–ù–û –ø–æ–ø—Ä–æ—Å–∏–ª!
    // –ù–ò–ö–ê–ö–û–ì–û –ê–í–¢–û–ü–û–ò–°–ö–ê! GPT –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–æ–ø–∫—É, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞—Ç—å.
    //
    // –ò—â–µ–º –µ—Å–ª–∏:
    // 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "üîç –ù–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤" –ò–õ–ò –Ω–∞–ø–∏—Å–∞–ª "–Ω–∞–π–¥–∏"
    // 2. –ò–õ–ò —ç—Ç–æ follow-up –∑–∞–ø—Ä–æ—Å ("–ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë")
    // 3. –ò–õ–ò –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
    // 4. –ò–õ–ò —Ä–∞—Å—à–∏—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ (—É–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã)
    const shouldSearch = 
      userRequestedSearch ||
      isFollowUpRequest ||
      isShowPreviousRequest ||
      isExpandCriteriaRequest

    console.log('[Chat API] üéØ Should search:', shouldSearch, {
      reason: userRequestedSearch ? 'user_requested' : 
              isFollowUpRequest ? 'follow_up' :
              isShowPreviousRequest ? 'show_previous' :
              isExpandCriteriaRequest ? 'expand_criteria' : 'waiting_for_user_confirmation'
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è semantic search
    const queryParts = [
      extracted.category && getCategoryName(extracted.category),
      extracted.problem,
    ]
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã/–ø–æ–¥—Ö–æ–¥—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if (extracted.preferences?.methods) {
      queryParts.push(extracted.preferences.methods.join(' '))
    }
    
    const query = queryParts.filter(Boolean).join(' ')

    return {
      shouldSearch,
      query,
      category: extracted.category,
      workFormats: extracted.workFormats?.filter(Boolean),
      city: extracted.city,
      minExperience: extracted.minExperience,
      maxPrice: extracted.maxPrice,
      preferences: extracted.preferences,
    }
  } catch (error) {
    console.error('[Chat API] Extraction error:', error)
    return {
      shouldSearch: false,
      query: '',
    }
  }
}

function getCategoryName(key: string): string {
  const categories: Record<string, string> = {
    psychology: '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç–µ—Ä–∞–ø–∏—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ø—Ä–µ—Å—Å–∏—è',
    fitness: '—Ñ–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–ø–æ—Ä—Ç',
    nutrition: '–ø–∏—Ç–∞–Ω–∏–µ –¥–∏–µ—Ç–æ–ª–æ–≥–∏—è –ø–æ—Ö—É–¥–µ–Ω–∏–µ',
    massage: '–º–∞—Å—Å–∞–∂ —Ç–µ–ª–µ—Å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏',
    coaching: '–∫–æ—É—á–∏–Ω–≥ —Ä–∞–∑–≤–∏—Ç–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏—è',
    medicine: '–º–µ–¥–∏—Ü–∏–Ω–∞ –≤—Ä–∞—á –∑–¥–æ—Ä–æ–≤—å–µ',
  }
  return categories[key] || key
}

