/**
 * API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞–º–∏
 * GET - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤
 * POST - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
 */

import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { z } from 'zod'
import { uploadImage, uploadDocument, uploadPDF, uploadCustomPreview, uploadFallbackPreview } from '@/lib/cloudinary/config'
import { getAuthSession, UNAUTHORIZED_RESPONSE } from '@/lib/auth/api-auth'
import { generateSlug, formatFileSize, validateHighlights } from '@/lib/lead-magnets/utils'
import { revalidateSpecialistProfile } from '@/lib/revalidation'
import { generateFallbackPreview } from '@/lib/lead-magnets/fallback-preview-generator'
import type { PreviewUrls } from '@/types/lead-magnet'

const CreateLeadMagnetSchema = z.object({
  type: z.enum(['file', 'link', 'service']),
  title: z.string().min(5).max(100),
  description: z.string().min(10).max(200),
  fileUrl: z.string().optional(),
  linkUrl: z.string().url().optional().or(z.literal('')),  // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
  emoji: z.string().default('üéÅ'),
  // –ù–æ–≤—ã–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
  highlights: z.array(z.string()).max(5).optional().default([]),
  targetAudience: z.string().max(50).optional(),
  ogImage: z.string().url().optional().or(z.literal('')),  // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
})

export async function GET(request: NextRequest) {
  try {
    const session = await getAuthSession(request)
    
    if (!session) {
      return NextResponse.json(UNAUTHORIZED_RESPONSE, { status: 401 })
    }

    if (!session.specialistProfile) {
      return NextResponse.json(
        { success: false, error: '–ü—Ä–æ—Ñ–∏–ª—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    const leadMagnets = await prisma.leadMagnet.findMany({
      where: {
        specialistProfileId: session.specialistProfile!.id,
        isActive: true
      },
      orderBy: { order: 'asc' }
    })

    return NextResponse.json({ success: true, leadMagnets })

  } catch (error) {
    console.error('[API/lead-magnets/GET] –û—à–∏–±–∫–∞:', error)
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getAuthSession(request)
    
    if (!session) {
      return NextResponse.json(UNAUTHORIZED_RESPONSE, { status: 401 })
    }

    if (!session.specialistProfile) {
      return NextResponse.json(
        { success: false, error: '–ü—Ä–æ—Ñ–∏–ª—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (–º–∞–∫—Å 6)
    const count = await prisma.leadMagnet.count({
      where: {
        specialistProfileId: session.specialistProfile!.id,
        isActive: true
      }
    })

    if (count >= 6) {
      return NextResponse.json(
        { success: false, error: '–ú–∞–∫—Å–∏–º—É–º 6 –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤' },
        { status: 400 }
      )
    }

    const contentType = request.headers.get('content-type')
    let data: any
    let fileSize: string | null = null
    let previewUrls: PreviewUrls | null = null

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ FormData (–¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ previewFile) –∏–ª–∏ JSON
    if (contentType?.includes('multipart/form-data')) {
      const formData = await request.formData()
      const file = formData.get('file') as File | null
      const previewFile = formData.get('previewFile') as File | null
      const type = formData.get('type') as string
      const title = formData.get('title') as string
      const description = formData.get('description') as string
      const emoji = formData.get('emoji') as string || 'üéÅ'
      const highlightsRaw = formData.get('highlights') as string || '[]'
      const targetAudience = formData.get('targetAudience') as string || undefined
      const linkUrl = formData.get('linkUrl') as string || undefined
      const fileUrl = formData.get('fileUrl') as string || undefined

      let uploadedFileUrl: string | undefined = fileUrl

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (file) {
        const bytes = await file.arrayBuffer()
        const buffer = Buffer.from(bytes)
        const base64 = `data:${file.type};base64,${buffer.toString('base64')}`
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        const isImage = file.type.startsWith('image/')
        const isPDF = file.type === 'application/pdf'
        const isDocument = file.type.includes('document') || 
                          file.type.includes('text/') ||
                          file.type.includes('application/vnd')
        
        let uploadResult
        if (isImage) {
          uploadResult = await uploadImage(base64, 'lead-magnets')
        } else if (isPDF) {
          uploadResult = await uploadPDF(base64, 'lead-magnets')
        } else if (isDocument) {
          uploadResult = await uploadDocument(base64, 'lead-magnets')
        } else {
          uploadResult = await uploadDocument(base64, 'lead-magnets')
        }

        uploadedFileUrl = uploadResult.url
        fileSize = formatFileSize(file.size)
      }

      // –ü–∞—Ä—Å–∏–º highlights
      let highlights: string[] = []
      try {
        highlights = JSON.parse(highlightsRaw)
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
      }

      data = {
        type,
        title,
        description,
        fileUrl: uploadedFileUrl,
        linkUrl,
        emoji,
        highlights,
        targetAudience,
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—å—é
      if (previewFile) {
        // –ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        console.log('[Lead Magnet] –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é')
        try {
          const bytes = await previewFile.arrayBuffer()
          const buffer = Buffer.from(bytes)
          
          const previewResult = await uploadCustomPreview(buffer, '')
          previewUrls = {
            thumbnail: previewResult.thumbnail,
            card: previewResult.card,
            detail: previewResult.detail
          }
          console.log('[Lead Magnet] –ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ')
        } catch (error) {
          console.error('[Lead Magnet] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é:', error)
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–µ–≤—å—é - fallback –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–∏–∂–µ
        }
      }
    } else {
      const body = await request.json()
      data = CreateLeadMagnetSchema.parse(body)
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if (data.type === 'file' && !data.fileUrl) {
      return NextResponse.json(
        { success: false, error: '–§–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ç–∏–ø–∞ "file"' },
        { status: 400 }
      )
    }

    if (data.type === 'link' && (!data.linkUrl || data.linkUrl.trim() === '')) {
      return NextResponse.json(
        { success: false, error: '–°—Å—ã–ª–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è —Ç–∏–ø–∞ "link"' },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º highlights
    const highlightsValidation = validateHighlights(data.highlights || [])
    if (!highlightsValidation.valid) {
      return NextResponse.json(
        { success: false, error: highlightsValidation.error },
        { status: 400 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ slugs –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    const existingSlugs = await prisma.leadMagnet.findMany({
      where: { 
        specialistProfileId: session.specialistProfile!.id,
        slug: { not: null }
      },
      select: { slug: true }
    })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π slug
    const slug = generateSlug(
      data.title,
      existingSlugs.map(lm => lm.slug).filter(Boolean) as string[]
    )

    // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π order
    const maxOrder = await prisma.leadMagnet.findFirst({
      where: { specialistProfileId: session.specialistProfile!.id },
      orderBy: { order: 'desc' },
      select: { order: true }
    })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–æ–µ
    if (!previewUrls) {
      console.log('[Lead Magnet] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –ø—Ä–µ–≤—å—é')
      try {
        const fallbackResult = await generateFallbackPreview({
          type: data.type as 'file' | 'link' | 'service',
          emoji: data.emoji
        })

        const uploadResult = await uploadFallbackPreview(fallbackResult.buffer, '')
        previewUrls = {
          thumbnail: uploadResult.thumbnail,
          card: uploadResult.card,
          detail: uploadResult.detail
        }
        console.log('[Lead Magnet] Fallback –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ')
      } catch (error) {
        console.error('[Lead Magnet] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback –ø—Ä–µ–≤—å—é:', error)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–µ–≤—å—é
      }
    }

    const leadMagnet = await prisma.leadMagnet.create({
      data: {
        specialistProfileId: session.specialistProfile!.id,
        type: data.type,
        title: data.title,
        description: data.description,
        fileUrl: data.fileUrl,
        linkUrl: data.linkUrl,
        emoji: data.emoji,
        order: (maxOrder?.order || 0) + 1,
        // –ù–æ–≤—ã–µ –ø–æ–ª—è
        slug,
        highlights: highlightsValidation.sanitized,
        targetAudience: data.targetAudience,
        fileSize: fileSize,
        ogImage: data.ogImage,
        // –ü—Ä–µ–≤—å—é
        previewUrls: previewUrls ? (previewUrls as any) : null,
      }
    })

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const specialistProfile = await prisma.specialistProfile.findUnique({
      where: { id: session.specialistProfile!.id },
      select: { slug: true }
    })
    if (specialistProfile) {
      await revalidateSpecialistProfile(specialistProfile.slug)
    }

    return NextResponse.json({ success: true, leadMagnet })

  } catch (error) {
    console.error('[API/lead-magnets/POST] –û—à–∏–±–∫–∞:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', details: error.issues },
        { status: 400 }
      )
    }

    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}

