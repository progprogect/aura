/**
 * Dashboard —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
 */

import { redirect } from 'next/navigation'
import { cookies } from 'next/headers'
import { prisma } from '@/lib/db'
import { DashboardStats } from '@/components/specialist/dashboard/DashboardStats'
import { ProfileCompletionCard } from '@/components/specialist/dashboard/ProfileCompletionCard'
import { QuickActions } from '@/components/specialist/dashboard/QuickActions'

export const metadata = {
  title: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç | –ê—É—Ä–∞',
  description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞',
  robots: 'noindex, nofollow',
}

async function getDashboardData() {
  const cookieStore = await cookies()
  const sessionToken = cookieStore.get('session_token')?.value

  if (!sessionToken) {
    return null
  }

  // –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î –≤–º–µ—Å—Ç–æ fetch (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
  const authSession = await prisma.authSession.findFirst({
    where: {
      sessionToken,
      expiresAt: { gt: new Date() },
      isActive: true
    },
    include: {
      user: {
        include: {
          specialistProfile: true
        }
      }
    }
  })

  if (!authSession || !authSession.user.specialistProfile) {
    return null
  }

  const user = authSession.user
  const profile = user.specialistProfile

  if (!profile) {
    return null
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
  const fullProfile = await prisma.specialistProfile.findUnique({
    where: { id: profile.id },
    include: {
      education: true,
      certificates: true,
      gallery: true,
      faqs: true,
      leadMagnets: {
        where: { isActive: true }
      },
    }
  })

  if (!fullProfile) {
    return null
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
  const specialist = {
    id: fullProfile.id,
    firstName: user.firstName,
    lastName: user.lastName,
    avatar: user.avatar,
    slug: fullProfile.slug,
    category: fullProfile.category,
    specializations: fullProfile.specializations,
    verified: fullProfile.verified,
    profileViews: fullProfile.profileViews,
    contactViews: fullProfile.contactViews,
    acceptingClients: fullProfile.acceptingClients,
    tagline: fullProfile.tagline,
    about: fullProfile.about,
    city: fullProfile.city,
    email: user.email,
    priceFrom: fullProfile.priceFrom,
    priceTo: fullProfile.priceTo,
    yearsOfPractice: fullProfile.yearsOfPractice,
    videoUrl: fullProfile.videoUrl,
    education: fullProfile.education,
    certificates: fullProfile.certificates,
    gallery: fullProfile.gallery,
    faqs: fullProfile.faqs,
    leadMagnets: fullProfile.leadMagnets,
  }

  // –ü–æ–¥—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
  const completionFields = {
    firstName: specialist.firstName ? 1 : 0,
    lastName: specialist.lastName ? 1 : 0,
    about: specialist.about ? 1 : 0,
    specializations: specialist.specializations.length > 0 ? 1 : 0,
    avatar: specialist.avatar ? 15 : 0,
    tagline: specialist.tagline ? 5 : 0,
    city: specialist.city ? 5 : 0,
    email: specialist.email ? 5 : 0,
    prices: (specialist.priceFrom || specialist.priceTo) ? 10 : 0,
    yearsOfPractice: specialist.yearsOfPractice ? 5 : 0,
    education: specialist.education.length > 0 ? 15 : 0,
    certificates: specialist.certificates.length > 0 ? 20 : 0,
    gallery: specialist.gallery.length > 0 ? 10 : 0,
    faqs: specialist.faqs.length > 0 ? 5 : 0,
    video: specialist.videoUrl ? 10 : 0,
    leadMagnets: specialist.leadMagnets.length > 0 ? 10 : 0,
  }

  const baseCompletion = 20
  const additionalCompletion = Object.values(completionFields).reduce((sum, val) => sum + val, 0) - 4
  const completionPercentage = Math.min(100, baseCompletion + additionalCompletion)

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é
  const consultationRequestsCount = await prisma.consultationRequest.count({
    where: {
      specialistProfileId: specialist.id,
      createdAt: {
        gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
      }
    }
  })

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö (–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö) –∑–∞—è–≤–æ–∫
  const newRequestsCount = await prisma.consultationRequest.count({
    where: {
      specialistProfileId: specialist.id,
      status: 'new'
    }
  })

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è
  const tasks = []
  
  if (!specialist.avatar) {
    tasks.push({
      id: 'avatar',
      title: '–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è',
      description: '–ü—Ä–æ—Ñ–∏–ª—å —Å —Ñ–æ—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –±–æ–ª—å—à–µ –¥–æ–≤–µ—Ä–∏—è',
      bonus: 15,
      completed: false
    })
  }
  
  if (specialist.certificates.length === 0) {
    tasks.push({
      id: 'certificates',
      title: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã',
      description: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é',
      bonus: 20,
      completed: false
    })
  }
  
  if (specialist.education.length === 0) {
    tasks.push({
      id: 'education',
      title: '–î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      description: '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      bonus: 15,
      completed: false
    })
  }
  
  if (specialist.gallery.length === 0) {
    tasks.push({
      id: 'gallery',
      title: '–°–æ–∑–¥–∞–π—Ç–µ –≥–∞–ª–µ—Ä–µ—é',
      description: '–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–±–æ—Ç—ã',
      bonus: 10,
      completed: false
    })
  }
  
  if (!specialist.priceFrom && !specialist.priceTo) {
    tasks.push({
      id: 'pricing',
      title: '–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—ã',
      description: '–ö–ª–∏–µ–Ω—Ç–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞—Ä–∞–Ω–µ–µ',
      bonus: 10,
      completed: false
    })
  }

  if (!specialist.videoUrl) {
    tasks.push({
      id: 'video',
      title: '–î–æ–±–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é',
      description: '–í–∏–¥–µ–æ –ø–æ–º–æ–≥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–∞–º–∏',
      bonus: 10,
      completed: false
    })
  }

  if (specialist.leadMagnets.length === 0) {
    tasks.push({
      id: 'leadMagnets',
      title: '–°–æ–∑–¥–∞–π—Ç–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç—ã',
      description: '–ü—Ä–∏–≤–ª–µ–∫–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏',
      bonus: 10,
      completed: false
    })
  }

  return {
    success: true,
    specialist: {
      id: specialist.id,
      firstName: specialist.firstName,
      lastName: specialist.lastName,
      avatar: specialist.avatar,
      slug: specialist.slug,
      category: specialist.category,
      specializations: specialist.specializations,
      verified: specialist.verified,
      acceptingClients: specialist.acceptingClients,
      about: specialist.about,
    },
    stats: {
      profileViews: specialist.profileViews,
      contactViews: specialist.contactViews,
      consultationRequests: consultationRequestsCount,
      completionPercentage,
    },
    newRequestsCount,
    tasks
  }
}

export default async function DashboardPage() {
  const data = await getDashboardData()

  // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Üí –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
  if (!data || !data.success) {
    redirect('/auth/login')
  }

  const { specialist, stats, tasks, newRequestsCount } = data

  // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ‚Üí –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (firstName, lastName, about)
  if (!specialist.firstName || !specialist.lastName || !specialist.about || specialist.about.trim() === '') {
    redirect('/specialist/onboarding')
  }

  const fullName = `${specialist.firstName} ${specialist.lastName}`

  return (
    <div className="min-h-screen bg-gray-50">
      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ */}
        <div className="mb-8">
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900 mb-2">
            üëã –ü—Ä–∏–≤–µ—Ç, {specialist.firstName}!
          </h1>
          <p className="text-sm md:text-base text-gray-600">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
          </p>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="mb-6">
          <DashboardStats
            profileViews={stats.profileViews}
            contactViews={stats.contactViews}
            consultationRequests={stats.consultationRequests}
          />
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (2/3 –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ) */}
          <div className="lg:col-span-2 space-y-6">
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Ñ–∏–ª—è */}
            <ProfileCompletionCard
              completionPercentage={stats.completionPercentage}
              tasks={tasks}
            />
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (1/3 –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ) */}
          <div className="space-y-6">
            {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
            <QuickActions 
              slug={specialist.slug}
              newRequestsCount={newRequestsCount}
            />
          </div>
        </div>
      </div>
    </div>
  )
}

