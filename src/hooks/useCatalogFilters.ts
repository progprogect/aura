/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
 * 
 * Features:
 * - –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å URL
 * - Batch updates (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è = 1 URL update)
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
 * - Reset —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
 * - –ü–æ–¥—Å—á—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
 */

'use client'

import { useCallback, useMemo } from 'react'
import { useURLString, useURLBoolean, useURLArray } from './useURLState'
import { FilterState } from '@/lib/catalog/types'
import {
  FILTER_DEFAULTS,
  DEBOUNCE_DELAYS,
} from '@/lib/catalog/constants'
import { countActiveFilters, resetFilters as createResetFilters } from '@/lib/catalog/utils'

// ========================================
// –¢–ò–ü–´
// ========================================

interface UseCatalogFiltersReturn {
  /** –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */
  filters: FilterState
  
  /** –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ */
  setters: {
    setCategory: (value: string) => void
    setExperience: (value: string) => void
    setFormat: (value: string[]) => void
    setVerified: (value: boolean) => void
    setSortBy: (value: string) => void
    setSearch: (value: string) => void
  }
  
  /** Batch update - –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞ —Ä–∞–∑ */
  updateFilters: (updates: Partial<FilterState>) => void
  
  /** –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
  resetFilters: () => void
  
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ */
  activeFiltersCount: number
  
  /** –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ */
  hasActiveFilters: boolean
}

// ========================================
// –•–£–ö
// ========================================

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
 * 
 * @example
 * const { filters, setters, updateFilters, resetFilters, activeFiltersCount } = useCatalogFilters()
 * 
 * // –û–±–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä
 * setters.setCategory('psychology')
 * 
 * // –û–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞ —Ä–∞–∑ (batch)
 * updateFilters({
 *   category: 'psychology',
 *   verified: true,
 *   format: ['online']
 * })
 * 
 * // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
 * resetFilters()
 */
export function useCatalogFilters(): UseCatalogFiltersReturn {
  // URL —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [category, setCategory] = useURLString('category', FILTER_DEFAULTS.CATEGORY)
  const [experience, setExperience] = useURLString('experience', FILTER_DEFAULTS.EXPERIENCE)
  const [format, setFormat] = useURLArray('format', FILTER_DEFAULTS.FORMAT)
  const [verified, setVerified] = useURLBoolean('verified', FILTER_DEFAULTS.VERIFIED)
  const [sortBy, setSortBy] = useURLString('sortBy', FILTER_DEFAULTS.SORT_BY)
  const [search, setSearch] = useURLString(
    'search',
    FILTER_DEFAULTS.SEARCH
    // Debounce —É–±—Ä–∞–Ω - –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ Enter/–∫–Ω–æ–ø–∫–µ
  )

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const filters = useMemo<FilterState>(
    () => ({
      category,
      experience,
      format,
      verified,
      sortBy,
      search,
    }),
    [category, experience, format, verified, sortBy, search]
  )

  // Setters –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const setters = useMemo(
    () => ({
      setCategory,
      setExperience,
      setFormat,
      setVerified,
      setSortBy,
      setSearch,
    }),
    [setCategory, setExperience, setFormat, setVerified, setSortBy, setSearch]
  )

  // Batch update –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const updateFilters = useCallback(
    (updates: Partial<FilterState>) => {
      console.log('üü¢ updateFilters called with:', updates)
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞ —Ä–∞–∑
      // –ö–∞–∂–¥—ã–π setter –æ–±–Ω–æ–≤–ª—è–µ—Ç URL –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ, –Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è debounce
      // –æ–Ω–∏ –æ–±—ä–µ–¥–∏–Ω—è—Ç—Å—è –≤ –æ–¥–∏–Ω history entry
      if (updates.category !== undefined) {
        console.log('  ‚Üí Setting category:', updates.category)
        setCategory(updates.category)
      }
      if (updates.experience !== undefined) {
        console.log('  ‚Üí Setting experience:', updates.experience)
        setExperience(updates.experience)
      }
      if (updates.format !== undefined) {
        console.log('  ‚Üí Setting format:', updates.format)
        setFormat(updates.format)
      }
      if (updates.verified !== undefined) {
        console.log('  ‚Üí Setting verified:', updates.verified)
        setVerified(updates.verified)
      }
      if (updates.sortBy !== undefined) {
        console.log('  ‚Üí Setting sortBy:', updates.sortBy)
        setSortBy(updates.sortBy)
      }
      if (updates.search !== undefined) {
        console.log('  ‚Üí Setting search:', updates.search)
        setSearch(updates.search)
      }
      
      console.log('‚úÖ All setters called')
    },
    [setCategory, setExperience, setFormat, setVerified, setSortBy, setSearch]
  )

  // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const resetAllFilters = useCallback(() => {
    const defaults = createResetFilters()
    updateFilters(defaults)
  }, [updateFilters])

  // –ü–æ–¥—Å—á—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const activeFiltersCount = useMemo(() => {
    return countActiveFilters(filters)
  }, [filters])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const hasActiveFilters = useMemo(() => {
    return activeFiltersCount > 0 || search.trim().length > 0
  }, [activeFiltersCount, search])

  return {
    filters,
    setters,
    updateFilters,
    resetFilters: resetAllFilters,
    activeFiltersCount,
    hasActiveFilters,
  }
}

// useCatalogFilter removed - was not used and could cause hook issues
