/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞–º–∏
 * - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug
 * - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
 * - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ preview
 */

import type { LeadMagnetType, LeadMagnet } from '@/types/lead-magnet'

/**
 * –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
 */
function transliterate(text: string): string {
  const map: Record<string, string> = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
    '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
    '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo',
    '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
    '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
    '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
    '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
  }

  return text
    .split('')
    .map(char => map[char] || char)
    .join('')
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
 */
export function generateSlug(title: string, existingSlugs: string[] = []): string {
  // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
  let slug = transliterate(title)
    .toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '') // –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã
    .replace(/\s+/g, '-') // –ü—Ä–æ–±–µ–ª—ã –≤ –¥–µ—Ñ–∏—Å—ã
    .replace(/-+/g, '-') // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –≤ –æ–¥–∏–Ω
    .replace(/^-|-$/g, '') // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    .substring(0, 50) // –ú–∞–∫—Å 50 —Å–∏–º–≤–æ–ª–æ–≤

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
  if (!existingSlugs.includes(slug)) {
    return slug
  }

  // –ï—Å–ª–∏ slug —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
  let counter = 2
  let newSlug = `${slug}-${counter}`
  
  while (existingSlugs.includes(newSlug)) {
    counter++
    newSlug = `${slug}-${counter}`
  }

  return newSlug
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
 */
export function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 Bytes'

  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))

  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(1))} ${sizes[i]}`
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
 */
export function getMimeTypeFromUrl(url: string): string {
  const extension = url.split('.').pop()?.toLowerCase()
  
  const mimeTypes: Record<string, string> = {
    'pdf': 'application/pdf',
    'doc': 'application/msword',
    'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'xls': 'application/vnd.ms-excel',
    'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'ppt': 'application/vnd.ms-powerpoint',
    'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    'jpg': 'image/jpeg',
    'jpeg': 'image/jpeg',
    'png': 'image/png',
    'gif': 'image/gif',
    'zip': 'application/zip',
    'rar': 'application/x-rar-compressed',
    'txt': 'text/plain',
  }

  return mimeTypes[extension || ''] || 'application/octet-stream'
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
 */
export function getFileIcon(mimeType: string): string {
  if (mimeType.includes('pdf')) return 'üìÑ'
  if (mimeType.includes('word') || mimeType.includes('document')) return 'üìù'
  if (mimeType.includes('excel') || mimeType.includes('sheet')) return 'üìä'
  if (mimeType.includes('powerpoint') || mimeType.includes('presentation')) return 'üìΩÔ∏è'
  if (mimeType.includes('image')) return 'üñºÔ∏è'
  if (mimeType.includes('video')) return 'üé•'
  if (mimeType.includes('zip') || mimeType.includes('rar')) return 'üì¶'
  if (mimeType.includes('text')) return 'üìÉ'
  
  return 'üìÅ'
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å preview –¥–ª—è —ç—Ç–æ–≥–æ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
 */
export function shouldShowPreview(leadMagnet: Pick<LeadMagnet, 'type' | 'fileUrl' | 'linkUrl' | 'ogImage'>): boolean {
  // –î–ª—è —Ñ–∞–π–ª–æ–≤ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º (–∏–∫–æ–Ω–∫–∞ + —Ä–∞–∑–º–µ—Ä)
  if (leadMagnet.type === 'file' && leadMagnet.fileUrl) {
    return true
  }

  // –î–ª—è —Å—Å—ã–ª–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å OG image
  if (leadMagnet.type === 'link' && leadMagnet.ogImage) {
    return true
  }

  // –î–ª—è —É—Å–ª—É–≥ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º preview
  return false
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è preview –±–ª–æ–∫–∞
 */
export function getPreviewData(leadMagnet: Pick<LeadMagnet, 'type' | 'fileUrl' | 'linkUrl' | 'ogImage' | 'fileSize'>) {
  if (leadMagnet.type === 'file' && leadMagnet.fileUrl) {
    const mimeType = getMimeTypeFromUrl(leadMagnet.fileUrl)
    const icon = getFileIcon(mimeType)
    const fileName = leadMagnet.fileUrl.split('/').pop() || 'file'
    
    return {
      type: 'file' as const,
      icon,
      fileName,
      fileSize: leadMagnet.fileSize || null,
      mimeType,
    }
  }

  if (leadMagnet.type === 'link' && leadMagnet.ogImage) {
    return {
      type: 'link' as const,
      imageUrl: leadMagnet.ogImage,
    }
  }

  return null
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö Open Graph —Ç–µ–≥–æ–≤ –¥–ª—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
 */
export function generateOGTags(
  leadMagnet: Pick<LeadMagnet, 'title' | 'description' | 'type' | 'ogImage' | 'emoji'>,
  specialist: {
    firstName: string
    lastName: string
    avatar?: string | null
  }
) {
  const title = `${leadMagnet.emoji} ${leadMagnet.title} ‚Äî ${specialist.firstName} ${specialist.lastName}`
  const description = leadMagnet.description
  
  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: OG image –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –∏–ª–∏ –∞–≤–∞—Ç–∞—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
  const image = leadMagnet.ogImage || specialist.avatar || '/og-default.png'

  return {
    title,
    description,
    image,
    type: 'website',
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è highlights (–º–∞–∫—Å–∏–º—É–º 5 –ø—É–Ω–∫—Ç–æ–≤)
 */
export function validateHighlights(highlights: string[]): {
  valid: boolean
  error?: string
  sanitized: string[]
} {
  if (highlights.length > 5) {
    return {
      valid: false,
      error: '–ú–∞–∫—Å–∏–º—É–º 5 –ø—É–Ω–∫—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ "–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏"',
      sanitized: highlights.slice(0, 5),
    }
  }

  // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ trim
  const sanitized = highlights
    .map(h => h.trim())
    .filter(h => h.length > 0)

  return {
    valid: true,
    sanitized,
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
 */
export function shouldShowSocialProof(downloadCount: number): boolean {
  return downloadCount > 10
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
 */
export function formatDownloadCount(count: number): string {
  if (count < 1000) return count.toString()
  if (count < 1000000) return `${(count / 1000).toFixed(1)}k`
  return `${(count / 1000000).toFixed(1)}M`
}

