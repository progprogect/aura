/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–≤—å—é –¥–ª—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */

import { 
  detectContentFromUrl, 
  detectContentFromFileExtension, 
  getVideoThumbnailUrl, 
  getEmbedUrl, 
  getPlatformColor,
  type ContentInfo,
  type Platform 
} from './content-detector'

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
export const CONTENT_ICONS = {
  // –í–∏–¥–µ–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  youtube: 'üì∫',
  vimeo: 'üé¨',
  dailymotion: 'üé•',
  twitch: 'üéÆ',
  
  // –î–æ–∫—É–º–µ–Ω—Ç—ã
  document: 'üìÑ',
  'google-docs': 'üìù',
  'office-online': 'üìä',
  notion: 'üìã',
  figma: 'üé®',
  
  // –ú–µ–¥–∏–∞
  image: 'üñºÔ∏è',
  video: 'üé¨',
  audio: 'üéµ',
  soundcloud: 'üéß',
  spotify: 'üé∂',
  
  // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ
  social: 'üì±',
  instagram: 'üì∏',
  twitter: 'üê¶',
  linkedin: 'üíº',
  
  // –§–∞–π–ª—ã
  archive: 'üì¶',
  text: 'üìÉ',
  presentation: 'üìä',
  spreadsheet: 'üìà',
  pdf: 'üìï',
  
  // Fallback
  unknown: 'üìé'
}

// –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
export const CONTENT_GRADIENTS = {
  video: 'from-red-500 to-red-600',
  document: 'from-blue-500 to-blue-600',
  image: 'from-green-500 to-green-600',
  audio: 'from-purple-500 to-purple-600',
  archive: 'from-orange-500 to-orange-600',
  text: 'from-gray-500 to-gray-600',
  presentation: 'from-yellow-500 to-yellow-600',
  spreadsheet: 'from-emerald-500 to-emerald-600',
  social: 'from-pink-500 to-pink-600',
  unknown: 'from-gray-400 to-gray-500'
}

export interface PreviewData {
  type: string
  platform?: Platform
  icon: string
  gradient: string
  thumbnailUrl?: string
  embedUrl?: string
  platformColor?: string
  isEmbeddable: boolean
  label: string
  extension?: string  // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ (.pdf, .doc, –∏ —Ç.–¥.)
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é –¥–ª—è —Å—Å—ã–ª–∫–∏
 */
export function generateLinkPreview(linkUrl: string, ogImage?: string): PreviewData {
  const contentInfo = detectContentFromUrl(linkUrl)
  
  // –î–ª—è –≤–∏–¥–µ–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º
  if (contentInfo.type === 'video' && contentInfo.platform && contentInfo.id) {
    const thumbnailUrl = getVideoThumbnailUrl(contentInfo.platform, contentInfo.id)
    const embedUrl = getEmbedUrl(contentInfo.platform, contentInfo.id)
    const platformColor = getPlatformColor(contentInfo.platform)
    
    return {
      type: 'video',
      platform: contentInfo.platform,
      icon: CONTENT_ICONS[contentInfo.platform] || CONTENT_ICONS.video,
      gradient: CONTENT_GRADIENTS.video,
      thumbnailUrl: thumbnailUrl || undefined,
      embedUrl: embedUrl || undefined,
      platformColor,
      isEmbeddable: true,
      label: getPlatformLabel(contentInfo.platform)
    }
  }
  
  // –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º
  if (contentInfo.type === 'document' && contentInfo.platform) {
    const embedUrl = getEmbedUrl(contentInfo.platform, contentInfo.id || '')
    const platformColor = getPlatformColor(contentInfo.platform)
    
    return {
      type: 'document',
      platform: contentInfo.platform,
      icon: CONTENT_ICONS[contentInfo.platform] || CONTENT_ICONS.document,
      gradient: CONTENT_GRADIENTS.document,
      embedUrl: embedUrl || undefined,
      platformColor,
      isEmbeddable: true,
      label: getPlatformLabel(contentInfo.platform)
    }
  }
  
  // –î–ª—è –∞—É–¥–∏–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º
  if (contentInfo.type === 'audio' && contentInfo.platform) {
    const embedUrl = getEmbedUrl(contentInfo.platform, contentInfo.id || '')
    const platformColor = getPlatformColor(contentInfo.platform)
    
    return {
      type: 'audio',
      platform: contentInfo.platform,
      icon: CONTENT_ICONS[contentInfo.platform] || CONTENT_ICONS.audio,
      gradient: CONTENT_GRADIENTS.audio,
      embedUrl: embedUrl || undefined,
      platformColor,
      isEmbeddable: true,
      label: getPlatformLabel(contentInfo.platform)
    }
  }
  
  // –î–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
  if (contentInfo.type === 'social' && contentInfo.platform) {
    const embedUrl = getEmbedUrl(contentInfo.platform, contentInfo.id || '')
    const platformColor = getPlatformColor(contentInfo.platform)
    
    return {
      type: 'social',
      platform: contentInfo.platform,
      icon: CONTENT_ICONS[contentInfo.platform] || CONTENT_ICONS.social,
      gradient: CONTENT_GRADIENTS.social,
      embedUrl: embedUrl || undefined,
      platformColor,
      isEmbeddable: true,
      label: getPlatformLabel(contentInfo.platform)
    }
  }
  
  // –î–ª—è –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (contentInfo.type === 'image') {
    return {
      type: 'image',
      icon: CONTENT_ICONS.image,
      gradient: CONTENT_GRADIENTS.image,
      thumbnailUrl: linkUrl,
      isEmbeddable: false,
      label: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
    }
  }
  
  // Fallback –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
  if (ogImage) {
    return {
      type: 'link',
      icon: CONTENT_ICONS.unknown,
      gradient: CONTENT_GRADIENTS.unknown,
      thumbnailUrl: ogImage,
      isEmbeddable: false,
      label: '–°—Å—ã–ª–∫–∞'
    }
  }
  
  // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
  return {
    type: 'unknown',
    icon: CONTENT_ICONS.unknown,
    gradient: CONTENT_GRADIENTS.unknown,
    isEmbeddable: false,
    label: '–°—Å—ã–ª–∫–∞'
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é –¥–ª—è —Ñ–∞–π–ª–∞
 */
export function generateFilePreview(fileUrl: string, filename?: string): PreviewData {
  const contentInfo = detectContentFromFileExtension(filename || fileUrl)
  
  switch (contentInfo.type) {
    case 'image':
      return {
        type: 'image',
        icon: CONTENT_ICONS.image,
        gradient: CONTENT_GRADIENTS.image,
        thumbnailUrl: fileUrl,
        isEmbeddable: false,
        label: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
      }
      
    case 'video':
      return {
        type: 'video',
        icon: CONTENT_ICONS.video,
        gradient: CONTENT_GRADIENTS.video,
        isEmbeddable: true,
        label: '–í–∏–¥–µ–æ'
      }
      
    case 'audio':
      return {
        type: 'audio',
        icon: CONTENT_ICONS.audio,
        gradient: CONTENT_GRADIENTS.audio,
        isEmbeddable: true,
        label: '–ê—É–¥–∏–æ'
      }
      
    case 'document':
      return {
        type: 'document',
        icon: contentInfo.extension === '.pdf' ? CONTENT_ICONS.pdf : CONTENT_ICONS.document,
        gradient: contentInfo.extension === '.pdf' ? CONTENT_GRADIENTS.document : CONTENT_GRADIENTS.document,
        isEmbeddable: true,
        label: getFileLabel(contentInfo.extension || ''),
        extension: contentInfo.extension  // –î–æ–±–∞–≤–ª—è–µ–º extension –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è PDF
      }
      
    case 'presentation':
      return {
        type: 'presentation',
        icon: CONTENT_ICONS.presentation,
        gradient: CONTENT_GRADIENTS.presentation,
        isEmbeddable: true,
        label: '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è'
      }
      
    case 'spreadsheet':
      return {
        type: 'spreadsheet',
        icon: CONTENT_ICONS.spreadsheet,
        gradient: CONTENT_GRADIENTS.spreadsheet,
        isEmbeddable: true,
        label: '–¢–∞–±–ª–∏—Ü–∞'
      }
      
    case 'archive':
      return {
        type: 'archive',
        icon: CONTENT_ICONS.archive,
        gradient: CONTENT_GRADIENTS.archive,
        isEmbeddable: false,
        label: '–ê—Ä—Ö–∏–≤'
      }
      
    case 'text':
      return {
        type: 'text',
        icon: CONTENT_ICONS.text,
        gradient: CONTENT_GRADIENTS.text,
        isEmbeddable: true,
        label: '–¢–µ–∫—Å—Ç'
      }
      
    default:
      return {
        type: 'unknown',
        icon: CONTENT_ICONS.unknown,
        gradient: CONTENT_GRADIENTS.unknown,
        isEmbeddable: false,
        label: '–§–∞–π–ª'
      }
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 */
function getPlatformLabel(platform: Platform): string {
  const labels: Record<Platform, string> = {
    youtube: 'YouTube',
    vimeo: 'Vimeo',
    dailymotion: 'Dailymotion',
    twitch: 'Twitch',
    'google-docs': 'Google Docs',
    'office-online': 'Office Online',
    notion: 'Notion',
    figma: 'Figma',
    soundcloud: 'SoundCloud',
    spotify: 'Spotify',
    instagram: 'Instagram',
    twitter: 'Twitter',
    linkedin: 'LinkedIn',
    unknown: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  }
  
  return labels[platform] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
 */
function getFileLabel(extension: string): string {
  const labels: Record<string, string> = {
    '.pdf': 'PDF',
    '.doc': 'Word',
    '.docx': 'Word',
    '.ppt': 'PowerPoint',
    '.pptx': 'PowerPoint',
    '.xls': 'Excel',
    '.xlsx': 'Excel',
    '.txt': '–¢–µ–∫—Å—Ç',
    '.rtf': 'RTF',
    '.csv': 'CSV',
    '.json': 'JSON',
    '.xml': 'XML',
    '.md': 'Markdown'
  }
  
  return labels[extension.toLowerCase()] || '–î–æ–∫—É–º–µ–Ω—Ç'
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ
 */
export function isEmbeddable(platform: Platform): boolean {
  const embeddablePlatforms: Platform[] = [
    'youtube', 'vimeo', 'dailymotion', 'twitch',
    'google-docs', 'office-online', 'notion', 'figma',
    'soundcloud', 'spotify',
    'instagram', 'twitter', 'linkedin'
  ]
  
  return embeddablePlatforms.includes(platform)
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π aspect ratio –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
export function getAspectRatio(type: string, platform?: Platform): string {
  if (type === 'video') {
    return 'aspect-video' // 16:9 –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ
  }
  
  if (type === 'image') {
    return 'aspect-auto' // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  }
  
  if (type === 'document' && platform === 'figma') {
    return 'aspect-[16/10]' // –®–∏—Ä–æ–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Figma
  }
  
  if (type === 'document' || type === 'presentation' || type === 'spreadsheet') {
    return 'aspect-[4/3]' // 4:3 –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  }
  
  if (type === 'audio' || type === 'social') {
    return 'aspect-[16/9]' // 16:9 –¥–ª—è –∞—É–¥–∏–æ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö
  }
  
  return 'aspect-[4/3]' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–µ–≤—å—é —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
 */
export function getPreviewStyles(type: string, platform?: Platform): {
  aspectRatio: string
  maxHeight?: string
  objectFit?: string
} {
  const aspectRatio = getAspectRatio(type, platform)
  
  if (type === 'image') {
    return {
      aspectRatio: 'auto',
      maxHeight: '500px', // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      objectFit: 'contain'
    }
  }
  
  if (type === 'video') {
    return {
      aspectRatio: '16/9',
      objectFit: 'cover'
    }
  }
  
  return {
    aspectRatio: aspectRatio.replace('aspect-', '').replace(/\[|\]/g, ''),
    objectFit: 'cover'
  }
}
