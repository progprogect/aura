/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤ —Ç–∏–ø–∞ "—Å–µ—Ä–≤–∏—Å"
 * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */

import { createCanvas, registerFont } from 'canvas'
import type { LeadMagnet } from '@/types/lead-magnet'

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
 */
export async function generateServiceCardImage(
  leadMagnet: Pick<LeadMagnet, 'title' | 'description' | 'emoji' | 'highlights'>
): Promise<Buffer> {
  // –†–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç–æ—á–∫–∏
  const width = 800
  const height = 600

  // –°–æ–∑–¥–∞–µ–º canvas
  const canvas = createCanvas(width, height)
  const ctx = canvas.getContext('2d')

  // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω (–∑–µ–ª–µ–Ω—ã–π –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤)
  const gradient = ctx.createLinearGradient(0, 0, width, height)
  gradient.addColorStop(0, '#10B981') // emerald-500
  gradient.addColorStop(1, '#059669') // emerald-600

  ctx.fillStyle = gradient
  ctx.fillRect(0, 0, width, height)

  // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
  ctx.fillStyle = '#FFFFFF'
  ctx.textAlign = 'center'

  // Emoji (–±–æ–ª—å—à–æ–π)
  ctx.font = 'bold 120px Arial'
  ctx.fillText(leadMagnet.emoji || 'üíº', width / 2, 180)

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  ctx.font = 'bold 48px Arial'
  const title = leadMagnet.title.length > 30 
    ? leadMagnet.title.substring(0, 27) + '...' 
    : leadMagnet.title
  ctx.fillText(title, width / 2, 280)

  // –û–ø–∏—Å–∞–Ω–∏–µ
  ctx.font = '28px Arial'
  ctx.globalAlpha = 0.9
  const description = leadMagnet.description.length > 60
    ? leadMagnet.description.substring(0, 57) + '...'
    : leadMagnet.description
  ctx.fillText(description, width / 2, 340)

  // –ü–µ—Ä–≤—ã–π highlight (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (leadMagnet.highlights && leadMagnet.highlights.length > 0) {
    ctx.font = '24px Arial'
    ctx.globalAlpha = 0.8
    const highlight = leadMagnet.highlights[0].length > 50
      ? leadMagnet.highlights[0].substring(0, 47) + '...'
      : leadMagnet.highlights[0]
    ctx.fillText(`‚úì ${highlight}`, width / 2, 420)
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–µ–π–¥–∂ "–£—Å–ª—É–≥–∞"
  ctx.globalAlpha = 0.3
  ctx.fillStyle = '#FFFFFF'
  ctx.fillRect(width / 2 - 80, 480, 160, 50)
  
  ctx.globalAlpha = 1
  ctx.fillStyle = '#10B981'
  ctx.font = 'bold 24px Arial'
  ctx.fillText('–£–°–õ–£–ì–ê', width / 2, 515)

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG Buffer
  return canvas.toBuffer('image/png')
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ (–º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä)
 */
export async function generateServiceCardPreview(
  leadMagnet: Pick<LeadMagnet, 'title' | 'description' | 'emoji' | 'highlights'>
): Promise<Buffer> {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
  const fullImage = await generateServiceCardImage(leadMagnet)
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —á–µ—Ä–µ–∑ sharp
  const sharp = (await import('sharp')).default
  return await sharp(fullImage)
    .resize(400, 300, { fit: 'cover' })
    .webp({ quality: 85 })
    .toBuffer()
}

