/**
 * –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —É–º–Ω–æ–≥–æ AI-—á–∞—Ç–∞
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ª–æ–≥–∏—á–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
 */

export interface DialogStage {
  currentStage: 'personal_data' | 'details_clarification' | 'search_ready'
  suggestedQuestions: string[]
  logicReasoning: string
  missingInfo: string[]
  nextAction: 'continue_questions' | 'start_search' | 'need_more_info'
}

export interface DialogContext {
  messages: any[]
  extractedParams: any
  userType?: 'rookie' | 'experienced' | 'rushing' | 'detailed'
  complexity?: 'simple' | 'medium' | 'complex'
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
 */
export function analyzeDialogContext(
  messages: any[],
  extractedParams: any
): DialogStage {
  console.log('[DialogAnalyzer] Analyzing dialog context...')
  console.log('[DialogAnalyzer] Messages count:', messages.length)
  console.log('[DialogAnalyzer] Extracted params:', JSON.stringify(extractedParams, null, 2))

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞
  const hasPersonalData = extractedParams.personalProfile?.gender && extractedParams.personalProfile?.age
  const hasProblem = extractedParams.problem && extractedParams.problem.length > 3
  const hasCategory = extractedParams.category
  const hasWorkFormat = extractedParams.workFormats && extractedParams.workFormats.length > 0

  console.log('[DialogAnalyzer] Has personal data:', hasPersonalData)
  console.log('[DialogAnalyzer] Has problem:', hasProblem)
  console.log('[DialogAnalyzer] Has category:', hasCategory)
  console.log('[DialogAnalyzer] Has work format:', hasWorkFormat)

  // –≠—Ç–∞–ø 1: –°–±–æ—Ä –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!hasPersonalData) {
    return {
      currentStage: 'personal_data',
      suggestedQuestions: ['–í–∞—à –ø–æ–ª?', '–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç?', '–ï—Å—Ç—å –ª–∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏?'],
      logicReasoning: '–ù—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏',
      missingInfo: ['gender', 'age', 'experience'],
      nextAction: 'continue_questions'
    }
  }

  // –≠—Ç–∞–ø 2: –ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
  if (hasPersonalData && !hasProblem) {
    return {
      currentStage: 'details_clarification',
      suggestedQuestions: ['–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ —Ü–µ–ª–∏?', '–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?'],
      logicReasoning: '–ù—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞',
      missingInfo: ['problem', 'category'],
      nextAction: 'continue_questions'
    }
  }

  // –≠—Ç–∞–ø 3: –£—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –ø–æ–¥–±–æ—Ä–∞
  if (hasPersonalData && hasProblem && hasCategory) {
    const suggestions: string[] = []
    const missingInfo: string[] = []

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ –µ—â—ë –ª–æ–≥–∏—á–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å
    if (hasWorkFormat) {
      // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –µ—â—ë –Ω—É–∂–Ω–æ
      
      if (extractedParams.workFormats.includes('offline') && !extractedParams.city) {
        suggestions.push('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?')
        missingInfo.push('city')
      }
      
      if (extractedParams.workFormats.includes('online') && !extractedParams.timezone) {
        suggestions.push('–í –∫–∞–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?')
        missingInfo.push('timezone')
      }
    } else {
      // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
      suggestions.push('–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã —É–¥–æ–±–Ω–µ–µ?')
      missingInfo.push('work_format')
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—è
    const category = extractedParams.category
    const profile = extractedParams.personalProfile

    if (category === 'psychology') {
      if (!extractedParams.preferences?.methods) {
        suggestions.push('–ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –º–µ—Ç–æ–¥–∞–º —Ä–∞–±–æ—Ç—ã? –ù–∞–ø—Ä–∏–º–µ—Ä, –ö–ü–¢, –≥–µ—à—Ç–∞–ª—å—Ç, –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑?')
        missingInfo.push('therapy_methods')
      }
      
      if (profile?.experience === 'none' && !extractedParams.preferences?.specialistGender) {
        suggestions.push('–ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–æ–ª—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞?')
        missingInfo.push('specialist_gender')
      }
    }

    if (category === 'fitness') {
      if (!extractedParams.goals) {
        suggestions.push('–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å? –ü–æ—Ö—É–¥–µ–Ω–∏–µ, –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã, –æ–±—â–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞?')
        missingInfo.push('fitness_goals')
      }
      
      if (profile?.experience === 'none' && !extractedParams.preferences?.trainingType) {
        suggestions.push('–ö–∞–∫–æ–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? –°–∏–ª–æ–≤—ã–µ, –∫–∞—Ä–¥–∏–æ, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ?')
        missingInfo.push('training_type')
      }
    }

    if (category === 'nutrition') {
      if (!extractedParams.goals) {
        suggestions.push('–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å? –ü–æ—Ö—É–¥–µ–Ω–∏–µ, –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã, –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ?')
        missingInfo.push('nutrition_goals')
      }
      
      if (!extractedParams.healthConditions) {
        suggestions.push('–ï—Å—Ç—å –ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å?')
        missingInfo.push('health_conditions')
      }
    }

    if (category === 'massage') {
      if (!extractedParams.problemType) {
        suggestions.push('–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç? –ë–æ–ª—å –≤ —Å–ø–∏–Ω–µ, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –æ–±—â–µ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ?')
        missingInfo.push('massage_type')
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ –∫ –ø–æ–∏—Å–∫—É
    if (suggestions.length === 0) {
      return {
        currentStage: 'search_ready',
        suggestedQuestions: [],
        logicReasoning: '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤',
        missingInfo: [],
        nextAction: 'start_search'
      }
    }

    return {
      currentStage: 'details_clarification',
      suggestedQuestions: suggestions,
      logicReasoning: `–ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è: ${missingInfo.join(', ')}`,
      missingInfo,
      nextAction: 'continue_questions'
    }
  }

  // Fallback: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Ç–æ—á–Ω—è—Ç—å –¥–µ—Ç–∞–ª–∏
  return {
    currentStage: 'details_clarification',
    suggestedQuestions: ['–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ —Ü–µ–ª–∏?'],
    logicReasoning: '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞',
    missingInfo: ['more_details'],
    nextAction: 'continue_questions'
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞
 */
export function analyzeUserType(messages: any[], extractedParams: any): 'rookie' | 'experienced' | 'rushing' | 'detailed' {
  const messageCount = messages.length
  const hasLongMessages = messages.some(m => m.content && m.content.length > 100)
  const hasRushingKeywords = messages.some(m => 
    m.content && (
      m.content.toLowerCase().includes('–±—ã—Å—Ç—Ä–æ') ||
      m.content.toLowerCase().includes('—Å—Ä–æ—á–Ω–æ') ||
      m.content.toLowerCase().includes('—Å–∫–æ—Ä–µ–µ') ||
      m.content.toLowerCase().includes('–ø–æ—Å–∫–æ—Ä–µ–µ')
    )
  )
  const experience = extractedParams.personalProfile?.experience

  if (hasRushingKeywords) return 'rushing'
  if (experience === 'none') return 'rookie'
  if (messageCount > 15 || hasLongMessages) return 'detailed'
  return 'experienced'
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
 */
export function analyzeComplexity(messages: any[], extractedParams: any): 'simple' | 'medium' | 'complex' {
  const problemLength = extractedParams.problem?.length || 0
  const messageCount = messages.length
  const hasMultipleIssues = extractedParams.problem && (
    extractedParams.problem.includes('–∏') ||
    extractedParams.problem.includes(',') ||
    extractedParams.problem.includes('–ø–ª—é—Å')
  )

  if (problemLength > 100 || messageCount > 12 || hasMultipleIssues) return 'complex'
  if (problemLength > 50 || messageCount > 8) return 'medium'
  return 'simple'
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
 */
export function generateContextualHints(
  extractedParams: any,
  userType: string,
  complexity: string
): string[] {
  const hints: string[] = []
  const profile = extractedParams.personalProfile
  const category = extractedParams.category

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –ø–æ–ª—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (profile?.gender === 'female' && category === 'psychology') {
    hints.push('üë© –ñ–µ–Ω—â–∏–Ω–∞–º —á–∞—Å—Ç–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ —Å –∂–µ–Ω—â–∏–Ω–∞–º–∏-–ø—Å–∏—Ö–æ–ª–æ–≥–∞–º–∏')
  }

  if (profile?.gender === 'male' && category === 'fitness') {
    hints.push('üí™ –ú—É–∂—á–∏–Ω–∞–º –æ–±—ã—á–Ω–æ –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥—è—Ç —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
  }

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
  if (profile?.age === 'young') {
    hints.push('ü•ó –ú–æ–ª–æ–¥—ã–º –ª—é–¥—è–º –ø–æ–¥—Ö–æ–¥—è—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã')
  }

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –æ–ø—ã—Ç—É
  if (profile?.experience === 'none') {
    hints.push('üå± –ù–æ–≤–∏—á–∫–∞–º –≤–∞–∂–Ω—ã —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã')
  } else if (profile?.experience === 'regular') {
    hints.push('üßò –û–ø—ã—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω—É–∂–Ω—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã')
  }

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  if (complexity === 'complex') {
    hints.push('üìã –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–ø—ã—Ç–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤')
  }

  return hints
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤ –ª–∏ –¥–∏–∞–ª–æ–≥ –∫ –ø–æ–∏—Å–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
 */
export function isReadyForSearch(extractedParams: any): boolean {
  const hasPersonalData = extractedParams.personalProfile?.gender && extractedParams.personalProfile?.age
  const hasProblem = extractedParams.problem && extractedParams.problem.length > 3
  const hasCategory = extractedParams.category
  const hasWorkFormat = extractedParams.workFormats && extractedParams.workFormats.length > 0

  return hasPersonalData && hasProblem && hasCategory && hasWorkFormat
}
