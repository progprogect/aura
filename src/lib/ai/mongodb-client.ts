/**
 * MongoDB –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å embeddings
 */

import { MongoClient, Db, Collection } from 'mongodb'

// –ò—Å–ø–æ–ª—å–∑—É–µ–º MONGO_URL (Railway internal) –∏–ª–∏ MONGODB_URL (fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)
const MONGODB_URL = process.env.MONGO_URL || process.env.MONGODB_URL
const DB_NAME = 'aura'
const COLLECTION_NAME = 'specialist_embeddings'

let client: MongoClient | null = null
let db: Db | null = null

/**
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
 */
async function connect(): Promise<Db> {
  if (db) return db

  if (!MONGODB_URL) {
    throw new Error('MONGO_URL or MONGODB_URL is not set in environment variables')
  }

  if (!client) {
    client = new MongoClient(MONGODB_URL)
    await client.connect()
    console.log('[MongoDB] Connected successfully')
  }

  db = client.db(DB_NAME)
  return db
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é embeddings
 */
export async function getEmbeddingsCollection(): Promise<Collection> {
  const database = await connect()
  return database.collection(COLLECTION_NAME)
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è embedding –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
export interface EmbeddingDocument {
  specialistId: string
  embedding: number[]
  sourceText: string
  modelVersion: string
  createdAt: Date
  updatedAt: Date
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å embedding
 */
export async function saveEmbedding(
  specialistId: string,
  embedding: number[],
  sourceText: string,
  modelVersion: string
): Promise<void> {
  const collection = await getEmbeddingsCollection()

  await collection.updateOne(
    { specialistId },
    {
      $set: {
        specialistId,
        embedding,
        sourceText,
        modelVersion,
        updatedAt: new Date(),
      },
      $setOnInsert: {
        createdAt: new Date(),
      },
    },
    { upsert: true }
  )
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å embedding –ø–æ specialistId
 */
export async function getEmbedding(specialistId: string): Promise<EmbeddingDocument | null> {
  const collection = await getEmbeddingsCollection()
  return await collection.findOne({ specialistId }) as EmbeddingDocument | null
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ embeddings
 */
export async function getAllEmbeddings(): Promise<EmbeddingDocument[]> {
  const collection = await getEmbeddingsCollection()
  const results = await collection.find({}).toArray()
  return results as unknown as EmbeddingDocument[]
}

/**
 * –£–¥–∞–ª–∏—Ç—å embedding
 */
export async function deleteEmbedding(specialistId: string): Promise<void> {
  const collection = await getEmbeddingsCollection()
  await collection.deleteOne({ specialistId })
}

/**
 * –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ embeddings
 */
export async function countEmbeddings(): Promise<number> {
  const collection = await getEmbeddingsCollection()
  return await collection.countDocuments()
}

/**
 * –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å –¥–ª—è specialistId (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞)
 */
export async function createIndexes(): Promise<void> {
  const collection = await getEmbeddingsCollection()
  await collection.createIndex({ specialistId: 1 }, { unique: true })
  console.log('[MongoDB] Indexes created')
}

/**
 * Cosine similarity –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ–∫—Ç–æ—Ä–∞–º–∏
 */
export function cosineSimilarity(vecA: number[], vecB: number[]): number {
  if (vecA.length !== vecB.length) {
    throw new Error('Vectors must have the same length')
  }

  let dotProduct = 0
  let normA = 0
  let normB = 0

  for (let i = 0; i < vecA.length; i++) {
    dotProduct += vecA[i] * vecB[i]
    normA += vecA[i] * vecA[i]
    normB += vecB[i] * vecB[i]
  }

  const magnitude = Math.sqrt(normA) * Math.sqrt(normB)

  if (magnitude === 0) {
    return 0
  }

  return dotProduct / magnitude
}

/**
 * –ù–∞–π—Ç–∏ —Ç–æ–ø-N –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏—Ö embeddings
 */
export async function findSimilarEmbeddings(
  queryEmbedding: number[],
  limit: number = 20,
  excludeIds: string[] = []
): Promise<Array<{ specialistId: string; similarity: number }>> {
  try {
    const collection = await getEmbeddingsCollection()

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ embeddings (–¥–ª—è <10k –∑–∞–ø–∏—Å–µ–π —ç—Ç–æ –±—ã—Å—Ç—Ä–æ)
    const filter = excludeIds.length > 0 ? { specialistId: { $nin: excludeIds } } : {}
    const results = await collection.find(filter).toArray()
    const allEmbeddings = results as unknown as EmbeddingDocument[]

    console.log(`[MongoDB] üìä Embeddings in collection: ${allEmbeddings.length}`)
    console.log(`[MongoDB] üö´ Excluded IDs: ${excludeIds.length}`)

    if (allEmbeddings.length === 0) {
      console.warn('[MongoDB] ‚ö†Ô∏è No embeddings found in collection! Did you run npm run ai:generate-embeddings?')
      return []
    }

    // –í—ã—á–∏—Å–ª—è–µ–º cosine similarity –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
    const similarities = allEmbeddings.map((doc) => ({
      specialistId: doc.specialistId,
      similarity: cosineSimilarity(queryEmbedding, doc.embedding),
    }))

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é similarity
    similarities.sort((a, b) => b.similarity - a.similarity)

    console.log(`[MongoDB] üéØ Top 3 similarities:`, similarities.slice(0, 3).map(s => ({ id: s.specialistId.substring(0, 8), similarity: s.similarity.toFixed(3) })))

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-N
    return similarities.slice(0, limit)
  } catch (error) {
    console.error('[MongoDB] ‚ùå Error in findSimilarEmbeddings:', error)
    throw error
  }
}

/**
 * –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
 */
export async function disconnect(): Promise<void> {
  if (client) {
    await client.close()
    client = null
    db = null
    console.log('[MongoDB] Disconnected')
  }
}

