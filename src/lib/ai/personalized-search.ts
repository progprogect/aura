/**
 * –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
 * –†–∞–Ω–∂–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

import { PersonalProfile } from './personal-questions-generator'
import { calculatePersonalizationScore, generatePersonalizedExplanation } from './contextual-analyzer'
import { CategoryKey } from '@/config/app'

export interface RankedSpecialist {
  id: string
  firstName: string
  lastName: string
  avatar?: string
  slug: string
  category: string
  specializations: string[]
  tagline?: string
  yearsOfPractice?: number
  workFormats: string[]
  city?: string
  priceFrom?: number
  priceTo?: number
  verified: boolean
  personalizationScore: number
  matchReasons: string[]
  personalizedExplanation: string
  distance?: number
  similarity?: number
}

export interface PersonalizedSearchParams {
  query: string
  category?: CategoryKey
  workFormats?: string[]
  city?: string
  maxPrice?: number
  minExperience?: number
  personalProfile: PersonalProfile
  limit?: number
  excludeIds?: string[]
}

/**
 * –†–∞–Ω–∂–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
 */
export function rankSpecialistsByPersonalization(
  specialists: any[],
  personalProfile: PersonalProfile,
  category: CategoryKey,
  extractedParams: any
): RankedSpecialist[] {
  return specialists.map(specialist => {
    // –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π score
    const personalizationScore = calculatePersonalizationScore(specialist, personalProfile, category)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    const personalizedExplanation = generatePersonalizedExplanation(specialist, personalProfile, category)
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const matchReasons = generateMatchReasons(specialist, personalProfile, extractedParams)
    
    // –í—ã—á–∏—Å–ª—è–µ–º similarity –µ—Å–ª–∏ –µ—Å—Ç—å distance
    const similarity = specialist.distance !== undefined ? Math.round((1 - specialist.distance) * 100) : null
    
    return {
      id: specialist.id,
      firstName: specialist.firstName,
      lastName: specialist.lastName,
      avatar: specialist.avatar,
      slug: specialist.slug,
      category: specialist.category,
      specializations: specialist.specializations,
      tagline: specialist.tagline,
      yearsOfPractice: specialist.yearsOfPractice,
      workFormats: specialist.workFormats,
      city: specialist.city,
      priceFrom: specialist.priceFrom,
      priceTo: specialist.priceTo,
      verified: specialist.verified,
      personalizationScore: personalizationScore.overall,
      matchReasons,
      personalizedExplanation,
      distance: specialist.distance,
      similarity
    }
  }).sort((a, b) => {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É score (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç), –∑–∞—Ç–µ–º –ø–æ similarity
    if (b.personalizationScore !== a.personalizationScore) {
      return b.personalizationScore - a.personalizationScore
    }
    
    if (b.similarity && a.similarity) {
      return b.similarity - a.similarity
    }
    
    return 0
  })
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
 */
function generateMatchReasons(
  specialist: any,
  personalProfile: PersonalProfile,
  extractedParams: any
): string[] {
  const reasons: string[] = []
  
  // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (extractedParams.category) {
    reasons.push(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${getCategoryName(extractedParams.category)}`)
  }
  
  // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º
  if (specialist.specializations && specialist.specializations.length > 0) {
    reasons.push(`–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${specialist.specializations.slice(0, 3).join(', ')}`)
  }
  
  // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É —Ä–∞–±–æ—Ç—ã
  if (extractedParams.workFormats && extractedParams.workFormats.length > 0) {
    const formats = extractedParams.workFormats.map(f => f === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω').join(', ')
    reasons.push(`–§–æ—Ä–º–∞—Ç: ${formats}`)
  }
  
  // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥—É
  if (specialist.city && extractedParams.city) {
    reasons.push(`–ì–æ—Ä–æ–¥: ${specialist.city}`)
  }
  
  // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  if (personalProfile.gender === 'male' && extractedParams.category === 'fitness') {
    reasons.push('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –º—É–∂—á–∏–Ω–∞–º–∏')
  } else if (personalProfile.gender === 'female' && extractedParams.category === 'psychology') {
    reasons.push('–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∂–µ–Ω—â–∏–Ω–∞–º–∏')
  }
  
  // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –æ–ø—ã—Ç—É
  if (specialist.yearsOfPractice && extractedParams.minExperience) {
    if (specialist.yearsOfPractice >= extractedParams.minExperience) {
      reasons.push(`–û–ø—ã—Ç: ${specialist.yearsOfPractice} –ª–µ—Ç`)
    }
  }
  
  // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (personalProfile.age === 'young' && specialist.yearsOfPractice && specialist.yearsOfPractice < 10) {
    reasons.push('–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –¥–ª—è –º–æ–ª–æ–¥—ã—Ö')
  } else if (personalProfile.age === 'mature' && specialist.yearsOfPractice && specialist.yearsOfPractice > 10) {
    reasons.push('–û–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–ª—è –∑—Ä–µ–ª—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤')
  }
  
  return reasons
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
 */
export function generatePersonalizedSearchExplanation(
  specialists: RankedSpecialist[],
  personalProfile: PersonalProfile,
  category: CategoryKey
): string {
  if (specialists.length === 0) {
    return '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
  }
  
  const topSpecialist = specialists[0]
  const explanations: string[] = []
  
  // –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–ø–æ–≤–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
  explanations.push(`–ü–æ–¥–æ–±—Ä–∞–ª ${specialists.length} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç${specialists.length > 1 ? '–æ–≤' : '–∞'} —Å —É—á—ë—Ç–æ–º –≤–∞—à–∏—Ö –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.`)
  
  // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (personalProfile.gender === 'male' && category === 'fitness') {
    explanations.push('üí™ –£—á–∏—Ç—ã–≤–∞–ª, —á—Ç–æ –º—É–∂—á–∏–Ω–∞–º –æ–±—ã—á–Ω–æ –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥—è—Ç —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.')
  } else if (personalProfile.gender === 'female' && category === 'psychology') {
    explanations.push('üë© –£—á–∏—Ç—ã–≤–∞–ª, —á—Ç–æ –∂–µ–Ω—â–∏–Ω–∞–º —á–∞—Å—Ç–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ —Å –∂–µ–Ω—â–∏–Ω–∞–º–∏-–ø—Å–∏—Ö–æ–ª–æ–≥–∞–º–∏.')
  }
  
  if (personalProfile.age === 'young') {
    explanations.push('ü•ó –ü–æ–¥–±–∏—Ä–∞–ª —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏.')
  } else if (personalProfile.age === 'mature') {
    explanations.push('üß† –í—ã–±–∏—Ä–∞–ª –æ–ø—ã—Ç–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–µ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π.')
  }
  
  if (personalProfile.experience === 'none') {
    explanations.push('üåü –£—á–∏—Ç—ã–≤–∞–ª, —á—Ç–æ –≤–∞–º –Ω—É–∂–µ–Ω —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.')
  }
  
  return explanations.join(' ')
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function getCategoryName(key: string): string {
  const categories: Record<string, string> = {
    psychology: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ —Ç–µ—Ä–∞–ø–∏—è',
    fitness: '–§–∏—Ç–Ω–µ—Å –∏ —Å–ø–æ—Ä—Ç',
    nutrition: '–ü–∏—Ç–∞–Ω–∏–µ –∏ –¥–∏–µ—Ç–æ–ª–æ–≥–∏—è',
    massage: '–ú–∞—Å—Å–∞–∂ –∏ —Ç–µ–ª–µ—Å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏',
    coaching: '–ö–æ—É—á–∏–Ω–≥ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ',
    medicine: '–ú–µ–¥–∏—Ü–∏–Ω–∞',
  }
  return categories[key] || key
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
 */
export function analyzePersonalizationQuality(
  specialists: RankedSpecialist[],
  personalProfile: PersonalProfile
): {
  averagePersonalizationScore: number
  qualityLevel: 'low' | 'medium' | 'high'
  recommendations: string[]
} {
  if (specialists.length === 0) {
    return {
      averagePersonalizationScore: 0,
      qualityLevel: 'low',
      recommendations: ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞']
    }
  }
  
  const averageScore = specialists.reduce((sum, s) => sum + s.personalizationScore, 0) / specialists.length
  
  let qualityLevel: 'low' | 'medium' | 'high'
  let recommendations: string[] = []
  
  if (averageScore >= 80) {
    qualityLevel = 'high'
    recommendations = ['–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—á–∏—Ç—ã–≤–∞—é—Ç –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.']
  } else if (averageScore >= 60) {
    qualityLevel = 'medium'
    recommendations = [
      '–•–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ. –ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–¥–±–æ—Ä–∞.',
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–æ–ª—É –∏–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.'
    ]
  } else {
    qualityLevel = 'low'
    recommendations = [
      '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.',
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–±—Ä–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –æ–ø—ã—Ç—É –∏–ª–∏ —Ü–µ–Ω–µ.',
      '–£–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–¥–±–æ—Ä–∞.'
    ]
  }
  
  return {
    averagePersonalizationScore: Math.round(averageScore),
    qualityLevel,
    recommendations
  }
}
