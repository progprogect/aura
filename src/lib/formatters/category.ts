/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
 */

import { CategoryConfig, CategoryMap } from '@/lib/catalog/types'

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param key - –ö–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param categories - Map –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ –º–∞—Å—Å–∏–≤
 * @returns –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∫–ª—é—á –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
 * 
 * @example
 * getCategoryLabel('psychology', categoriesMap) // "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ —Ç–µ—Ä–∞–ø–∏—è"
 */
export function getCategoryLabel(
  key: string,
  categories: CategoryMap | CategoryConfig[]
): string {
  if (categories instanceof Map) {
    return categories.get(key)?.name || key
  }
  
  const category = categories.find((c) => c.key === key)
  return category?.name || key
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param key - –ö–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param categories - Map –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ –º–∞—Å—Å–∏–≤
 * @returns –≠–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
 * 
 * @example
 * getCategoryEmoji('psychology', categoriesMap) // "üß†"
 */
export function getCategoryEmoji(
  key: string,
  categories: CategoryMap | CategoryConfig[]
): string {
  if (categories instanceof Map) {
    return categories.get(key)?.emoji || 'üë®‚Äç‚öïÔ∏è'
  }
  
  const category = categories.find((c) => c.key === key)
  return category?.emoji || 'üë®‚Äç‚öïÔ∏è'
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è UI (–≥—Ä–∞–¥–∏–µ–Ω—Ç—ã)
 * @param key - –ö–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @returns Tailwind –∫–ª–∞—Å—Å—ã –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
 * 
 * @example
 * getCategoryColor('psychology') // "from-purple-50 to-blue-100"
 */
export function getCategoryColor(key: string): string {
  const colorMap: Record<string, string> = {
    psychology: 'from-purple-50 to-blue-100',
    fitness: 'from-orange-50 to-red-100',
    nutrition: 'from-green-50 to-emerald-100',
    massage: 'from-pink-50 to-rose-100',
    wellness: 'from-cyan-50 to-teal-100',
    coaching: 'from-indigo-50 to-violet-100',
    medicine: 'from-blue-50 to-sky-100',
    other: 'from-gray-50 to-slate-100',
  }
  
  return colorMap[key] || colorMap.other
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ Map –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
 * @param categories - –ú–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 * @returns Map —Å –∫–ª—é—á–æ–º category.key
 */
export function createCategoryMap(categories: CategoryConfig[]): CategoryMap {
  return new Map(categories.map((cat) => [cat.key, cat]))
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 * @param categories - –ú–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 * @returns –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ order
 */
export function getActiveCategories(
  categories: CategoryConfig[]
): CategoryConfig[] {
  return categories
    .filter((cat) => cat.isActive)
    .sort((a, b) => a.order - b.order)
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (fallback)
 * @param key - –ö–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @returns –ß–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
 * 
 * @example
 * formatCategoryKey('psychology') // "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è"
 * formatCategoryKey('fitness') // "–§–∏—Ç–Ω–µ—Å"
 */
export function formatCategoryKey(key: string): string {
  const namesMap: Record<string, string> = {
    psychology: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è',
    fitness: '–§–∏—Ç–Ω–µ—Å',
    nutrition: '–ü–∏—Ç–∞–Ω–∏–µ',
    massage: '–ú–∞—Å—Å–∞–∂',
    wellness: '–í–µ–ª–Ω–µ—Å',
    coaching: '–ö–æ—É—á–∏–Ω–≥',
    medicine: '–ú–µ–¥–∏—Ü–∏–Ω–∞',
    other: '–î—Ä—É–≥–æ–µ',
  }
  
  return namesMap[key] || key
}

