/**
 * –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SMS —Å–µ—Ä–≤–∏—Å
 */

import { SMSVerificationService } from './business-logic'
import { normalizePhone, generateSMSCode, debugLog } from './utils'
import { AUTH_CONFIG } from './config'
import type { SMSRequest, SMSVerificationRequest } from './types'

// ========================================
// –û–¢–ü–†–ê–í–ö–ê SMS
// ========================================

export async function sendSMS(request: SMSRequest): Promise<{ success: boolean; error?: string; code?: string }> {
  try {
    debugLog('–û—Ç–ø—Ä–∞–≤–∫–∞ SMS', { phone: request.phone, purpose: request.purpose })
    
    const normalizedPhone = normalizePhone(request.phone)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
    const code = generateSMSCode()
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑—É
    await SMSVerificationService.saveVerificationCode(normalizedPhone, code, request.purpose)
    
    // –£–ü–†–û–©–Å–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –í—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ SMS
    console.log(`\nüîê SMS –ö–û–î –¥–ª—è ${normalizedPhone}: ${code}\n`)
    console.log(`üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è ${request.purpose === 'login' ? '–≤—Ö–æ–¥–∞' : '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'}\n`)
    
    return {
      success: true,
      code // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ UI
    }
    
  } catch (error) {
    debugLog('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS', error)
    return {
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS'
    }
  }
}

// ========================================
// –ü–†–û–í–ï–†–ö–ê SMS –ö–û–î–ê
// ========================================

export async function verifySMSCode(request: SMSVerificationRequest): Promise<{
  success: boolean
  error?: string
  verificationId?: string
}> {
  try {
    debugLog('–ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞', { phone: request.phone })
    
    const result = await SMSVerificationService.verifyCode(
      request.phone,
      request.code,
      request.purpose
    )
    
    return result
    
  } catch (error) {
    debugLog('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SMS –∫–æ–¥–∞', error)
    return {
      success: false,
      error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞'
    }
  }
}

// ========================================
// –û–¢–ü–†–ê–í–ö–ê –¢–ï–°–¢–û–í–û–ì–û SMS
// ========================================

async function sendTestSMS(phone: string, code: string): Promise<{ success: boolean; error?: string }> {
  // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–¥
  console.log(`[TEST SMS] –ö–æ–¥ –¥–ª—è ${phone}: ${code}`)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞
  const testPhones = AUTH_CONFIG.testMode.testPhones as Record<string, string>
  const testCode = testPhones[phone]
  
  if (testCode) {
    console.log(`[TEST SMS] –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥: ${testCode}`)
  }
  
  debugLog('–¢–µ—Å—Ç–æ–≤—ã–π SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', { phone, code })
  
  return {
    success: true
  }
}

// ========================================
// –û–¢–ü–†–ê–í–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û SMS
// ========================================

async function sendRealSMS(phone: string, code: string): Promise<{ success: boolean; error?: string }> {
  const provider = AUTH_CONFIG.sms.provider
  
  switch (provider) {
    case 'smsru':
      return await sendSMSViaSMSRu(phone, code)
    case 'twilio':
      return await sendSMSViaTwilio(phone, code)
    default:
      debugLog('SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', { provider })
      return {
        success: false,
        error: 'SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      }
  }
}

// ========================================
// SMS.RU –ü–†–û–í–ê–ô–î–ï–†
// ========================================

async function sendSMSViaSMSRu(phone: string, code: string): Promise<{ success: boolean; error?: string }> {
  try {
    const apiId = AUTH_CONFIG.sms.smsRuApiId
    
    if (!apiId) {
      throw new Error('SMS.ru API ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
    }
    
    const message = `–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ê—É—Ä–∞: ${code}. –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.`
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ SMS.ru API
    // const response = await fetch(`https://sms.ru/sms/send?api_id=${apiId}&to=${phone}&msg=${encodeURIComponent(message)}`)
    // const result = await response.json()
    
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.log(`[SMS.RU] –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ ${phone}: ${message}`)
    
    debugLog('SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ SMS.ru', { phone })
    
    return {
      success: true
    }
    
  } catch (error) {
    debugLog('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ SMS.ru', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —á–µ—Ä–µ–∑ SMS.ru'
    }
  }
}

// ========================================
// TWILIO –ü–†–û–í–ê–ô–î–ï–†
// ========================================

async function sendSMSViaTwilio(phone: string, code: string): Promise<{ success: boolean; error?: string }> {
  try {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Twilio
    // const twilio = require('twilio')
    // const client = twilio(accountSid, authToken)
    
    console.log(`[TWILIO] –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ ${phone}: –∫–æ–¥ ${code}`)
    
    debugLog('SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Twilio', { phone })
    
    return {
      success: true
    }
    
  } catch (error) {
    debugLog('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Twilio', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —á–µ—Ä–µ–∑ Twilio'
    }
  }
}
