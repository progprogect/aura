/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cloudinary –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
 */

import { v2 as cloudinary } from 'cloudinary'

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
  secure: true
})

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Cloudinary
 */
export function isCloudinaryConfigured(): boolean {
  return !!(
    process.env.CLOUDINARY_CLOUD_NAME &&
    process.env.CLOUDINARY_API_KEY &&
    process.env.CLOUDINARY_API_SECRET
  )
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Cloudinary
 * @param base64Image - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64 –∏–ª–∏ buffer
 * @param folder - –ø–∞–ø–∫–∞ –≤ Cloudinary (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'avatars', 'certificates', 'gallery')
 * @param publicId - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
export async function uploadImage(
  base64Image: string,
  folder: string,
  publicId?: string
): Promise<{ url: string; publicId: string }> {
  if (!isCloudinaryConfigured()) {
    throw new Error('Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.')
  }

  try {
    const result = await cloudinary.uploader.upload(base64Image, {
      folder: `aura/${folder}`,
      public_id: publicId,
      transformation: [
        { quality: 'auto:good' },
        { fetch_format: 'auto' }
      ],
      overwrite: true,
      invalidate: true
    })

    return {
      url: result.secure_url,
      publicId: result.public_id
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary:', error)
    throw error
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Cloudinary (–±–µ–∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π)
 * @param base64File - —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
 * @param folder - –ø–∞–ø–∫–∞ –≤ Cloudinary (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'lead-magnets', 'documents')
 * @param publicId - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
export async function uploadDocument(
  base64File: string,
  folder: string,
  publicId?: string
): Promise<{ url: string; publicId: string }> {
  if (!isCloudinaryConfigured()) {
    throw new Error('Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.')
  }

  try {
    const result = await cloudinary.uploader.upload(base64File, {
      folder: `aura/${folder}`,
      public_id: publicId,
      resource_type: 'raw', // üî¥ –ö–†–ò–¢–ò–ß–ù–û: –¥–ª—è PDF –∏ –¥—Ä—É–≥–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      type: 'upload', // –ü—É–±–ª–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      // –ë–ï–ó —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
      overwrite: true,
      invalidate: true
    })

    return {
      url: result.secure_url,
      publicId: result.public_id
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Cloudinary:', error)
    throw error
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ PDF —Ñ–∞–π–ª–∞ –≤ Cloudinary
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è PDF —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
 * @param base64File - PDF —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
 * @param folder - –ø–∞–ø–∫–∞ –≤ Cloudinary
 * @param publicId - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
export async function uploadPDF(
  base64File: string,
  folder: string,
  publicId?: string
): Promise<{ url: string; publicId: string }> {
  if (!isCloudinaryConfigured()) {
    throw new Error('Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.')
  }

  try {
    const result = await cloudinary.uploader.upload(base64File, {
      folder: `aura/${folder}`,
      public_id: publicId,
      resource_type: 'raw', // –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è PDF
      type: 'upload', // –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
      access_mode: 'public', // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
      overwrite: true,
      invalidate: true
    })

    return {
      url: result.secure_url,
      publicId: result.public_id
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF –≤ Cloudinary:', error)
    throw error
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–µ–∑–∞–µ—Ç –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ –∏ —Ä–µ—Å–∞–π–∑–∏—Ç –¥–æ 400x400
 */
export async function uploadAvatar(
  base64Image: string,
  specialistId: string
): Promise<string> {
  try {
    const result = await cloudinary.uploader.upload(base64Image, {
      folder: 'aura/avatars',
      public_id: `avatar_${specialistId}`,
      transformation: [
        { width: 400, height: 400, crop: 'fill', gravity: 'face' },
        { quality: 'auto:good' },
        { fetch_format: 'auto' }
      ],
      overwrite: true,
      invalidate: true
    })

    return result.secure_url
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error)
    throw error
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Cloudinary
 */
export async function deleteImage(publicId: string): Promise<void> {
  if (!isCloudinaryConfigured()) {
    return
  }

  try {
    await cloudinary.uploader.destroy(publicId)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Cloudinary:', error)
    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É - —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
  }
}

export { cloudinary }

