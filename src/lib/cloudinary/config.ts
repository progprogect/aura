/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cloudinary –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
 */

import { v2 as cloudinary } from 'cloudinary'

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
  secure: true
})

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Cloudinary
 */
export function isCloudinaryConfigured(): boolean {
  return !!(
    process.env.CLOUDINARY_CLOUD_NAME &&
    process.env.CLOUDINARY_API_KEY &&
    process.env.CLOUDINARY_API_SECRET
  )
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Cloudinary
 * @param base64Image - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64 –∏–ª–∏ buffer
 * @param folder - –ø–∞–ø–∫–∞ –≤ Cloudinary (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'avatars', 'certificates', 'gallery')
 * @param publicId - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
export async function uploadImage(
  base64Image: string,
  folder: string,
  publicId?: string
): Promise<{ url: string; publicId: string }> {
  if (!isCloudinaryConfigured()) {
    throw new Error('Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.')
  }

  try {
    const result = await cloudinary.uploader.upload(base64Image, {
      folder: `aura/${folder}`,
      public_id: publicId,
      transformation: [
        { quality: 'auto:good' },
        { fetch_format: 'auto' }
      ],
      overwrite: true,
      invalidate: true
    })

    return {
      url: result.secure_url,
      publicId: result.public_id
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary:', error)
    throw error
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Cloudinary (–±–µ–∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π)
 * @param base64File - —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
 * @param folder - –ø–∞–ø–∫–∞ –≤ Cloudinary (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'lead-magnets', 'documents')
 * @param publicId - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
export async function uploadDocument(
  base64File: string,
  folder: string,
  publicId?: string
): Promise<{ url: string; publicId: string }> {
  if (!isCloudinaryConfigured()) {
    throw new Error('Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.')
  }

  try {
    const result = await cloudinary.uploader.upload(base64File, {
      folder: `aura/${folder}`,
      public_id: publicId,
      resource_type: 'raw', // üî¥ –ö–†–ò–¢–ò–ß–ù–û: –¥–ª—è PDF –∏ –¥—Ä—É–≥–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      type: 'upload', // –ü—É–±–ª–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      access_mode: 'public', // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
      // –ë–ï–ó —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
      overwrite: true,
      invalidate: true
    })

    return {
      url: result.secure_url,
      publicId: result.public_id
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Cloudinary:', error)
    throw error
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ PDF —Ñ–∞–π–ª–∞ –≤ Cloudinary
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è PDF —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
 * @param base64File - PDF —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
 * @param folder - –ø–∞–ø–∫–∞ –≤ Cloudinary
 * @param publicId - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
export async function uploadPDF(
  base64File: string,
  folder: string,
  publicId?: string
): Promise<{ url: string; publicId: string }> {
  if (!isCloudinaryConfigured()) {
    throw new Error('Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.')
  }

  try {
    const result = await cloudinary.uploader.upload(base64File, {
      folder: `aura/${folder}`,
      public_id: publicId,
      resource_type: 'raw', // –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è PDF
      type: 'upload', // –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
      access_mode: 'public', // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
      overwrite: true,
      invalidate: true
    })

    // –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ PDF –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ raw (warning, –Ω–µ throw)
    if (!result.secure_url.includes('/raw/upload/')) {
      console.warn('‚ö†Ô∏è  WARNING: PDF –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º resource_type')
      console.warn('   URL:', result.secure_url)
      console.warn('   –û–∂–∏–¥–∞–µ—Ç—Å—è /raw/upload/ –≤ URL –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞')
    } else {
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: PDF –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ raw resource')
    }

    return {
      url: result.secure_url,
      publicId: result.public_id
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF –≤ Cloudinary:', error)
    throw error
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–µ–∑–∞–µ—Ç –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ –∏ —Ä–µ—Å–∞–π–∑–∏—Ç –¥–æ 400x400
 */
export async function uploadAvatar(
  base64Image: string,
  specialistId: string
): Promise<string> {
  try {
    const result = await cloudinary.uploader.upload(base64Image, {
      folder: 'aura/avatars',
      public_id: `avatar_${specialistId}`,
      transformation: [
        { width: 400, height: 400, crop: 'fill', gravity: 'face' },
        { quality: 'auto:good' },
        { fetch_format: 'auto' }
      ],
      overwrite: true,
      invalidate: true
    })

    return result.secure_url
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error)
    throw error
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é URL –¥–ª—è PDF —á–µ—Ä–µ–∑ Cloudinary —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * Cloudinary –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é –∏–∑ PDF –±–µ–∑ canvas!
 * @param pdfUrl - URL PDF —Ñ–∞–π–ª–∞ –≤ Cloudinary (raw)
 * @param size - —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—å—é (thumbnail/card/detail)
 * @returns URL –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function generatePDFPreviewUrl(
  pdfUrl: string,
  size: 'thumbnail' | 'card' | 'detail' = 'card'
): string {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Cloudinary URL
  if (!pdfUrl.includes('res.cloudinary.com')) {
    console.warn('generatePDFPreviewUrl: –Ω–µ Cloudinary URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π')
    return pdfUrl
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ raw/upload (PDF)
  if (!pdfUrl.includes('/raw/upload/')) {
    console.warn('generatePDFPreviewUrl: –Ω–µ raw resource, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π')
    return pdfUrl
  }

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
  const transformations = {
    thumbnail: 'f_jpg,pg_1,w_400,h_300,c_fit,q_80',  // –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, 400x300
    card: 'f_jpg,pg_1,w_800,h_600,c_fit,q_85',       // –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, 800x600
    detail: 'f_jpg,pg_1,w_1200,h_900,c_fit,q_90'     // –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, 1200x900
  }

  // –ó–∞–º–µ–Ω—è–µ–º /raw/upload/ –Ω–∞ /image/upload/ + –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
  const previewUrl = pdfUrl.replace(
    '/raw/upload/',
    `/image/upload/${transformations[size]}/`
  )

  console.log(`[Cloudinary] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF preview (${size}):`, previewUrl)
  
  return previewUrl
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–µ–≤—å—é –¥–ª—è PDF
 * @param pdfUrl - URL PDF —Ñ–∞–π–ª–∞ –≤ Cloudinary
 * @returns –û–±—ä–µ–∫—Ç —Å URL –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
 */
export function generatePDFPreviewUrls(pdfUrl: string): {
  thumbnail: string
  card: string
  detail: string
} {
  return {
    thumbnail: generatePDFPreviewUrl(pdfUrl, 'thumbnail'),
    card: generatePDFPreviewUrl(pdfUrl, 'card'),
    detail: generatePDFPreviewUrl(pdfUrl, 'detail')
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é –¥–ª—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
 * @param file - Buffer –∏–ª–∏ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param leadMagnetId - ID –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
 * @returns URLs –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–µ–≤—å—é
 */
export async function uploadCustomPreview(
  file: Buffer | string,
  leadMagnetId: string
): Promise<{ thumbnail: string; card: string; detail: string; publicId: string }> {
  if (!isCloudinaryConfigured()) {
    throw new Error('Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.')
  }

  try {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Buffer –≤ base64 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const base64Image = Buffer.isBuffer(file) 
      ? `data:image/png;base64,${file.toString('base64')}`
      : file

    const publicId = `preview_${leadMagnetId}_${Date.now()}`
    
    const result = await cloudinary.uploader.upload(base64Image, {
      folder: 'aura/lead-magnets/custom-previews',
      public_id: publicId,
      transformation: [
        { width: 800, height: 800, crop: 'fill', gravity: 'center' }, // –ö–≤–∞–¥—Ä–∞—Ç
        { quality: 'auto:good' },
        { fetch_format: 'auto' }
      ],
      overwrite: true,
      invalidate: true
    })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º responsive URLs
    const previewUrls = generatePreviewUrlsFromPublicId(result.public_id)

    return {
      ...previewUrls,
      publicId: result.public_id
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é –≤ Cloudinary:', error)
    throw error
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ fallback –ø—Ä–µ–≤—å—é (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ Canvas)
 * @param buffer - Buffer PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param leadMagnetId - ID –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
 * @returns URLs –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–µ–≤—å—é
 */
export async function uploadFallbackPreview(
  buffer: Buffer,
  leadMagnetId: string
): Promise<{ thumbnail: string; card: string; detail: string; publicId: string }> {
  if (!isCloudinaryConfigured()) {
    throw new Error('Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.')
  }

  try {
    const base64Image = `data:image/png;base64,${buffer.toString('base64')}`
    const publicId = `fallback_${leadMagnetId}_${Date.now()}`
    
    const result = await cloudinary.uploader.upload(base64Image, {
      folder: 'aura/lead-magnets/fallback-previews',
      public_id: publicId,
      transformation: [
        { quality: 'auto:good' },
        { fetch_format: 'auto' }
      ],
      overwrite: true,
      invalidate: true
    })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º responsive URLs
    const previewUrls = generatePreviewUrlsFromPublicId(result.public_id)

    return {
      ...previewUrls,
      publicId: result.public_id
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ fallback –ø—Ä–µ–≤—å—é –≤ Cloudinary:', error)
    throw error
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è responsive URLs –∏–∑ publicId
 * @param publicId - Public ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Cloudinary
 * @returns URLs –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
 */
export function generatePreviewUrlsFromPublicId(publicId: string): {
  thumbnail: string
  card: string
  detail: string
} {
  const cloudName = process.env.CLOUDINARY_CLOUD_NAME
  const baseUrl = `https://res.cloudinary.com/${cloudName}/image/upload`

  return {
    thumbnail: `${baseUrl}/w_200,h_200,c_fill,q_80,f_auto/${publicId}`,
    card: `${baseUrl}/w_400,h_400,c_fill,q_85,f_auto/${publicId}`,
    detail: `${baseUrl}/w_800,h_800,c_fill,q_90,f_auto/${publicId}`
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –∏–∑ Cloudinary
 * @param publicId - Public ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export async function deletePreview(publicId: string): Promise<void> {
  if (!isCloudinaryConfigured()) {
    return
  }

  try {
    await cloudinary.uploader.destroy(publicId)
    console.log(`[Cloudinary] –ü—Ä–µ–≤—å—é —É–¥–∞–ª–µ–Ω–æ: ${publicId}`)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é –∏–∑ Cloudinary:', error)
    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É - —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Cloudinary
 */
export async function deleteImage(publicId: string): Promise<void> {
  if (!isCloudinaryConfigured()) {
    return
  }

  try {
    await cloudinary.uploader.destroy(publicId)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Cloudinary:', error)
    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É - —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
  }
}

export { cloudinary }

