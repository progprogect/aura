/**
 * Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
 */

import { Worker, Job } from 'bullmq'
import { redisConnection, isRedisConfigured } from './config'
import { PreviewJobData, GeneratePreviewJobData, BatchGenerateJobData } from './preview-queue'
import { generatePreview } from '../lead-magnets/preview/core/generator'
import { uploadPreviewToCloudinary } from '../lead-magnets/preview/storage/cloudinary.storage'
import { prisma } from '../db'

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é
 */
async function processGeneratePreview(
  job: Job<GeneratePreviewJobData>
): Promise<void> {
  const { leadMagnetId, type, fileUrl, linkUrl, ogImage, title, description, emoji, highlights } = job.data

  console.log(`[Preview Worker] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—å—é –¥–ª—è: ${title}`)
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    await job.updateProgress(10)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
    const result = await generatePreview({
      type,
      fileUrl,
      linkUrl,
      ogImage,
      title,
      description,
      emoji,
      highlights
    })

    await job.updateProgress(40)

    if (!result.success || !result.previewBuffer) {
      throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é')
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Cloudinary —Å responsive —Ä–∞–∑–º–µ—Ä–∞–º–∏
    const uploadResult = await uploadPreviewToCloudinary(
      result.previewBuffer,
      leadMagnetId
    )

    await job.updateProgress(80)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º URLs –≤ –ë–î
    await prisma.leadMagnet.update({
      where: { id: leadMagnetId },
      data: {
        previewUrls: uploadResult.urls as any, // JSON –ø–æ–ª–µ
        previewImage: uploadResult.urls.card, // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      }
    })

    await job.updateProgress(100)

    console.log(`[Preview Worker] ‚úÖ –ü—Ä–µ–≤—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è: ${title}`)
  } catch (error) {
    console.error(`[Preview Worker] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –¥–ª—è ${title}:`, error)
    throw error
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞—Ç—á-–∑–∞–¥–∞—á–∏
 */
async function processBatchGenerate(
  job: Job<BatchGenerateJobData>
): Promise<void> {
  const { leadMagnetIds } = job.data

  console.log(`[Preview Worker] –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ ${leadMagnetIds.length} –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤`)

  let processed = 0
  let errors = 0

  for (const leadMagnetId of leadMagnetIds) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ª–∏–¥-–º–∞–≥–Ω–∏—Ç –∏–∑ –ë–î
      const leadMagnet = await prisma.leadMagnet.findUnique({
        where: { id: leadMagnetId }
      })

      if (!leadMagnet) {
        console.warn(`[Preview Worker] –õ–∏–¥-–º–∞–≥–Ω–∏—Ç ${leadMagnetId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
        errors++
        continue
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
      const result = await generatePreview({
        type: leadMagnet.type as 'file' | 'link' | 'service',
        fileUrl: leadMagnet.fileUrl,
        linkUrl: leadMagnet.linkUrl,
        ogImage: leadMagnet.ogImage,
        title: leadMagnet.title,
        description: leadMagnet.description,
        emoji: leadMagnet.emoji,
        highlights: leadMagnet.highlights
      })

      if (result.success && result.previewBuffer) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Cloudinary
        const uploadResult = await uploadPreviewToCloudinary(
          result.previewBuffer,
          leadMagnetId
        )

        await prisma.leadMagnet.update({
          where: { id: leadMagnetId },
          data: {
            previewUrls: uploadResult.urls as any,
            previewImage: uploadResult.urls.card,
          }
        })

        processed++
      } else {
        errors++
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const progress = Math.floor((processed + errors) / leadMagnetIds.length * 100)
      await job.updateProgress(progress)

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limits
      await new Promise(resolve => setTimeout(resolve, 500))

    } catch (error) {
      console.error(`[Preview Worker] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${leadMagnetId}:`, error)
      errors++
    }
  }

  console.log(`[Preview Worker] –ë–∞—Ç—á –∑–∞–≤–µ—Ä—à—ë–Ω: ${processed} —É—Å–ø–µ—à–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`)
}

/**
 * –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á
 */
async function processJob(job: Job<PreviewJobData>): Promise<void> {
  console.log(`[Preview Worker] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: ${job.name} (${job.id})`)

  switch (job.name) {
    case 'generate-preview':
    case 'regenerate-preview':
      await processGeneratePreview(job as Job<GeneratePreviewJobData>)
      break

    case 'batch-generate':
      await processBatchGenerate(job as Job<BatchGenerateJobData>)
      break

    default:
      console.warn(`[Preview Worker] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: ${job.name}`)
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å worker
 */
export function createPreviewWorker(): Worker<PreviewJobData> | null {
  if (!isRedisConfigured()) {
    console.warn('[Preview Worker] Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, worker –Ω–µ –∑–∞–ø—É—â–µ–Ω')
    return null
  }

  const worker = new Worker<PreviewJobData>(
    'preview-generation',
    processJob,
    {
      connection: redisConnection,
      concurrency: 2, // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 2 –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      removeOnComplete: { count: 100 },
      removeOnFail: { count: 1000 },
    }
  )

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π worker
  worker.on('completed', (job) => {
    console.log(`[Preview Worker] ‚úÖ –ó–∞–¥–∞—á–∞ ${job.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`)
  })

  worker.on('failed', (job, err) => {
    console.error(`[Preview Worker] ‚ùå –ó–∞–¥–∞—á–∞ ${job?.id} –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:`, err)
  })

  worker.on('error', (err) => {
    console.error('[Preview Worker] ‚ùå –û—à–∏–±–∫–∞ worker:', err)
  })

  worker.on('stalled', (jobId) => {
    console.warn(`[Preview Worker] ‚ö†Ô∏è –ó–∞–¥–∞—á–∞ ${jobId} –∑–∞—Å—Ç—Ä—è–ª–∞`)
  })

  console.log('[Preview Worker] üöÄ Worker –∑–∞–ø—É—â–µ–Ω')

  return worker
}

/**
 * Graceful shutdown worker
 */
export async function shutdownWorker(worker: Worker): Promise<void> {
  console.log('[Preview Worker] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ worker...')
  await worker.close()
  console.log('[Preview Worker] Worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
}

