/**
 * –ö–æ–¥—ã —Å—Ç—Ä–∞–Ω –∏ –∏—Ö —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
 */

export interface CountryCode {
  code: string // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "7", "380", "1")
  name: string // –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
  flag: string // –≠–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞
  format: string // –§–æ—Ä–º–∞—Ç –º–∞—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "+7 (###) ###-##-##")
  placeholder: string // –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
  length: number // –û–±—â–∞—è –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞ –≤–∫–ª—é—á–∞—è –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
  nationalFormat?: string // –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
}

export const COUNTRY_CODES: Record<string, CountryCode> = {
  // –†–æ—Å—Å–∏—è –∏ —Å—Ç—Ä–∞–Ω—ã –°–ù–ì
  '7': {
    code: '7',
    name: '–†–æ—Å—Å–∏—è',
    flag: 'üá∑üá∫',
    format: '+7 (###) ###-##-##',
    placeholder: '+7 (999) 123-45-67',
    length: 11,
    nationalFormat: '+7 (###) ###-##-##'
  },
  
  // –£–∫—Ä–∞–∏–Ω–∞
  '380': {
    code: '380',
    name: '–£–∫—Ä–∞–∏–Ω–∞',
    flag: 'üá∫üá¶',
    format: '+380 (##) ###-##-##',
    placeholder: '+380 (99) 123-45-67',
    length: 12,
    nationalFormat: '+380 (##) ###-##-##'
  },
  
  // –ë–µ–ª–∞—Ä—É—Å—å
  '375': {
    code: '375',
    name: '–ë–µ–ª–∞—Ä—É—Å—å',
    flag: 'üáßüáæ',
    format: '+375 (##) ###-##-##',
    placeholder: '+375 (29) 123-45-67',
    length: 12,
    nationalFormat: '+375 (##) ###-##-##'
  },
  
  // –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –∫–æ–¥ 7, —á—Ç–æ –∏ –†–æ—Å—Å–∏—è)
  // –î–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–æ–º–µ—Ä–æ–≤
  // '7-kz': { 
  //   code: '7',
  //   name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
  //   flag: 'üá∞üáø',
  //   format: '+7 (###) ###-##-##',
  //   placeholder: '+7 (700) 123-45-67',
  //   length: 11,
  //   nationalFormat: '+7 (###) ###-##-##'
  // },
  
  // –°–®–ê –∏ –ö–∞–Ω–∞–¥–∞
  '1': {
    code: '1',
    name: '–°–®–ê/–ö–∞–Ω–∞–¥–∞',
    flag: 'üá∫üá∏',
    format: '+1 (###) ###-####',
    placeholder: '+1 (555) 123-4567',
    length: 11,
    nationalFormat: '+1 (###) ###-####'
  },
  
  // –ì–µ—Ä–º–∞–Ω–∏—è
  '49': {
    code: '49',
    name: '–ì–µ—Ä–º–∞–Ω–∏—è',
    flag: 'üá©üá™',
    format: '+49 ### ########',
    placeholder: '+49 30 12345678',
    length: 12,
    nationalFormat: '+49 ### ########'
  },
  
  // –§—Ä–∞–Ω—Ü–∏—è
  '33': {
    code: '33',
    name: '–§—Ä–∞–Ω—Ü–∏—è',
    flag: 'üá´üá∑',
    format: '+33 # ## ## ## ##',
    placeholder: '+33 1 23 45 67 89',
    length: 11,
    nationalFormat: '+33 # ## ## ## ##'
  },
  
  // –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è
  '44': {
    code: '44',
    name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è',
    flag: 'üá¨üáß',
    format: '+44 #### ######',
    placeholder: '+44 20 1234 5678',
    length: 12,
    nationalFormat: '+44 #### ######'
  },
  
  // –ö–∏—Ç–∞–π
  '86': {
    code: '86',
    name: '–ö–∏—Ç–∞–π',
    flag: 'üá®üá≥',
    format: '+86 ### #### ####',
    placeholder: '+86 138 1234 5678',
    length: 13,
    nationalFormat: '+86 ### #### ####'
  },
  
  // –Ø–ø–æ–Ω–∏—è
  '81': {
    code: '81',
    name: '–Ø–ø–æ–Ω–∏—è',
    flag: 'üáØüáµ',
    format: '+81 ##-####-####',
    placeholder: '+81 90-1234-5678',
    length: 12,
    nationalFormat: '+81 ##-####-####'
  },
  
  // –Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è
  '82': {
    code: '82',
    name: '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è',
    flag: 'üá∞üá∑',
    format: '+82 ##-####-####',
    placeholder: '+82 10-1234-5678',
    length: 12,
    nationalFormat: '+82 ##-####-####'
  },
  
  // –ò–Ω–¥–∏—è
  '91': {
    code: '91',
    name: '–ò–Ω–¥–∏—è',
    flag: 'üáÆüá≥',
    format: '+91 ##### #####',
    placeholder: '+91 98765 43210',
    length: 12,
    nationalFormat: '+91 ##### #####'
  },
  
  // –¢—É—Ä—Ü–∏—è
  '90': {
    code: '90',
    name: '–¢—É—Ä—Ü–∏—è',
    flag: 'üáπüá∑',
    format: '+90 ### ### ## ##',
    placeholder: '+90 555 123 45 67',
    length: 12,
    nationalFormat: '+90 ### ### ## ##'
  },
  
  // –ë—Ä–∞–∑–∏–ª–∏—è
  '55': {
    code: '55',
    name: '–ë—Ä–∞–∑–∏–ª–∏—è',
    flag: 'üáßüá∑',
    format: '+55 ## #####-####',
    placeholder: '+55 11 99999-9999',
    length: 13,
    nationalFormat: '+55 ## #####-####'
  },
  
  // –ê–≤—Å—Ç—Ä–∞–ª–∏—è
  '61': {
    code: '61',
    name: '–ê–≤—Å—Ç—Ä–∞–ª–∏—è',
    flag: 'üá¶üá∫',
    format: '+61 ### ### ###',
    placeholder: '+61 412 345 678',
    length: 11,
    nationalFormat: '+61 ### ### ###'
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º —Ü–∏—Ñ—Ä–∞–º
 */
export function detectCountryCode(input: string): CountryCode | null {
  const digits = input.replace(/\D/g, '')
  
  if (!digits) return null
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥—ã —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã (–æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º)
  const possibleCodes = Object.keys(COUNTRY_CODES).sort((a, b) => b.length - a.length)
  
  for (const code of possibleCodes) {
    if (digits.startsWith(code)) {
      return COUNTRY_CODES[code]
    }
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –†–æ—Å—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  return COUNTRY_CODES['7']
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –º–∞—Å–∫–µ —Å—Ç—Ä–∞–Ω—ã
 */
export function formatPhoneNumber(input: string, countryCode?: CountryCode): string {
  const digits = input.replace(/\D/g, '')
  if (!digits) return ''
  
  const country = countryCode || detectCountryCode(digits)
  if (!country) return digits
  
  const format = country.format
  let result = ''
  let digitIndex = 0
  
  for (let i = 0; i < format.length; i++) {
    const char = format[i]
    
    if (char === '#') {
      if (digitIndex < digits.length) {
        result += digits[digitIndex]
        digitIndex++
      } else {
        break
      }
    } else {
      result += char
    }
  }
  
  return result
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
export function normalizePhoneNumber(input: string): string {
  const digits = input.replace(/\D/g, '')
  if (!digits) return ''
  
  const country = detectCountryCode(digits)
  if (!country) return digits
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8 –∏ —ç—Ç–æ –†–æ—Å—Å–∏—è, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
  if (country.code === '7' && digits.startsWith('8')) {
    return '+' + '7' + digits.slice(1)
  }
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º +
  if (digits.startsWith(country.code)) {
    return '+' + digits
  }
  
  // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
  return '+' + country.code + digits
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
 */
export function getPlaceholder(countryCode?: CountryCode): string {
  return countryCode?.placeholder || COUNTRY_CODES['7'].placeholder
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export function validatePhoneNumber(input: string): { isValid: boolean; error?: string } {
  const digits = input.replace(/\D/g, '')
  
  if (!digits) {
    return { isValid: false, error: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }
  }
  
  const country = detectCountryCode(digits)
  if (!country) {
    return { isValid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã' }
  }
  
  if (digits.length < country.length - 1) {
    return { isValid: false, error: `–ù–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è ${country.name}` }
  }
  
  if (digits.length > country.length) {
    return { isValid: false, error: `–ù–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è ${country.name}` }
  }
  
  return { isValid: true }
}
