/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ flow —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */

const BASE_URL = process.env.BASE_URL || 'http://localhost:3000'

async function testRegistrationFlow() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FLOW –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò\n')
  
  const testPhone = `+7${Math.floor(Math.random() * 9000000000 + 1000000000)}`
  console.log(`üì± –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: ${testPhone}`)
  
  try {
    // –®–ê–ì 1: –û—Ç–ø—Ä–∞–≤–∫–∞ SMS
    console.log('\n1Ô∏è‚É£ –û–¢–ü–†–ê–í–ö–ê SMS...')
    const smsResponse = await fetch(`${BASE_URL}/api/auth/send-sms`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ phone: testPhone, purpose: 'registration' })
    })
    
    const smsData = await smsResponse.json()
    console.log('–û—Ç–≤–µ—Ç:', JSON.stringify(smsData, null, 2))
    
    if (!smsData.success) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS:', smsData.error)
      process.exit(1)
    }
    
    const code = smsData.code
    console.log(`‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∫–æ–¥: ${code}`)
    
    // –®–ê–ì 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    console.log('\n2Ô∏è‚É£ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø...')
    const registerResponse = await fetch(`${BASE_URL}/api/auth/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        provider: 'phone', 
        phone: testPhone, 
        code: code 
      })
    })
    
    const registerData = await registerResponse.json()
    console.log('–û—Ç–≤–µ—Ç:', JSON.stringify(registerData, null, 2))
    
    if (!registerData.success) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerData.error)
      process.exit(1)
    }
    
    console.log(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞`)
    console.log(`   Session Token: ${registerData.sessionToken?.substring(0, 20)}...`)
    console.log(`   Specialist ID: ${registerData.specialist?.id}`)
    console.log(`   Is New User: ${registerData.isNewUser}`)
    console.log(`   Requires Profile Completion: ${registerData.requiresProfileCompletion}`)
    
    // –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ API
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–†–û–§–ò–õ–Ø...')
    const cookies = registerResponse.headers.get('set-cookie')
    console.log('Cookies from response:', cookies)
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º session_token –∏–∑ Set-Cookie header
    let sessionToken = registerData.sessionToken
    if (cookies) {
      const match = cookies.match(/session_token=([^;]+)/)
      if (match) {
        sessionToken = match[1]
        console.log('Extracted session_token from cookie:', sessionToken.substring(0, 20) + '...')
      }
    }
    
    const profileResponse = await fetch(`${BASE_URL}/api/auth/profile`, {
      headers: { 
        'Cookie': `session_token=${sessionToken}`
      }
    })
    
    const profileData = await profileResponse.json()
    console.log('–ü—Ä–æ—Ñ–∏–ª—å:', JSON.stringify(profileData, null, 2))
    
    if (!profileData.success) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', profileData.error)
      process.exit(1)
    }
    
    console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω`)
    console.log(`   firstName: ${profileData.profile?.firstName || 'null'}`)
    console.log(`   lastName: ${profileData.profile?.lastName || 'null'}`)
    console.log(`   about: ${profileData.profile?.about || '–ø—É—Å—Ç–æ'}`)
    console.log(`   slug: ${profileData.profile?.slug}`)
    
    // –ê–ù–ê–õ–ò–ó
    console.log('\nüìä –ê–ù–ê–õ–ò–ó FLOW:')
    
    const shouldGoToOnboarding = !profileData.profile?.firstName || 
                                  !profileData.profile?.lastName || 
                                  !profileData.profile?.about || 
                                  profileData.profile?.about.trim() === ''
    
    console.log(`   –î–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥: ${shouldGoToOnboarding}`)
    console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${!profileData.profile?.firstName ? '–Ω–µ—Ç firstName' : ''}${!profileData.profile?.lastName ? ' –Ω–µ—Ç lastName' : ''}${!profileData.profile?.about || profileData.profile?.about.trim() === '' ? ' –Ω–µ—Ç about' : ''}`)
    
    if (shouldGoToOnboarding) {
      console.log('   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –±—É–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /specialist/onboarding')
    } else {
      console.log('   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê - –±—É–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /specialist/dashboard, –Ω–æ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω!')
    }
    
    console.log('\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û')
    
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message)
    console.error(error.stack)
    process.exit(1)
  }
}

testRegistrationFlow()
