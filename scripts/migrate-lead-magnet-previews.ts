/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤
 * –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–≤—å—é –Ω–∞ fallback (emoji + –≥—Ä–∞–¥–∏–µ–Ω—Ç)
 * 
 * Usage:
 *   npx tsx scripts/migrate-lead-magnet-previews.ts --dry-run  # –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–æ–Ω
 *   npx tsx scripts/migrate-lead-magnet-previews.ts            # –†–µ–∞–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
 */

import { prisma } from '../src/lib/db'
import { generateFallbackPreview } from '../src/lib/lead-magnets/fallback-preview-generator'
import { uploadFallbackPreview } from '../src/lib/cloudinary/config'
import type { LeadMagnetType } from '../src/types/lead-magnet'

interface MigrationResult {
  id: string
  title: string
  type: string
  success: boolean
  error?: string
}

async function migrateLeadMagnetPreviews(dryRun: boolean = false) {
  console.log('üîÑ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤')
  console.log(`üìä –†–µ–∂–∏–º: ${dryRun ? 'DRY RUN (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)' : '–†–ï–ê–õ–¨–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø'}`)
  console.log('‚îÄ'.repeat(60))

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç—ã
    const leadMagnets = await prisma.leadMagnet.findMany({
      where: {
        isActive: true
      },
      select: {
        id: true,
        title: true,
        type: true,
        emoji: true,
        previewUrls: true
      }
    })

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤: ${leadMagnets.length}`)
    console.log('‚îÄ'.repeat(60))

    const results: MigrationResult[] = []
    let successCount = 0
    let skipCount = 0
    let errorCount = 0

    for (let i = 0; i < leadMagnets.length; i++) {
      const magnet = leadMagnets[i]
      const progress = `[${i + 1}/${leadMagnets.length}]`

      console.log(`\n${progress} –û–±—Ä–∞–±–æ—Ç–∫–∞: "${magnet.title}"`)
      console.log(`  Type: ${magnet.type}`)
      console.log(`  Emoji: ${magnet.emoji}`)
      console.log(`  Existing previewUrls: ${magnet.previewUrls ? '–î–∞' : '–ù–µ—Ç'}`)

      try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback –ø—Ä–µ–≤—å—é
        console.log(`  üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –ø—Ä–µ–≤—å—é...`)
        const fallbackResult = await generateFallbackPreview({
          type: magnet.type as LeadMagnetType,
          emoji: magnet.emoji
        })

        if (!dryRun) {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Cloudinary
          console.log(`  ‚òÅÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Cloudinary...`)
          const uploadResult = await uploadFallbackPreview(fallbackResult.buffer, magnet.id)

          const previewUrls = {
            thumbnail: uploadResult.thumbnail,
            card: uploadResult.card,
            detail: uploadResult.detail
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
          await prisma.leadMagnet.update({
            where: { id: magnet.id },
            data: { previewUrls: previewUrls as any }
          })

          console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`)
          console.log(`  üîó Preview URLs:`)
          console.log(`     - Card: ${previewUrls.card}`)
          successCount++
        } else {
          console.log(`  ‚úÖ (DRY RUN) –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ`)
          successCount++
        }

        results.push({
          id: magnet.id,
          title: magnet.title,
          type: magnet.type,
          success: true
        })

      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`)
        errorCount++
        results.push({
          id: magnet.id,
          title: magnet.title,
          type: magnet.type,
          success: false,
          error: error instanceof Error ? error.message : 'Unknown error'
        })
      }
    }

    console.log('\n' + '='.repeat(60))
    console.log('üìä –ò–¢–û–ì–ò –ú–ò–ì–†–ê–¶–ò–ò')
    console.log('='.repeat(60))
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ:    ${successCount}`)
    console.log(`‚ùå –û—à–∏–±–∫–∏:     ${errorCount}`)
    console.log(`üì¶ –í—Å–µ–≥–æ:      ${leadMagnets.length}`)
    console.log('='.repeat(60))

    if (errorCount > 0) {
      console.log('\n‚ùå –õ–∏–¥-–º–∞–≥–Ω–∏—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏:')
      results
        .filter(r => !r.success)
        .forEach(r => {
          console.log(`  - ${r.title} (${r.id})`)
          console.log(`    –û—à–∏–±–∫–∞: ${r.error}`)
        })
    }

    if (dryRun) {
      console.log('\nüí° –≠—Ç–æ –±—ã–ª DRY RUN. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run')
    } else {
      console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    }

    return {
      total: leadMagnets.length,
      success: successCount,
      errors: errorCount,
      results
    }

  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
const dryRun = process.argv.includes('--dry-run')

migrateLeadMagnetPreviews(dryRun)
  .then((result) => {
    process.exit(result.errors > 0 ? 1 : 0)
  })
  .catch((error) => {
    console.error('Fatal error:', error)
    process.exit(1)
  })

