#!/usr/bin/env tsx
/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç AI —á–∞—Ç–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ UX-—Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã
 * 
 * –ó–∞–ø—É—Å–∫: npm run test:chat
 * –ò–ª–∏: npx tsx scripts/test-chat.ts
 */

import { config } from 'dotenv'
config({ path: '.env.local' })

const COLORS = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  gray: '\x1b[90m',
}

const API_URL = process.env.NEXT_PUBLIC_URL || 'http://localhost:3000'

interface Message {
  role: 'user' | 'assistant'
  content: string
}

interface TestScenario {
  name: string
  description: string
  messages: string[]
  expectations: {
    shouldSearch?: boolean
    shouldHaveButtons?: boolean
    shouldHaveSpecialists?: boolean
    minMessages?: number
  }
}

/**
 * –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
 */
const SCENARIOS: TestScenario[] = [
  {
    name: '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ–¥–±–æ—Ä–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞',
    description: 'User –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã ‚Üí GPT –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–Ω–æ–ø–∫—É ‚Üí User –Ω–∞–∂–∏–º–∞–µ—Ç ‚Üí –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤',
    messages: [
      '–ü–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞',
      '–æ–Ω–ª–∞–π–Ω',
      '—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–µ—Å—Å',
      '–¥–æ 3000 —Ä—É–±–ª–µ–π',
      '–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è',
      'üîç –ù–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤'
    ],
    expectations: {
      shouldSearch: true,
      shouldHaveSpecialists: true,
      shouldHaveButtons: false,
    }
  },
  {
    name: '–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä–∞',
    description: 'User —Å—Ä–∞–∑—É —É–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
    messages: [
      '–ù–∞–π–¥–∏ —Ñ–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–µ—Ä–∞ –æ–Ω–ª–∞–π–Ω –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è –¥–æ 4000 —Ä—É–±–ª–µ–π',
      'üîç –ù–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤'
    ],
    expectations: {
      shouldSearch: true,
      shouldHaveSpecialists: true,
    }
  },
  {
    name: '–£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –≤—ã–¥–∞—á–∏',
    description: 'User –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ ‚Üí –ü—Ä–æ—Å–∏—Ç –µ—â–µ',
    messages: [
      '–ù—É–∂–µ–Ω –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –æ–Ω–ª–∞–π–Ω',
      '–ø–æ—Ö—É–¥–µ–Ω–∏–µ',
      '–¥–æ 5000',
      'üîç –ù–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤',
      '–ü–æ–∫–∞–∂–∏ –µ—â–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã'
    ],
    expectations: {
      shouldSearch: true,
      shouldHaveSpecialists: true,
      minMessages: 10, // 5 user + 5 assistant
    }
  },
  {
    name: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø—Ä–∏ –ø–ª–æ—Ö–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö',
    description: '–ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–∞–ª–æ ‚Üí GPT –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å',
    messages: [
      '–ù—É–∂–µ–Ω –º–∞—Å—Å–∞–∂–∏—Å—Ç –≤ –ú–∏–Ω—Å–∫–µ –æ—Ñ–ª–∞–π–Ω —Å –æ–ø—ã—Ç–æ–º 10 –ª–µ—Ç –¥–æ 1000 —Ä—É–±–ª–µ–π',
      'üîç –ù–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤',
      '–†–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏'
    ],
    expectations: {
      shouldSearch: true,
      shouldHaveButtons: true, // GPT –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
    }
  },
  {
    name: '–î–∏–∞–ª–æ–≥ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞',
    description: 'GPT –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–æ User –ù–ï –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É',
    messages: [
      '–ü–æ–º–æ–≥–∏ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ—É—á–∞',
      '–æ–Ω–ª–∞–π–Ω',
      '–∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç',
      '–¥–æ 6000'
    ],
    expectations: {
      shouldSearch: false, // –ü–æ–∏—Å–∫ –ù–ï –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è!
      shouldHaveButtons: true, // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–Ω–æ–ø–∫–∞ "üîç –ù–∞–π—Ç–∏"
      shouldHaveSpecialists: false,
    }
  },
]

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç API
 */
async function sendMessage(messages: Message[]): Promise<{
  response: string
  specialists: any[]
  buttons: string[]
  fullStream: string
}> {
  const response = await fetch(`${API_URL}/api/chat`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ messages }),
  })

  if (!response.ok) {
    throw new Error(`API error: ${response.status}`)
  }

  const reader = response.body?.getReader()
  const decoder = new TextDecoder()
  let fullStream = ''
  let assistantMessage = ''
  let specialists: any[] = []
  let buttons: string[] = []

  if (!reader) throw new Error('No reader')

  while (true) {
    const { done, value } = await reader.read()
    if (done) break

    const chunk = decoder.decode(value)
    fullStream += chunk

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç (–±–µ–∑ __SPECIALISTS__ –∏ __BUTTONS__)
    const textOnly = chunk
      .replace(/__SPECIALISTS__.*/, '')
      .replace(/__BUTTONS__.*/, '')
    
    if (textOnly) {
      assistantMessage += textOnly
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
    const specialistsMatch = chunk.match(/__SPECIALISTS__(.*)/)
    if (specialistsMatch) {
      try {
        specialists = JSON.parse(specialistsMatch[1])
      } catch (e) {}
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–Ω–æ–ø–∫–∏
    const buttonsMatch = chunk.match(/__BUTTONS__(.*)/)
    if (buttonsMatch) {
      try {
        buttons = JSON.parse(buttonsMatch[1])
      } catch (e) {}
    }
  }

  return {
    response: assistantMessage.trim(),
    specialists,
    buttons,
    fullStream,
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
 */
async function runScenario(scenario: TestScenario): Promise<boolean> {
  console.log(`\n${COLORS.cyan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${COLORS.reset}`)
  console.log(`${COLORS.blue}üìã –°—Ü–µ–Ω–∞—Ä–∏–π:${COLORS.reset} ${scenario.name}`)
  console.log(`${COLORS.gray}${scenario.description}${COLORS.reset}`)
  console.log(`${COLORS.cyan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${COLORS.reset}\n`)

  const messages: Message[] = []
  let lastResponse = ''
  let lastSpecialists: any[] = []
  let lastButtons: string[] = []

  try {
    for (let i = 0; i < scenario.messages.length; i++) {
      const userMessage = scenario.messages[i]
      
      console.log(`${COLORS.green}üë§ User:${COLORS.reset} ${userMessage}`)
      
      messages.push({ role: 'user', content: userMessage })
      
      const result = await sendMessage(messages)
      lastResponse = result.response
      lastSpecialists = result.specialists
      lastButtons = result.buttons

      messages.push({ role: 'assistant', content: result.response })

      console.log(`${COLORS.blue}ü§ñ Assistant:${COLORS.reset} ${result.response}`)
      
      if (result.buttons.length > 0) {
        console.log(`${COLORS.yellow}üîò Buttons:${COLORS.reset} ${result.buttons.join(', ')}`)
      }
      
      if (result.specialists.length > 0) {
        console.log(`${COLORS.green}üë• Specialists:${COLORS.reset} ${result.specialists.length} –Ω–∞–π–¥–µ–Ω–æ`)
        result.specialists.slice(0, 2).forEach((s: any) => {
          console.log(`   ${COLORS.gray}‚Ä¢ ${s.firstName} ${s.lastName} (${s.category})${COLORS.reset}`)
        })
      }
      
      console.log('')
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ expectations
    console.log(`${COLORS.cyan}üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:${COLORS.reset}`)
    let passed = true

    if (scenario.expectations.shouldSearch !== undefined) {
      const hasSpecialists = lastSpecialists.length > 0
      const expected = scenario.expectations.shouldSearch
      const check = hasSpecialists === expected
      
      console.log(
        check ? `${COLORS.green}‚úì${COLORS.reset}` : `${COLORS.red}‚úó${COLORS.reset}`,
        `shouldSearch: ${expected ? '–¥–∞' : '–Ω–µ—Ç'}`,
        `(—Ñ–∞–∫—Ç: ${hasSpecialists ? '–¥–∞' : '–Ω–µ—Ç'})`
      )
      
      if (!check) passed = false
    }

    if (scenario.expectations.shouldHaveButtons !== undefined) {
      const hasButtons = lastButtons.length > 0
      const expected = scenario.expectations.shouldHaveButtons
      const check = hasButtons === expected
      
      console.log(
        check ? `${COLORS.green}‚úì${COLORS.reset}` : `${COLORS.red}‚úó${COLORS.reset}`,
        `shouldHaveButtons: ${expected ? '–¥–∞' : '–Ω–µ—Ç'}`,
        `(—Ñ–∞–∫—Ç: ${hasButtons ? '–¥–∞' : '–Ω–µ—Ç'})`
      )
      
      if (!check) passed = false
    }

    if (scenario.expectations.shouldHaveSpecialists !== undefined) {
      const hasSpecialists = lastSpecialists.length > 0
      const expected = scenario.expectations.shouldHaveSpecialists
      const check = hasSpecialists === expected
      
      console.log(
        check ? `${COLORS.green}‚úì${COLORS.reset}` : `${COLORS.red}‚úó${COLORS.reset}`,
        `shouldHaveSpecialists: ${expected ? '–¥–∞' : '–Ω–µ—Ç'}`,
        `(—Ñ–∞–∫—Ç: ${hasSpecialists ? '–¥–∞' : '–Ω–µ—Ç'}, –Ω–∞–π–¥–µ–Ω–æ: ${lastSpecialists.length})`
      )
      
      if (!check) passed = false
    }

    if (scenario.expectations.minMessages !== undefined) {
      const messageCount = messages.length
      const expected = scenario.expectations.minMessages
      const check = messageCount >= expected
      
      console.log(
        check ? `${COLORS.green}‚úì${COLORS.reset}` : `${COLORS.red}‚úó${COLORS.reset}`,
        `minMessages: >= ${expected}`,
        `(—Ñ–∞–∫—Ç: ${messageCount})`
      )
      
      if (!check) passed = false
    }

    console.log(
      `\n${passed ? COLORS.green : COLORS.red}${passed ? '‚úÖ PASSED' : '‚ùå FAILED'}${COLORS.reset}`
    )

    return passed

  } catch (error) {
    console.error(`${COLORS.red}‚ùå –û—à–∏–±–∫–∞:${COLORS.reset}`, error)
    return false
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log(`${COLORS.cyan}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üß™ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ AI –ß–ê–¢–ê              ‚ïë
‚ïë   –ü—Ä–æ–≤–µ—Ä–∫–∞ UX-—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
${COLORS.reset}`)

  console.log(`${COLORS.gray}API URL: ${API_URL}${COLORS.reset}`)
  console.log(`${COLORS.gray}–°—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${SCENARIOS.length}${COLORS.reset}\n`)

  const results: boolean[] = []

  for (const scenario of SCENARIOS) {
    const passed = await runScenario(scenario)
    results.push(passed)
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000))
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log(`\n${COLORS.cyan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${COLORS.reset}`)
  console.log(`${COLORS.cyan}üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢${COLORS.reset}\n`)

  const passed = results.filter(r => r).length
  const failed = results.filter(r => !r).length
  const total = results.length

  console.log(`${COLORS.green}‚úÖ Passed: ${passed}/${total}${COLORS.reset}`)
  console.log(`${COLORS.red}‚ùå Failed: ${failed}/${total}${COLORS.reset}`)

  const percentage = Math.round((passed / total) * 100)
  console.log(`\n${COLORS.cyan}–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${percentage}%${COLORS.reset}`)

  if (failed === 0) {
    console.log(`\n${COLORS.green}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!${COLORS.reset}\n`)
    process.exit(0)
  } else {
    console.log(`\n${COLORS.red}‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´!${COLORS.reset}\n`)
    process.exit(1)
  }
}

main().catch(console.error)

