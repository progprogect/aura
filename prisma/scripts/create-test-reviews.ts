/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
 * –°–æ–∑–¥–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function updateSpecialistReviewStats(specialistId: string): Promise<void> {
  const reviews = await prisma.review.findMany({
    where: { specialistId },
    select: { rating: true }
  })

  const totalReviews = reviews.length
  let averageRating = 0
  if (totalReviews > 0) {
    const sum = reviews.reduce((acc, review) => acc + review.rating, 0)
    averageRating = Math.round((sum / totalReviews) * 10) / 10
  }

  await prisma.specialistProfile.update({
    where: { id: specialistId },
    data: { averageRating, totalReviews }
  })
}

async function createTestReviews() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤...')

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
    const specialists = await prisma.specialistProfile.findMany({
      take: 10,
      include: {
        user: true,
        services: {
          where: { isActive: true },
          take: 1
        }
      }
    })

    if (specialists.length === 0) {
      console.log('‚ùå –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –±–∞–∑–µ')
      return
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: ${specialists.length}`)

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    let clientUser = await prisma.user.findFirst({
      where: {
        NOT: {
          id: { in: specialists.map(s => s.userId) }
        }
      }
    })

    if (!clientUser) {
      clientUser = await prisma.user.create({
        data: {
          firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
          lastName: '–ö–ª–∏–µ–Ω—Ç',
          phone: '+79990000000'
        }
      })
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç')
    }

    let created = 0

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    for (const specialist of specialists) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
      let order = await prisma.order.findFirst({
        where: {
          specialistProfileId: specialist.id,
          status: 'completed',
          review: null
        }
      })

      // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, —Å–æ–∑–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∞
      if (!order && specialist.services.length > 0) {
        order = await prisma.order.create({
          data: {
            serviceId: specialist.services[0].id,
            specialistProfileId: specialist.id,
            clientUserId: clientUser.id,
            clientName: `${clientUser.firstName} ${clientUser.lastName}`,
            clientContact: clientUser.phone,
            clientMessage: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤',
            pointsUsed: specialist.services[0].price,
            status: 'completed',
            completedAt: new Date()
          }
        })
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è ${specialist.user.firstName}`)
      }

      if (!order) {
        console.log(`‚ö†Ô∏è  –ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è ${specialist.user.firstName}`)
        continue
      }

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
      const rating = Math.floor(Math.random() * 3) + 3 // 3, 4 –∏–ª–∏ 5
      const comments = [
        '–û—Ç–ª–∏—á–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –ø–æ–º–æ–≥ —Ä–µ—à–∏—Ç—å –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!',
        '–û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω —Ä–∞–±–æ—Ç–æ–π. –í—Å–µ —á—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.',
        '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –≤—Å–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É—é!',
        '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞. –ü–ª–∞–Ω–∏—Ä—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞.',
        null
      ]
      const comment = comments[Math.floor(Math.random() * comments.length)]

      await prisma.review.create({
        data: {
          orderId: order.id,
          specialistId: specialist.id,
          userId: clientUser.id,
          rating,
          comment
        }
      })

      created++
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–∑—ã–≤: ${rating}‚òÖ –¥–ª—è ${specialist.user.firstName}`)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await updateSpecialistReviewStats(specialist.id)
    }

    console.log('‚ú® –ì–æ—Ç–æ–≤–æ!')
    console.log(`   –°–æ–∑–¥–∞–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: ${created}`)

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
createTestReviews()
  .then(() => {
    console.log('üéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ')
    process.exit(0)
  })
  .catch((error) => {
    console.error('üí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error)
    process.exit(1)
  })
