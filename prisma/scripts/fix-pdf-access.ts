/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 401 –æ—à–∏–±–æ–∫ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö PDF —Ñ–∞–π–ª–æ–≤
 * 
 * –ü—Ä–æ–±–ª–µ–º–∞: PDF —Ñ–∞–π–ª—ã –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–µ–∑ resource_type: 'raw' –∏ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 * –†–µ—à–µ–Ω–∏–µ: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º PDF —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤ Cloudinary
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx ts-node prisma/scripts/fix-pdf-access.ts
 */

import { PrismaClient } from '@prisma/client'
import { uploadPDF } from '../../src/lib/cloudinary/config'

const prisma = new PrismaClient()

async function fixPDFAccess() {
  console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ PDF —Ñ–∞–π–ª–∞–º...\n')

  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç—ã —Ç–∏–ø–∞ 'file' —Å PDF —Ñ–∞–π–ª–∞–º–∏
    const leadMagnets = await prisma.leadMagnet.findMany({
      where: {
        type: 'file',
        fileUrl: {
          contains: '.pdf'
        }
      },
      select: {
        id: true,
        title: true,
        fileUrl: true,
        specialistProfileId: true
      }
    })

    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: ${leadMagnets.length}\n`)

    if (leadMagnets.length === 0) {
      console.log('‚úÖ PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã')
      return
    }

    let successCount = 0
    let errorCount = 0

    for (const leadMagnet of leadMagnets) {
      console.log(`‚öôÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${leadMagnet.title}`)
      console.log(`   URL: ${leadMagnet.fileUrl}`)

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        const checkResponse = await fetch(leadMagnet.fileUrl!)
        
        if (checkResponse.status === 401) {
          console.log('   ‚ùå 401 Unauthorized - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
          
          // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
          const arrayBuffer = await checkResponse.arrayBuffer()
          const buffer = Buffer.from(arrayBuffer)
          const base64 = `data:application/pdf;base64,${buffer.toString('base64')}`

          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
          const uploadResult = await uploadPDF(
            base64,
            'lead-magnets',
            `pdf_${leadMagnet.specialistProfileId}_${leadMagnet.id}`
          )

          // –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –ë–î
          await prisma.leadMagnet.update({
            where: { id: leadMagnet.id },
            data: { fileUrl: uploadResult.url }
          })

          console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ! –ù–æ–≤—ã–π URL: ${uploadResult.url}`)
          successCount++
        } else if (checkResponse.status === 200) {
          console.log('   ‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')
          successCount++
        } else {
          console.log(`   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${checkResponse.status}`)
          errorCount++
        }
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`, error)
        errorCount++
      }

      console.log('') // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    }

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:')
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`)
    console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${errorCount}`)
    console.log(`   üìÑ –í—Å–µ–≥–æ: ${leadMagnets.length}`)

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
fixPDFAccess()
  .then(() => {
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\nüí• –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:', error)
    process.exit(1)
  })

