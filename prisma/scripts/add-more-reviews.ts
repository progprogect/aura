import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function updateSpecialistReviewStats(specialistId: string): Promise<void> {
  const reviews = await prisma.review.findMany({
    where: { specialistId },
    select: { rating: true }
  })

  const totalReviews = reviews.length
  let averageRating = 0
  if (totalReviews > 0) {
    const sum = reviews.reduce((acc, review) => acc + review.rating, 0)
    averageRating = Math.round((sum / totalReviews) * 10) / 10
  }

  await prisma.specialistProfile.update({
    where: { id: specialistId },
    data: { averageRating, totalReviews }
  })
}

async function addMoreReviews() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤...')

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Å —É—Å–ª—É–≥–∞–º–∏
    const specialists = await prisma.specialistProfile.findMany({
      include: {
        user: true,
        services: {
          where: { isActive: true },
          take: 1
        }
      }
    })

    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    const clients = await prisma.user.findMany({
      where: {
        NOT: {
          specialistProfile: { isNot: null }
        }
      },
      take: 10
    })

    if (clients.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ')
      return
    }

    let created = 0

    for (const specialist of specialists) {
      if (specialist.services.length === 0) continue

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      for (const client of clients) {
        const existingOrder = await prisma.order.findFirst({
          where: {
            specialistProfileId: specialist.id,
            clientUserId: client.id,
            status: 'completed'
          }
        })

        if (existingOrder) continue

        const order = await prisma.order.create({
          data: {
            serviceId: specialist.services[0].id,
            specialistProfileId: specialist.id,
            clientUserId: client.id,
            clientName: `${client.firstName} ${client.lastName}`,
            clientContact: client.phone,
            clientMessage: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑',
            pointsUsed: specialist.services[0].price,
            status: 'completed',
            completedAt: new Date()
          }
        })

        const rating = Math.floor(Math.random() * 3) + 3 // 3, 4 –∏–ª–∏ 5
        const comments = [
          '–û—Ç–ª–∏—á–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –ø–æ–º–æ–≥ —Ä–µ—à–∏—Ç—å –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!',
          '–û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω —Ä–∞–±–æ—Ç–æ–π. –í—Å–µ —á—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.',
          '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –≤—Å–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É—é!',
          '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞. –ü–ª–∞–Ω–∏—Ä—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞.',
          '–ë—ã—Å—Ç—Ä–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ. –°–ø–∞—Å–∏–±–æ!',
          '–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ!',
          '–ü–æ–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.',
          '–û—á–µ–Ω—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π.'
        ]
        const comment = comments[Math.floor(Math.random() * comments.length)]

        await prisma.review.create({
          data: {
            orderId: order.id,
            specialistId: specialist.id,
            userId: client.id,
            rating,
            comment,
          }
        })

        created++
        if (created >= 20) break // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 –æ—Ç–∑—ã–≤–∞–º–∏
      }

      if (created >= 20) break

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await updateSpecialistReviewStats(specialist.id)
    }

    console.log('‚ú® –ì–æ—Ç–æ–≤–æ!')
    console.log(`üéâ –°–æ–∑–¥–∞–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: ${created}`)
  } catch (error) {
    console.error('üí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error)
  } finally {
    await prisma.$disconnect()
  }
}

addMoreReviews()
