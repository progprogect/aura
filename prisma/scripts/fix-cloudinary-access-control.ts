/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ access control –¥–ª—è —Ñ–∞–π–ª–æ–≤ –≤ Cloudinary —á–µ—Ä–µ–∑ API
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Cloudinary explicit() –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è resource_type –∏ access_mode
 * –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx prisma/scripts/fix-cloudinary-access-control.ts
 */

import { PrismaClient } from '@prisma/client'
import { v2 as cloudinary } from 'cloudinary'

const prisma = new PrismaClient()

/**
 * –ò–∑–≤–ª–µ—á—å public_id –∏–∑ Cloudinary URL
 */
function extractPublicIdFromUrl(url: string): string | null {
  try {
    // https://res.cloudinary.com/cloud/image/upload/v123/aura/lead-magnets/file.pdf
    // –ù—É–∂–Ω–æ: aura/lead-magnets/file
    const match = url.match(/\/(?:image|raw)\/upload\/(?:v\d+\/)?(.+?)(?:\.\w+)?(?:\?|$)/)
    if (match && match[1]) {
      return match[1]
    }
    return null
  } catch {
    return null
  }
}

/**
 * –ò—Å–ø—Ä–∞–≤–∏—Ç—å resource_type —á–µ—Ä–µ–∑ Cloudinary API
 */
async function fixResourceType(publicId: string, filename: string): Promise<string | null> {
  try {
    console.log(`   üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å resource_type —á–µ—Ä–µ–∑ API...`)
    
    // –ú–µ—Ç–æ–¥ 1: explicit - —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const result = await cloudinary.uploader.explicit(publicId, {
      type: 'upload',
      resource_type: 'raw',
      invalidate: true
    })
    
    console.log(`   ‚úÖ Resource type –∏–∑–º–µ–Ω—ë–Ω —á–µ—Ä–µ–∑ explicit`)
    return result.secure_url

  } catch (error: any) {
    console.log(`   ‚ö†Ô∏è  Explicit –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`)
    
    // –ú–µ—Ç–æ–¥ 2: –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å rename (–∏–Ω–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    try {
      console.log(`   üîÑ –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ rename...`)
      const newPublicId = `${publicId}_fixed`
      
      await cloudinary.uploader.rename(publicId, newPublicId, {
        resource_type: 'image', // –°—Ç–∞—Ä—ã–π —Ç–∏–ø
        to_type: 'upload',
        invalidate: true
      })
      
      // –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ raw —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
      const uploadResult = await cloudinary.uploader.upload(
        `https://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/${newPublicId}.${filename.split('.').pop()}`,
        {
          public_id: publicId,
          resource_type: 'raw',
          type: 'upload',
          access_mode: 'public',
          overwrite: true,
          invalidate: true
        }
      )
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      await cloudinary.uploader.destroy(newPublicId, { resource_type: 'image' })
      
      console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ rename`)
      return uploadResult.secure_url
      
    } catch (renameError: any) {
      console.log(`   ‚ö†Ô∏è  Rename –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${renameError.message}`)
      return null
    }
  }
}

async function fixCloudinaryAccessControl() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ access control —á–µ—Ä–µ–∑ Cloudinary API...\n')

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
  cloudinary.config({
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET,
    secure: true
  })

  try {
    // –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL —á–µ—Ä–µ–∑ raw SQL
    const leadMagnets = await prisma.$queryRaw<Array<{
      id: string
      title: string
      fileUrl: string | null
    }>>`
      SELECT id, title, "fileUrl"
      FROM "LeadMagnet"
      WHERE type = 'file'
        AND "fileUrl" LIKE '%/image/upload/%'
        AND ("fileUrl" LIKE '%.pdf' OR "fileUrl" LIKE '%.doc%' OR "fileUrl" LIKE '%.zip')
    `

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ PDF —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º resource_type: ${leadMagnets.length}\n`)

    if (leadMagnets.length === 0) {
      console.log('‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π resource_type')
      return
    }

    let fixed = 0
    let errors = 0

    for (const lm of leadMagnets) {
      console.log(`\n‚öôÔ∏è  ${lm.title}`)
      console.log(`   –°—Ç–∞—Ä—ã–π URL: ${lm.fileUrl}`)

      try {
        const publicId = extractPublicIdFromUrl(lm.fileUrl!)
        
        if (!publicId) {
          console.error('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å public_id –∏–∑ URL')
          errors++
          continue
        }

        console.log(`   Public ID: ${publicId}`)

        const newUrl = await fixResourceType(publicId, lm.title)

        if (newUrl) {
          // –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –ë–î
          await prisma.leadMagnet.update({
            where: { id: lm.id },
            data: { fileUrl: newUrl }
          })

          console.log(`   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!`)
          console.log(`   –ù–æ–≤—ã–π URL: ${newUrl}`)
          
          if (!newUrl.includes('/raw/upload/')) {
            console.warn('   ‚ö†Ô∏è  WARNING: URL –≤—Å—ë –µ—â—ë –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /raw/upload/')
          }

          fixed++
        } else {
          console.error('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ API')
          errors++
        }

        await new Promise(r => setTimeout(r, 1000))

      } catch (error) {
        console.error('   ‚ùå –û—à–∏–±–∫–∞:', error)
        errors++
      }
    }

    console.log('\n\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    console.log(`   üìÑ –í—Å–µ–≥–æ: ${leadMagnets.length}`)
    console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixed}`)
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errors}`)

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫
fixCloudinaryAccessControl()
  .then(() => {
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\nüí• –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:', error)
    process.exit(1)
  })

