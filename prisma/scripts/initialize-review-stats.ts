/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
 * –ó–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ add_review_stats_to_specialist
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function initializeReviewStats() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤...')

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
    const specialists = await prisma.specialistProfile.findMany({
      select: { id: true }
    })

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: ${specialists.length}`)

    let updated = 0
    let errors = 0

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    for (const specialist of specialists) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        const reviews = await prisma.review.findMany({
          where: { specialistId: specialist.id },
          select: { rating: true }
        })

        const totalReviews = reviews.length

        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        let averageRating = 0
        if (totalReviews > 0) {
          const sum = reviews.reduce((acc, review) => acc + review.rating, 0)
          averageRating = Math.round((sum / totalReviews) * 10) / 10
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        await prisma.specialistProfile.update({
          where: { id: specialist.id },
          data: {
            averageRating,
            totalReviews
          }
        })

        if (totalReviews > 0) {
          console.log(`‚úÖ Specialist ${specialist.id}: ${averageRating}‚òÖ (${totalReviews} –æ—Ç–∑—ã–≤–æ–≤)`)
          updated++
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è specialist ${specialist.id}:`, error)
        errors++
      }
    }

    console.log('‚ú® –ì–æ—Ç–æ–≤–æ!')
    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`)
    console.log(`   –û—à–∏–±–æ–∫: ${errors}`)
    console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ (–±–µ–∑ –æ—Ç–∑—ã–≤–æ–≤): ${specialists.length - updated - errors}`)

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
initializeReviewStats()
  .then(() => {
    console.log('üéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ')
    process.exit(0)
  })
  .catch((error) => {
    console.error('üí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error)
    process.exit(1)
  })

