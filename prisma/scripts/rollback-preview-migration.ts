/**
 * –°–∫—Ä–∏–ø—Ç rollback –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é
 * 
 * –û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è base64 –ø—Ä–µ–≤—å—é
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx ts-node prisma/scripts/rollback-preview-migration.ts
 */

import { PrismaClient } from '@prisma/client'
import { deletePreview } from '../../src/lib/cloudinary/preview-uploader'

const prisma = new PrismaClient()

async function rollbackMigration() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é...\n')

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ª–∏–¥-–º–∞–≥–Ω–∏—Ç—ã —Å previewUrls –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º previewImage (backup)
    const leadMagnets = await prisma.$queryRaw<Array<{
      id: string
      title: string
      previewImage: string | null
      previewUrls: any
    }>>`
      SELECT id, title, "previewImage", "previewUrls"
      FROM "LeadMagnet"
      WHERE "previewUrls" IS NOT NULL
        AND "previewImage" IS NOT NULL
    `

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–∫–∞—Ç–∞: ${leadMagnets.length}\n`)

    if (leadMagnets.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–∫–∞—Ç–∞')
      return
    }

    let rolledBack = 0
    let errors = 0

    for (const leadMagnet of leadMagnets) {
      console.log(`‚öôÔ∏è  –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º: ${leadMagnet.title}`)

      try {
        // –£–¥–∞–ª—è–µ–º –∏–∑ Cloudinary
        try {
          await deletePreview(leadMagnet.id)
          console.log('   üóëÔ∏è  –ü—Ä–µ–≤—å—é —É–¥–∞–ª–µ–Ω–æ –∏–∑ Cloudinary')
        } catch (error) {
          console.warn('   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ Cloudinary:', error)
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –ë–î (—É–¥–∞–ª—è–µ–º previewUrls)
        await prisma.$executeRaw`
          UPDATE "LeadMagnet" 
          SET "previewUrls" = NULL 
          WHERE "id" = ${leadMagnet.id}
        `

        console.log('   ‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω')
        rolledBack++

      } catch (error) {
        console.error('   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞:', error)
        errors++
      }

      console.log('')
    }

    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–∞—Ç–∞:')
    console.log(`   üìÑ –í—Å–µ–≥–æ: ${leadMagnets.length}`)
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${rolledBack}`)
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errors}`)

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫
rollbackMigration()
  .then(() => {
    console.log('\nüéâ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\nüí• –û—Ç–∫–∞—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:', error)
    process.exit(1)
  })

