/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: –ü–µ—Ä–µ–Ω–æ—Å base64 –ø—Ä–µ–≤—å—é –≤ Cloudinary
 * 
 * –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
 * 1. –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç—ã —Å base64 previewImage –Ω–æ –±–µ–∑ previewUrls
 * 2. –ó–∞–≥—Ä—É–∂–∞–µ—Ç base64 –≤ Cloudinary —Å responsive —Ä–∞–∑–º–µ—Ä–∞–º–∏
 * 3. –û–±–Ω–æ–≤–ª—è–µ—Ç previewUrls –≤ –ë–î
 * 4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±—ç–∫–∞–ø –≤ temporary –ø–æ–ª–µ
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx ts-node prisma/scripts/migrate-preview-to-cdn.ts
 */

import { PrismaClient } from '@prisma/client'
import { uploadPreviewFromDataUrl } from '../../src/lib/cloudinary/preview-uploader'

const prisma = new PrismaClient()

interface MigrationStats {
  total: number
  migrated: number
  skipped: number
  errors: number
}

async function migratePreviewToCDN() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–µ–≤—å—é –≤ Cloudinary...\n')

  const stats: MigrationStats = {
    total: 0,
    migrated: 0,
    skipped: 0,
    errors: 0
  }

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ª–∏–¥-–º–∞–≥–Ω–∏—Ç—ã —Å base64 –ø—Ä–µ–≤—å—é –Ω–æ –±–µ–∑ previewUrls
    const leadMagnets = await prisma.$queryRaw<Array<{
      id: string
      title: string
      previewImage: string | null
    }>>`
      SELECT id, title, "previewImage"
      FROM "LeadMagnet"
      WHERE "previewImage" IS NOT NULL
        AND "previewUrls" IS NULL
    `

    stats.total = leadMagnets.length
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: ${stats.total}\n`)

    if (stats.total === 0) {
      console.log('‚úÖ –ù–µ—Ç –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏')
      return
    }

    for (const leadMagnet of leadMagnets) {
      console.log(`‚öôÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${leadMagnet.title}`)

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ base64
        if (!leadMagnet.previewImage?.startsWith('data:image')) {
          console.log('   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ base64 —Ñ–æ—Ä–º–∞—Ç')
          stats.skipped++
          console.log('')
          continue
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Cloudinary —Å responsive —Ä–∞–∑–º–µ—Ä–∞–º–∏
        console.log('   üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Cloudinary...')
        const uploadResult = await uploadPreviewFromDataUrl(
          leadMagnet.previewImage,
          leadMagnet.id
        )

        // –û–±–Ω–æ–≤–ª—è–µ–º –ë–î –∏—Å–ø–æ–ª—å–∑—É—è raw SQL –¥–ª—è JSON –ø–æ–ª—è
        await prisma.$executeRaw`
          UPDATE "LeadMagnet"
          SET "previewUrls" = ${JSON.stringify(uploadResult)}::jsonb
          WHERE id = ${leadMagnet.id}
        `

        console.log('   ‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ')
        console.log(`      - Thumbnail: ${uploadResult.thumbnail}`)
        console.log(`      - Card: ${uploadResult.card}`)
        console.log(`      - Detail: ${uploadResult.detail}`)
        
        stats.migrated++

      } catch (error) {
        console.error('   ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
        stats.errors++
      }

      console.log('')

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (rate limiting)
      await new Promise(resolve => setTimeout(resolve, 500))
    }

    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:')
    console.log(`   üìÑ –í—Å–µ–≥–æ: ${stats.total}`)
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${stats.migrated}`)
    console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${stats.skipped}`)
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${stats.errors}`)

    if (stats.migrated > 0) {
      console.log('\nüí° –°–æ–≤–µ—Ç: –°—Ç–∞—Ä—ã–µ base64 –ø—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ previewImage –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ rollback')
      console.log('   –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: UPDATE "LeadMagnet" SET "previewImage" = NULL WHERE "previewUrls" IS NOT NULL')
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫
migratePreviewToCDN()
  .then(() => {
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\nüí• –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:', error)
    process.exit(1)
  })

