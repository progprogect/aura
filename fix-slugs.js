const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: "postgresql://postgres:AEXabgipqvhbLSwunyuZfLBgwtZsgHjg@hopper.proxy.rlwy.net:40277/railway"
    }
  }
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
function transliterate(text) {
  const cyrillic = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
    '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
  }
  
  return text
    .toLowerCase()
    .split('')
    .map(char => cyrillic[char] || char)
    .join('')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è slug'–∞
function createSlug(firstName, lastName, category, id) {
  const transliteratedFirst = transliterate(firstName)
  const transliteratedLast = transliterate(lastName)
  
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ-–ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ü–∏—Ñ—Ä—ã, –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
  const cleanFirst = transliteratedFirst.replace(/[^a-z]/g, '').replace(/\s+/g, '-')
  const cleanLast = transliteratedLast.replace(/[^a-z]/g, '').replace(/\s+/g, '-')
  
  return `${cleanFirst}-${cleanLast}-${category}-${id}`
}

async function fixSlugs() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º slug\'—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤...')
    
    const specialists = await prisma.specialist.findMany({
      select: {
        id: true,
        firstName: true,
        lastName: true,
        category: true,
        slug: true
      }
    })
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: ${specialists.length}`)
    
    let updated = 0
    let errors = 0
    
    for (const specialist of specialists) {
      try {
        const newSlug = createSlug(
          specialist.firstName,
          specialist.lastName,
          specialist.category,
          specialist.id.substring(specialist.id.length - 4) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞ ID
        )
        
        console.log(`üîÑ ${specialist.firstName} ${specialist.lastName}`)
        console.log(`   –°—Ç–∞—Ä—ã–π: "${specialist.slug}"`)
        console.log(`   –ù–æ–≤—ã–π: "${newSlug}"`)
        
        await prisma.specialist.update({
          where: { id: specialist.id },
          data: { slug: newSlug }
        })
        
        console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω`)
        updated++
        
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
        errors++
      }
      
      console.log('')
    }
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`)
    console.log(`   - –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`)
    console.log(`   - –û—à–∏–±–æ–∫: ${errors}`)
    
    if (updated > 0) {
      console.log('\nüéâ Slug\'—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!')
      console.log('‚úÖ –¢–µ–ø–µ—Ä—å –≤—Å–µ slug\'—ã —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã')
      console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message)
  } finally {
    await prisma.$disconnect()
  }
}

fixSlugs()
